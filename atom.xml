<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Riroaki</title>
  
  <subtitle>Riroaki&#39;s home</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://riroaki.github.io/"/>
  <updated>2019-04-24T18:27:56.551Z</updated>
  <id>http://riroaki.github.io/</id>
  
  <author>
    <name>Riroaki</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Aerospike + redis + 流立方部署经历</title>
    <link href="http://riroaki.github.io/Aerospike/"/>
    <id>http://riroaki.github.io/Aerospike/</id>
    <published>2019-04-24T03:21:24.000Z</published>
    <updated>2019-04-24T18:27:56.551Z</updated>
    
    <content type="html"><![CDATA[<p>这几天因为业务需要，在linux服务器搞个redis集群。</p><a id="more"></a><h3 id="Aerospike"><a href="#Aerospike" class="headerlink" title="Aerospike"></a>Aerospike</h3><pre class="line-numbers language-shell"><code class="language-shell">$ tar zxf aerospike-server-community-4.5.1.5-ubuntu18.04.tgz$ cd aerospike-server-community-4.5.1.5-ubuntu18.04//aerospike-server-community-4.5.1.5-ubuntu18.04$ ll$ sudo ./asinstall...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">Checking dependenciesDependency not found: python 2.6+ (< 3)Failed to find all dependencies. Please install all required packages.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>好嘛，没装python。</p><pre class="line-numbers language-shell"><code class="language-shell">bolean@bolean:/$ sudo apt install python2Reading package lists... DoneBuilding dependency treeReading state information... DoneE: Unable to locate package python2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看来是apt源出了问题。</p><pre class="line-numbers language-shell"><code class="language-shell">bolean@bolean:/$ apt updateErr:1 http://us.archive.ubuntu.com/ubuntu bionic InRelease  Could not resolve 'mirrrors.aliyun.com'Err:2 http://security.ubuntu.com/ubuntu bionic-security InRelease  Could not resolve 'mirrrors.aliyun.com'Err:3 http://us.archive.ubuntu.com/ubuntu bionic-updates InRelease  Could not resolve 'mirrrors.aliyun.com'Err:4 http://us.archive.ubuntu.com/ubuntu bionic-backports InRelease  Could not resolve 'mirrrors.aliyun.com'Reading package lists... DoneBuilding dependency treeReading state information... DoneAll packages are up to date.W: Failed to fetch http://us.archive.ubuntu.com/ubuntu/dists/bionic/InRelease  Could not resolve 'mirrrors.aliyun.com'W: Failed to fetch http://us.archive.ubuntu.com/ubuntu/dists/bionic-updates/InRelease  Could not resolve 'mirrrors.aliyun.com'W: Failed to fetch http://us.archive.ubuntu.com/ubuntu/dists/bionic-backports/InRelease  Could not resolve 'mirrrors.aliyun.com'W: Failed to fetch http://security.ubuntu.com/ubuntu/dists/bionic-security/InRelease  Could not resolve 'mirrrors.aliyun.com'W: Some index files failed to download. They have been ignored, or old ones used instead.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查了一下找到一个说法（<a href="https://askubuntu.com/questions/1076242/running-sudo-apt-get-update-returns-connection-errors）：">https://askubuntu.com/questions/1076242/running-sudo-apt-get-update-returns-connection-errors）：</a></p><blockquote><p>This was caused by Kaspersky Total Security version 2019. It is a known issue that this version blocks HTTP and HTTPS traffic from consoles. It will be solved in the 2020 version next year, so in the meantime I uninstalled the 2019 version and reinstalled the 2018 version.</p></blockquote><p>然后苦思冥想——终于发现了不对劲的地方：</p><pre class="line-numbers language-shell"><code class="language-shell">Could not resolve 'mirrrors.aliyun.com'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mirrror？？？</p><p>哪个zz把mirror拼错的。。</p><p>果然，在<code>/etc/apt/apt.conf</code>中赫然写着：</p><p><code>Acquire::http::Proxy &quot;http://mirrrors.aliyun.com&quot;;</code></p><p>……改回来之后，发现还是有错：</p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo apt updateErr:1 http://security.ubuntu.com/ubuntu bionic-security InRelease  502  Bad Gateway [IP: 117.91.183.232 80]Err:2 http://us.archive.ubuntu.com/ubuntu bionic InRelease  502  Bad Gateway [IP: 117.91.183.232 80]Err:3 http://us.archive.ubuntu.com/ubuntu bionic-updates InRelease  502  Bad Gateway [IP: 117.91.183.232 80]Err:4 http://us.archive.ubuntu.com/ubuntu bionic-backports InRelease  502  Bad Gateway [IP: 117.91.183.232 80]Reading package lists... DoneN: See apt-secure(8) manpage for repository creation and user configuration details.N: Updating from such a repository can't be done securely, and is therefore disabled by default.E: The repository 'http://security.ubuntu.com/ubuntu bionic-security InRelease' is not signed.E: Failed to fetch http://security.ubuntu.com/ubuntu/dists/bionic-security/InRelease  502  Bad Gateway [IP: 117.91.183.232 80]N: See apt-secure(8) manpage for repository creation and user configuration details.N: Updating from such a repository can't be done securely, and is therefore disabled by default.E: The repository 'http://us.archive.ubuntu.com/ubuntu bionic InRelease' is not signed.E: Failed to fetch http://us.archive.ubuntu.com/ubuntu/dists/bionic/InRelease  502  Bad Gateway [IP: 117.91.183.232 80]E: Failed to fetch http://us.archive.ubuntu.com/ubuntu/dists/bionic-updates/InRelease  502  Bad Gateway [IP: 117.91.183.232 80]E: The repository 'http://us.archive.ubuntu.com/ubuntu bionic-updates InRelease' is not signed.N: Updating from such a repository can't be done securely, and is therefore disabled by default.N: See apt-secure(8) manpage for repository creation and user configuration details.E: Failed to fetch http://us.archive.ubuntu.com/ubuntu/dists/bionic-backports/InRelease  502  Bad Gateway [IP: 117.91.183.232 80]E: The repository 'http://us.archive.ubuntu.com/ubuntu bionic-backports InRelease' is not signed.N: Updating from such a repository can't be done securely, and is therefore disabled by default.N: See apt-secure(8) manpage for repository creation and user configuration details.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这下真该换源了。把<code>source.list</code>的内容清空，换成：</p><pre class="line-numbers language-shell"><code class="language-shell">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ok了。顺着刚才安装了aerospike和aerospike-tool，成功。</p><p>启动后，可以用asadm查看当前集群：</p><pre class="line-numbers language-shell"><code class="language-shell">$ asadmSeed:        [('127.0.0.1', 3000, None)]Config_file: /home/bolean/.aerospike/astools.conf, /etc/aerospike/astools.confAerospike Interactive Shell, version 0.2.1ERROR: Not able to connect any cluster with [('127.0.0.1', 3000, None)].<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>接下来安装redis：</p><pre class="line-numbers language-shell"><code class="language-shell">$ sudo apt install make gcc make-guile# 将redis解压，放在usr/local文件目录下，然后进入redis目录：$ make PREFIX=/usr/local/redis-5.0.4 MALLOC=libc install# 将conf放在bin目录下$ cp redis.conf bin/$ cd bin && tree.├── redis-benchmark├── redis-check-aof├── redis-check-rdb├── redis-cli├── redis-sentinel -> redis-server├── redis-server└── redis.conf0 directories, 7 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动redis：</p><ul><li>可以在bin直接启动：<code>./redis-server</code>，但是这样是前端启动，会话关闭就停止运行</li><li>在配置文件修改守护进程选项，变成后台运行：</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># /usr/local/redis-5.0.4/bin/redis.conf################################# GENERAL ###################################### By default Redis does not run as a daemon. Use 'yes' if you need it.# Note that Redis will write a pid file in /var/run/redis.pid when daemonized.daemonize yes # no就是前台运行，后台运行就要改成yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行：</p><pre class="line-numbers language-shell"><code class="language-shell"># /usr/local/redis-5.0.4/bin/$ ./redis-server ./redis.conf10442:C 24 Apr 2019 13:36:47.716 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo10442:C 24 Apr 2019 13:36:47.716 # Redis version=5.0.4, bits=64, commit=00000000, modified=0, pid=10442, just started10442:C 24 Apr 2019 13:36:47.716 # Configuration loaded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动客户端进行连接：</p><pre class="line-numbers language-shell"><code class="language-shell">$ ./redis-cli 127.0.0.1:6379> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>关闭（shutdown则数据不会丢失）：</p><pre class="line-numbers language-shell"><code class="language-shell">$ ./bin/redis-cli shutdown$ ./bin/redis-cli shutdown # 强行关闭，有风险<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置执行文件：</p><pre class="line-numbers language-shell"><code class="language-shell"># .../redis-5.0.4/$ sudo cp bin/redis-server /usr/local/bin$ sudo cp bin/redis-cli /usr/local/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="搭建redis集群"><a href="#搭建redis集群" class="headerlink" title="搭建redis集群"></a>搭建redis集群</h3><pre class="line-numbers language-shell"><code class="language-shell"># .../redis.5.0.4/$ mkdir redis_cluster$ cd redis_cluster$ mkdir 7000 7001 7002             #redis集群要求最少有3个节点$ touch 7000/redis.conf$ touch 7001/redis.conf$ touch 7002/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对刚才创建的三个文件进行修改：</p><pre class="line-numbers language-shell"><code class="language-shell">port 7000               # 端口7000,7001,7002，与目录对应bind 127.0.0.1    #默认ip为127.0.0.1，需要改为其他节点机器可访问的ip，                                    #否则创建集群时无法访问对应的端口，无法创建集群daemonize yes       #redis后台运行cluster-enabled yes                                      #开启集群cluster-config-file nodes_7000.conf      #集群的配置，配置文件首次启动自动生成 7000，7001，7002  cluster-node-timeout 8000                       #请求超时，默认15秒，可自行设置appendonly yes      #开启aof持久化模式，每次写操作请求都追加到appendonly.aof文件中appendfsync always                                      #每次有写操作的时候都同步logfile "/data/redis/logs/redis.log"     #redis服务日志pidfile /var/run/redis_7000.pid              #pidfile文件对应7000，7001，7002<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动节点：</p><pre class="line-numbers language-shell"><code class="language-shell"># .../redis.5.0.4/bin/$ ./redis_server ../redis_cluster/7000/redis.conf$ ./redis_server ../redis_cluster/7001/redis.conf$ ./redis_server ../redis_cluster/7002/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>检查运行状态：<code>ps -ef | grep redis</code></p><p>创建集群（中间会跳出提示确认主从关系，一般默认yes就可以）：</p><pre class="line-numbers language-shell"><code class="language-shell">$ redis-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002>>> Performing hash slots allocation on 3 nodes...Master[0] -> Slots 0 - 5460Master[1] -> Slots 5461 - 10922Master[2] -> Slots 10923 - 16383M: ac89a9153573984a3b44aac06145eab7ea891688 127.0.0.1:7000   slots:[0-5460] (5461 slots) masterM: 5d84b4867d3209aa2fca638b1f7959d3e6b6d5b5 127.0.0.1:7001   slots:[5461-10922] (5462 slots) masterM: 457b35c69e1de25650e0d35d7ca85af6c4b0578f 127.0.0.1:7002   slots:[10923-16383] (5461 slots) masterCan I set the above configuration? (type 'yes' to accept): yes>>> Nodes configuration updated>>> Assign a different config epoch to each node>>> Sending CLUSTER MEET messages to join the clusterWaiting for the cluster to join..>>> Performing Cluster Check (using node 127.0.0.1:7000)M: ac89a9153573984a3b44aac06145eab7ea891688 127.0.0.1:7000   slots:[0-5460] (5461 slots) masterM: 457b35c69e1de25650e0d35d7ca85af6c4b0578f 127.0.0.1:7002   slots:[10923-16383] (5461 slots) masterM: 5d84b4867d3209aa2fca638b1f7959d3e6b6d5b5 127.0.0.1:7001   slots:[5461-10922] (5462 slots) master[OK] All nodes agree about slots configuration.>>> Check for open slots...>>> Check slots coverage...[OK] All 16384 slots covered.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>环境验证（检查集群状态）：</p><pre class="line-numbers language-shell"><code class="language-shell">$  redis-cli --cluster info 127.0.0.1:7000127.0.0.1:7000 (ac89a915...) -> 0 keys | 5461 slots | 0 slaves.127.0.0.1:7002 (457b35c6...) -> 0 keys | 5461 slots | 0 slaves.127.0.0.1:7001 (5d84b486...) -> 0 keys | 5462 slots | 0 slaves.[OK] 0 keys in 3 masters.0.00 keys per slot on average.$ redis-cli --cluster check 127.0.0.1:7000127.0.0.1:7000 (ac89a915...) -> 0 keys | 5461 slots | 0 slaves.127.0.0.1:7002 (457b35c6...) -> 0 keys | 5461 slots | 0 slaves.127.0.0.1:7001 (5d84b486...) -> 0 keys | 5462 slots | 0 slaves.[OK] 0 keys in 3 masters.0.00 keys per slot on average.>>> Performing Cluster Check (using node 127.0.0.1:7000)M: ac89a9153573984a3b44aac06145eab7ea891688 127.0.0.1:7000   slots:[0-5460] (5461 slots) masterM: 457b35c69e1de25650e0d35d7ca85af6c4b0578f 127.0.0.1:7002   slots:[10923-16383] (5461 slots) masterM: 5d84b4867d3209aa2fca638b1f7959d3e6b6d5b5 127.0.0.1:7001   slots:[5461-10922] (5462 slots) master[OK] All nodes agree about slots configuration.>>> Check for open slots...>>> Check slots coverage...[OK] All 16384 slots covered.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>登录节点：</p><pre class="line-numbers language-shell"><code class="language-shell">$ redis-cli -h 10.100.1.239  -p 7000127.0.0.1:7000> cluster info # 查看集群状态cluster_state:okcluster_slots_assigned:16384cluster_slots_ok:16384cluster_slots_pfail:0cluster_slots_fail:0cluster_known_nodes:3cluster_size:3cluster_current_epoch:3cluster_my_epoch:1cluster_stats_messages_ping_sent:970cluster_stats_messages_pong_sent:906cluster_stats_messages_sent:1876cluster_stats_messages_ping_received:904cluster_stats_messages_pong_received:970cluster_stats_messages_meet_received:2cluster_stats_messages_received:1876<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在多个服务器搭建多个集群"><a href="#在多个服务器搭建多个集群" class="headerlink" title="在多个服务器搭建多个集群"></a>在多个服务器搭建多个集群</h3><p>同上操作，对其他服务器做一样的配置即可。</p><h3 id="节点启动和关闭脚本"><a href="#节点启动和关闭脚本" class="headerlink" title="节点启动和关闭脚本"></a>节点启动和关闭脚本</h3><p>如果有多个节点可以这么启动和关闭：</p><pre class="line-numbers language-shell"><code class="language-shell"># 启动，在每个服务器执行for((i=0;i<3;i++));     do redis-server ~/redis-5.0.4/redis-cluster/700$i/redis.conf;done# 关闭，IP为三台服务器对应IPfor((i=0;i<3;i++));    do redis-cli -c -h $IP -p 700$i shutdown; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="无法启动"><a href="#无法启动" class="headerlink" title="无法启动"></a>无法启动</h3><p>删除每个集群的配置文件（第一次运行会产生的<code>nodes_700x.conf</code>），再对每个服务器重启</p><h3 id="Linux安装OpenJDK配置环境"><a href="#Linux安装OpenJDK配置环境" class="headerlink" title="Linux安装OpenJDK配置环境"></a>Linux安装OpenJDK配置环境</h3><p>流立方真的很坑爹。按照这个链接下载包，然后用dpkg安装，遇到依赖要用apt的-f参数下载。</p><p>btw，Linux机器上，网页可以在links上浏览。links2甚至支持鼠标点击～</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/zhoujie/p/redis3.html">https://www.cnblogs.com/zhoujie/p/redis3.html</a></p><p><a href="https://blog.csdn.net/isoleo/article/details/53303916">https://blog.csdn.net/isoleo/article/details/53303916</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天因为业务需要，在linux服务器搞个redis集群。&lt;/p&gt;
    
    </summary>
    
      <category term="back end" scheme="http://riroaki.github.io/categories/back-end/"/>
    
    
      <category term="linux" scheme="http://riroaki.github.io/tags/linux/"/>
    
      <category term="shell" scheme="http://riroaki.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>ML学习日记8——自己实现一个神经网络（2）</title>
    <link href="http://riroaki.github.io/ML-8-My-Neuron-Network-Model-2/"/>
    <id>http://riroaki.github.io/ML-8-My-Neuron-Network-Model-2/</id>
    <published>2019-04-24T01:24:08.000Z</published>
    <updated>2019-04-24T18:27:16.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第二代网络的训练结果"><a href="#第二代网络的训练结果" class="headerlink" title="第二代网络的训练结果"></a>第二代网络的训练结果</h3><p>将Neuron合并到Layer层，对逻辑进行修整，终于能够正常跑出结果了，而且效果还不差：</p><a id="more"></a><pre class="line-numbers language-shell"><code class="language-shell"># sigmoid + sigmoid + softmax# 256 / 10100%|██████████| 235/235 [04:25<00:00,  1.00s/it]Total loss for epoch 10: 32288.39537826673, time cost: 265.6903088092804 secs.Total loss for prediction: 5931.410300381332, accuracy: 0.8228<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell"># tanh + sigmoid + softmax# 64 / 5100%|██████████| 938/938 [04:36<00:00,  4.17it/s]Total loss for epoch 5: 41377.05493973562, time cost: 277.0324709415436 secs.Total loss for prediction: 8342.556892968885, accuracy: 0.7391<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell"># 128 / 5100%|██████████| 469/469 [04:30<00:00,  2.37it/s]Total loss for epoch 5: 36775.7511731053, time cost: 270.526123046875 secs.Total loss for prediction: 6180.927977005118, accuracy: 0.8236<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell"># 256 / 5100%|██████████| 235/235 [04:24<00:00,  1.26it/s]Total loss for epoch 5: 45772.576551853526, time cost: 264.71701884269714 secs.Total loss for prediction: 7214.586185511183, accuracy: 0.8187<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>忍不住又要贴代码在这里……</p><h3 id="Layer类"><a href="#Layer类" class="headerlink" title="Layer类"></a>Layer类</h3><p>更新w和b矩阵的部分是关键！</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Layer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_dim<span class="token punctuation">:</span> int<span class="token punctuation">,</span> out_dim<span class="token punctuation">:</span> int<span class="token punctuation">,</span> activation<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__in_dim <span class="token operator">=</span> in_dim        self<span class="token punctuation">.</span>__out_dim <span class="token operator">=</span> out_dim        self<span class="token punctuation">.</span>__w <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span>in_dim<span class="token punctuation">,</span> out_dim<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__b <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span>out_dim<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__act_func <span class="token operator">=</span> act_set<span class="token punctuation">[</span>activation<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>__act_diff_func <span class="token operator">=</span> act_diff_set<span class="token punctuation">[</span>activation<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>__rate <span class="token operator">=</span> <span class="token number">0.3</span>        self<span class="token punctuation">.</span>__input <span class="token operator">=</span> None        self<span class="token punctuation">.</span>__output <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">feed_forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x_batch<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__input <span class="token operator">=</span> x_batch        self<span class="token punctuation">.</span>__output <span class="token operator">=</span> np<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>x_batch<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__w<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_batch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>__b        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__act_func<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__output<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">back_propagation</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grad_batch<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> after_act<span class="token punctuation">:</span> bool <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Softmax + cross entropy = improved, where after_act = False</span>        <span class="token keyword">if</span> after_act<span class="token punctuation">:</span>            grad_batch <span class="token operator">*=</span> self<span class="token punctuation">.</span>__act_diff_func<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__output<span class="token punctuation">)</span>        batch_size <span class="token operator">=</span> len<span class="token punctuation">(</span>grad_batch<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Each row is grads for neurons in the layer</span>        res <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__input<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>inner<span class="token punctuation">(</span>grad_batch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>__w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># mini-batch</span>        diff_w <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__w<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>        diff_b <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>            diff_w <span class="token operator">+=</span> np<span class="token punctuation">.</span>outer<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> grad_batch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            diff_b <span class="token operator">+=</span> grad_batch<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>__w <span class="token operator">-=</span> self<span class="token punctuation">.</span>__rate <span class="token operator">*</span> diff_w <span class="token operator">/</span> batch_size        self<span class="token punctuation">.</span>__b <span class="token operator">-=</span> self<span class="token punctuation">.</span>__rate <span class="token operator">*</span> diff_b <span class="token operator">/</span> batch_size        <span class="token keyword">return</span> res    @property    <span class="token keyword">def</span> <span class="token function">in_dim</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__in_dim    @property    <span class="token keyword">def</span> <span class="token function">out_dim</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__out_dim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Model类"><a href="#Model类" class="headerlink" title="Model类"></a>Model类</h3><p>大体来说和第一代没有本质区别，除了稍微调整一下代码结构。</p><p>另外，我发现python的type hint并没有什么作用……</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__layers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>__depth <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>__in_dim <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        self<span class="token punctuation">.</span>__out_dim <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        self<span class="token punctuation">.</span>__loss_func <span class="token operator">=</span> None        self<span class="token punctuation">.</span>__loss_diff_func <span class="token operator">=</span> None        self<span class="token punctuation">.</span>__loss_name <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">add_layer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> out_dim<span class="token punctuation">:</span> int<span class="token punctuation">,</span> in_dim<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Check validness of parameters</span>        <span class="token keyword">assert</span> out_dim <span class="token operator">></span> <span class="token number">0</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>__depth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">assert</span> in_dim <span class="token operator">></span> <span class="token number">0</span>            self<span class="token punctuation">.</span>__out_dim <span class="token operator">=</span> in_dim        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">assert</span> in_dim <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">or</span> in_dim <span class="token operator">==</span> self<span class="token punctuation">.</span>__out_dim        activation <span class="token operator">=</span> activation<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> activation <span class="token keyword">in</span> act_set        self<span class="token punctuation">.</span>__depth <span class="token operator">+=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>__layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Layer<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__out_dim<span class="token punctuation">,</span> out_dim<span class="token punctuation">,</span> activation<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__out_dim <span class="token operator">=</span> out_dim    <span class="token keyword">def</span> <span class="token function">remove_layer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Check validness of index</span>        <span class="token keyword">assert</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;</span> index <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>__depth<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">></span> index <span class="token operator">>=</span> <span class="token operator">-</span>self<span class="token punctuation">.</span>__depth<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__depth <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">del</span> self<span class="token punctuation">.</span>__layers<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># Update input and output dim if necessary.</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>__depth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__in_dim <span class="token operator">=</span> <span class="token number">0</span>            self<span class="token punctuation">.</span>__out_dim <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__in_dim <span class="token operator">=</span> self<span class="token punctuation">.</span>__layers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>in_dim            self<span class="token punctuation">.</span>__out_dim <span class="token operator">=</span> self<span class="token punctuation">.</span>__layers<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>out_dim    <span class="token keyword">def</span> <span class="token function">compile</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> loss<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">"cross entropy"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> loss <span class="token keyword">in</span> loss_set        self<span class="token punctuation">.</span>__loss_func <span class="token operator">=</span> loss_set<span class="token punctuation">[</span>loss<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>__loss_diff_func <span class="token operator">=</span> loss_diff_set<span class="token punctuation">[</span>loss<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>__loss_name <span class="token operator">=</span> loss    <span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> batch_size<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span> epochs<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Check network parameters</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>__depth <span class="token operator">></span> <span class="token number">0</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>__loss_func <span class="token keyword">is</span> <span class="token operator">not</span> None        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>__loss_diff_func <span class="token keyword">is</span> <span class="token operator">not</span> None        <span class="token comment" spellcheck="true"># Check input parameters</span>        <span class="token keyword">assert</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token keyword">assert</span> batch_size <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> epochs <span class="token operator">></span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># Train using mini-batch</span>        <span class="token keyword">for</span> epoch_i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> epochs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            loss_sum <span class="token operator">=</span> <span class="token number">0</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> shuffle2<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>            <span class="token keyword">for</span> x_batch<span class="token punctuation">,</span> y_batch <span class="token keyword">in</span> batch<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>                y_pred <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_batch<span class="token punctuation">)</span>                loss_batch <span class="token operator">=</span> self<span class="token punctuation">.</span>__loss_func<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y_batch<span class="token punctuation">)</span>                loss_sum <span class="token operator">+=</span> loss_batch                <span class="token comment" spellcheck="true"># print("Loss for this batch is {}".format(loss_batch))</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>__loss_name <span class="token operator">==</span> <span class="token string">'cross entropy'</span><span class="token punctuation">:</span>                    grad <span class="token operator">=</span> y_pred <span class="token operator">-</span> y_batch                    grad <span class="token operator">=</span> self<span class="token punctuation">.</span>__layers<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>back_propagation<span class="token punctuation">(</span>grad<span class="token punctuation">,</span> after_act<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    grad <span class="token operator">=</span> self<span class="token punctuation">.</span>__loss_diff_func<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y<span class="token punctuation">)</span>                    grad <span class="token operator">=</span> self<span class="token punctuation">.</span>__layers<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>back_propagation<span class="token punctuation">(</span>grad<span class="token punctuation">)</span>                <span class="token keyword">for</span> layer <span class="token keyword">in</span> self<span class="token punctuation">.</span>__layers<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    layer<span class="token punctuation">.</span>back_propagation<span class="token punctuation">(</span>grad<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Total loss for epoch {}: {}, time cost: {} secs."</span>                  <span class="token punctuation">.</span>format<span class="token punctuation">(</span>epoch_i<span class="token punctuation">,</span> loss_sum<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> layer <span class="token keyword">in</span> self<span class="token punctuation">.</span>__layers<span class="token punctuation">:</span>            x <span class="token operator">=</span> layer<span class="token punctuation">.</span>feed_forward<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x    <span class="token keyword">def</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>        y_pred <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        index_pred <span class="token operator">=</span> y_pred<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        compare <span class="token operator">=</span> y<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> index_pred        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__loss_func<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>count_nonzero<span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    @property    <span class="token keyword">def</span> <span class="token function">depth</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__depth    @property    <span class="token keyword">def</span> <span class="token function">in_dim</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__in_dim    @property    <span class="token keyword">def</span> <span class="token function">out_dim</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__out_dim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说实话搞明白反向传播的逻辑花了我很长时间……终于能够做的差不多了。对mini-batch也有更深入的了解。</p><p>batch是全部梯度计算后用平均值更新一次，stochastic是随机取梯度更新，mini-batch是通用的操作，取一小个batch的结果进行平均后更新。</p><p>公式推导如果有时间再补上。</p><h3 id="待补充和修改的点"><a href="#待补充和修改的点" class="headerlink" title="待补充和修改的点"></a>待补充和修改的点</h3><ul><li>实现adam算法，自适应调整学习率</li></ul><p>（待续）</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第二代网络的训练结果&quot;&gt;&lt;a href=&quot;#第二代网络的训练结果&quot; class=&quot;headerlink&quot; title=&quot;第二代网络的训练结果&quot;&gt;&lt;/a&gt;第二代网络的训练结果&lt;/h3&gt;&lt;p&gt;将Neuron合并到Layer层，对逻辑进行修整，终于能够正常跑出结果了，而且效果还不差：&lt;/p&gt;
    
    </summary>
    
      <category term="machine learning" scheme="http://riroaki.github.io/categories/machine-learning/"/>
    
    
      <category term="deep learning" scheme="http://riroaki.github.io/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>面试所感</title>
    <link href="http://riroaki.github.io/Thoughts-about-interview/"/>
    <id>http://riroaki.github.io/Thoughts-about-interview/</id>
    <published>2019-04-22T10:59:27.000Z</published>
    <updated>2019-04-22T11:29:51.612Z</updated>
    
    <content type="html"><![CDATA[<p>这些天经历了很多面试，另一方面自己也有很多事情要做，有点感想。</p><a id="more"></a><h3 id="集中精力"><a href="#集中精力" class="headerlink" title="集中精力"></a>集中精力</h3><p>下午又双错过了阿里的电话……我保证手机不设静音了。</p><p>闲话少说，最大的收获是一个警告：集中精力在最擅长的领域。</p><p>做过前端，做过后端，做过iOS，小程序也玩一下，确实有点说头；然而杂七杂八的项目还不如找一个钻得深入。目前来看，我的简历和技能确实没有什么亮点。</p><p>然后一问Java，一问Python，问点计网，数据库，操作系统，算法也考一下。</p><p>学过但是记不住，学过但是基础不扎实。</p><blockquote><p>过去没学会的东西，现在要付出代价了。</p></blockquote><p>还好现在提前体验了面试的强度和问题的难度，不至于在毕业校招的时候才开眼看世界。</p><p>于是最终下定决心读研了。</p><h3 id="戒骄戒躁"><a href="#戒骄戒躁" class="headerlink" title="戒骄戒躁"></a>戒骄戒躁</h3><p>另一方面，机会确实很多——在这个互联网的红利还没有被吃光的日子里，可以说程序员还是混的最不差的那批人之一。在学校里可以比赛，做研究，写点开源的项目，甚至博客，都是提升自己的方式。</p><p>但是盲目地抓取手边的机会以求证明自己的勇气，其实反而不是智慧的做法。</p><p>脚踏实地一点，认识和熟悉自己，找到自己的真正所长，然后做深入下去。静静地等待机会，然后毫不犹豫地抓住。认真应对生活吧。</p><p>要相信：活着就会有好事发生。就是看你是不是能够等到那一刻了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这些天经历了很多面试，另一方面自己也有很多事情要做，有点感想。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ML学习日记7——自己实现一个神经网络（1）</title>
    <link href="http://riroaki.github.io/ML-7-My-Neuron-Network-Model/"/>
    <id>http://riroaki.github.io/ML-7-My-Neuron-Network-Model/</id>
    <published>2019-04-22T02:49:54.000Z</published>
    <updated>2019-04-24T18:28:42.383Z</updated>
    
    <content type="html"><![CDATA[<p>仿照keras的api，自己实现一个最简单的全连接神经网络。</p><p>支持特性：</p><ul><li>多种激活函数（sigmoid, tanh, relu, softmax）</li><li>多种损失函数（cross entropy, mean square error, mean absolute error）</li><li>小批量梯度下降</li></ul><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><p>首先，按照基本定义将设计划分成3个类：Neuron，Layer以及Model，层层递进。</p><p>随机打乱并分成mini-batch的函数，几个常用的激活函数和损失函数以及其导数实现在Util.py中：</p><p>除了softmax比较麻烦以外，其余的激活函数和损失函数都能够简单应对一维输入（单个case）和多维输入（多个case，即一个batch）。</p><p>对softmax和cross entropy的求导为了简单起见就省略了——因为在实际使用中通常他们是连在一起求导的，这样做得出的公式非常方便（见__cross_entropy_improved函数）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token comment" spellcheck="true"># Shuffle 2 arrays and return.</span><span class="token keyword">def</span> <span class="token function">shuffle2</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>    index <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># Make batches.</span><span class="token comment" spellcheck="true"># Add a progress bar to visualize the process.</span><span class="token keyword">def</span> <span class="token function">batch</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> size<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>    start<span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    p <span class="token operator">=</span> tqdm<span class="token punctuation">(</span>total<span class="token operator">=</span>end <span class="token operator">//</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> start <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>        curr <span class="token operator">=</span> min<span class="token punctuation">(</span><span class="token punctuation">[</span>start <span class="token operator">+</span> size<span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">yield</span> x<span class="token punctuation">[</span>start<span class="token punctuation">:</span>curr<span class="token punctuation">]</span><span class="token punctuation">,</span> y<span class="token punctuation">[</span>start<span class="token punctuation">:</span>curr<span class="token punctuation">]</span>        p<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        start <span class="token operator">=</span> curr    p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Activation functions.</span><span class="token comment" spellcheck="true"># Input an array</span><span class="token comment" spellcheck="true"># Returns an array.</span><span class="token keyword">def</span> <span class="token function">__sigmoid</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># sigmoid</span>    <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">__tanh</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># tanh</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> __sigmoid<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">__relu</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># relu</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">__softmax</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># softmax</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 2-d</span>        _max <span class="token operator">=</span> x<span class="token punctuation">.</span>max<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> _max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            x<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/=</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> x    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 1-d</span>        _max <span class="token operator">=</span> max<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x <span class="token operator">-</span> _max<span class="token punctuation">)</span>        <span class="token keyword">return</span> x <span class="token operator">/</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># derivatives of activation functions.</span><span class="token comment" spellcheck="true"># Input an array.</span><span class="token comment" spellcheck="true"># Returns an array.</span><span class="token keyword">def</span> <span class="token function">__sigmoid_diff</span><span class="token punctuation">(</span>y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># derivative of sigmoid</span>    _tmp <span class="token operator">=</span> __sigmoid<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token keyword">return</span> _tmp <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> _tmp<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">__tanh_diff</span><span class="token punctuation">(</span>y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># derivative of tanh</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">-</span> __tanh<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token keyword">def</span> <span class="token function">__relu_diff</span><span class="token punctuation">(</span>y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># derivative of relu</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>y <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># This part is a little different from other derivatives.</span><span class="token comment" spellcheck="true"># Use Jacobian method... actually this part of code won't be executed.</span><span class="token keyword">def</span> <span class="token function">__softmax_diff</span><span class="token punctuation">(</span>y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># derivative of softmax</span>    <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># _tmp = y.reshape(-1, 1)</span>    <span class="token comment" spellcheck="true"># return np.diagflat(_tmp) - np.dot(_tmp, _tmp.T)</span><span class="token comment" spellcheck="true"># Loss functions.</span><span class="token comment" spellcheck="true"># Returns a float.</span><span class="token keyword">def</span> <span class="token function">__cross_entropy</span><span class="token punctuation">(</span>y_pred<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># cross entropy</span>    <span class="token keyword">return</span> <span class="token operator">-</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>y <span class="token operator">*</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>y_pred<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">__mean_square_error</span><span class="token punctuation">(</span>y_pred<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># mean square err</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>y_pred <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">__mean_absolute_error</span><span class="token punctuation">(</span>y_pred<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># mean abs err</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>y_pred <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Derivatives of loss functions.</span><span class="token comment" spellcheck="true"># I didn't do this part because it will be improved..</span><span class="token keyword">def</span> <span class="token function">__cross_entropy_diff</span><span class="token punctuation">(</span>y_pred<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">__cross_entropy_improved</span><span class="token punctuation">(</span>y_pred<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> y_pred <span class="token operator">-</span> y<span class="token keyword">def</span> <span class="token function">__mean_square_error_diff</span><span class="token punctuation">(</span>y_pred<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y_pred <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">__mean_absolute_error_diff</span><span class="token punctuation">(</span>y_pred<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>y_pred <span class="token operator">></span> y<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Activation function set</span>act_set <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"sigmoid"</span><span class="token punctuation">:</span> __sigmoid<span class="token punctuation">,</span>    <span class="token string">"relu"</span><span class="token punctuation">:</span> __relu<span class="token punctuation">,</span>    <span class="token string">"tanh"</span><span class="token punctuation">:</span> __tanh<span class="token punctuation">,</span>    <span class="token string">"softmax"</span><span class="token punctuation">:</span> __softmax<span class="token punctuation">,</span>    <span class="token string">"none"</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> res<span class="token punctuation">:</span> res<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># derivatives set of activation functions</span>act_diff_set <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"sigmoid"</span><span class="token punctuation">:</span> __sigmoid_diff<span class="token punctuation">,</span>    <span class="token string">"tanh"</span><span class="token punctuation">:</span> __tanh_diff<span class="token punctuation">,</span>    <span class="token string">"relu"</span><span class="token punctuation">:</span> __relu_diff<span class="token punctuation">,</span>    <span class="token string">"softmax"</span><span class="token punctuation">:</span> __softmax_diff<span class="token punctuation">,</span>    <span class="token string">"none"</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> res<span class="token punctuation">:</span> res<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># Loss function set</span>loss_set <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"ce"</span><span class="token punctuation">:</span> __cross_entropy<span class="token punctuation">,</span>    <span class="token string">"mse"</span><span class="token punctuation">:</span> __mean_square_error<span class="token punctuation">,</span>    <span class="token string">"mae"</span><span class="token punctuation">:</span> __mean_absolute_error<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># derivatives set of loss functions</span>loss_diff_set <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"ce"</span><span class="token punctuation">:</span> __cross_entropy_diff<span class="token punctuation">,</span>    <span class="token string">"ce_i"</span><span class="token punctuation">:</span> __cross_entropy_improved<span class="token punctuation">,</span>    <span class="token string">"mse"</span><span class="token punctuation">:</span> __mean_square_error_diff<span class="token punctuation">,</span>    <span class="token string">"mae"</span><span class="token punctuation">:</span> __mean_absolute_error_diff<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="神经元Neuron"><a href="#神经元Neuron" class="headerlink" title="神经元Neuron"></a>神经元Neuron</h4><ul><li><p>变量：线性参数w和b</p></li><li><p>方法：向前传播foward，和向后传播backward</p></li></ul><p>前向传播中，x是一整个batch的输入。</p><p>后向传播中，diff_w和diff_b取batch中所有的平均值；采用adagrad约束学习率大小（全局率为0.3）；</p><p>并返回当前梯度乘参数w（取<strong>更新前</strong>的w，才是准确梯度）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Class of a neuron.</span><span class="token comment" spellcheck="true"># Use adagrad in gradient discent.</span><span class="token keyword">class</span> <span class="token class-name">Neuron</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> learn_rate<span class="token punctuation">:</span> float <span class="token operator">=</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__w <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>n<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__b <span class="token operator">=</span> <span class="token number">1.0</span>        self<span class="token punctuation">.</span>__rate <span class="token operator">=</span> learn_rate        self<span class="token punctuation">.</span>__grad_sum <span class="token operator">=</span> <span class="token number">1.0</span>    <span class="token comment" spellcheck="true"># Calculate forward results for a batch.</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> np<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__w<span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>__b    <span class="token comment" spellcheck="true"># Update parameters for a batch.</span>    <span class="token comment" spellcheck="true"># Grad_batch: n * 1 array, grad for all case in a batch.</span>    <span class="token comment" spellcheck="true"># X: n * 1 array, mean of a mini-batch.</span>    <span class="token comment" spellcheck="true"># Returns grad for previous layer.</span>    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grad_batch<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>        m <span class="token operator">=</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        res <span class="token operator">=</span> np<span class="token punctuation">.</span>outer<span class="token punctuation">(</span>grad_batch<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__w<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__grad_sum <span class="token operator">+=</span> grad_batch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span>            curr_rate <span class="token operator">=</span> self<span class="token punctuation">.</span>__rate <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__grad_sum<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>__w <span class="token operator">-=</span> curr_rate <span class="token operator">*</span> grad_batch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            self<span class="token punctuation">.</span>__b <span class="token operator">-=</span> curr_rate <span class="token operator">*</span> grad_batch<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> res        <span class="token comment" spellcheck="true"># m, diff_w = len(x), np.zeros(self.__w.shape)</span>        <span class="token comment" spellcheck="true"># res = np.outer(grad_batch, self.__w)</span>        <span class="token comment" spellcheck="true"># for i in range(m):</span>        <span class="token comment" spellcheck="true">#     diff_w -= grad_batch[i] * x[i]</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># # diff_w is mean of grad * x for each case xi.</span>        <span class="token comment" spellcheck="true"># # diff_b is mean of grad * 2</span>        <span class="token comment" spellcheck="true"># diff_w /= m</span>        <span class="token comment" spellcheck="true"># diff_b = grad_batch.sum() * -1.0</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># # Use mean of grad_batch as the grad for this batch.</span>        <span class="token comment" spellcheck="true"># grad = diff_b / m</span>        <span class="token comment" spellcheck="true"># diff_b = 2 * grad</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># # Use adagrad to optimize learning rate.</span>        <span class="token comment" spellcheck="true"># self.__grad_sum += grad ** 2</span>        <span class="token comment" spellcheck="true"># curr_rate = self.__rate / np.sqrt(self.__grad_sum)</span>        <span class="token comment" spellcheck="true"># self.__w -= curr_rate * diff_w</span>        <span class="token comment" spellcheck="true"># self.__b -= curr_rate * diff_b</span>        <span class="token comment" spellcheck="true"># # Return grads for previous layer.</span>        <span class="token comment" spellcheck="true"># return res</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="层Layer"><a href="#层Layer" class="headerlink" title="层Layer"></a>层Layer</h4><ul><li>变量：存储神经元，输入和输出大小，当前输入的batch（用于计算后向传播梯度）</li><li>方法：前向传播和后向传播以外，还有一些属性（property），方便在Model类获取。</li></ul><p>在后向传播的时候，如果不是最后一层那么就先经过激活函数的导数，再传入各个神经元，获得前一层的梯度；</p><p>但是如果在最后一层且使用的激活函数和损失函数是softmax和cross entropy的组合，那么就设置参数improved=True，详见代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Class of a layer.</span><span class="token comment" spellcheck="true"># Stores neurons.</span><span class="token comment" spellcheck="true"># Activation functions: sigmoid(default), relu, tanh, softmax are supported.</span><span class="token comment" spellcheck="true"># Keep the mean of input data for mini-batch calculation.</span><span class="token keyword">class</span> <span class="token class-name">Layer</span><span class="token punctuation">:</span>    __input<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_dim<span class="token punctuation">:</span> int<span class="token punctuation">,</span> out_dim<span class="token punctuation">:</span> int<span class="token punctuation">,</span> activation<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__in_dim<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__out_dim<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__input <span class="token operator">=</span> in_dim<span class="token punctuation">,</span> out_dim<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>__neurons <span class="token operator">=</span> <span class="token punctuation">[</span>Neuron<span class="token punctuation">(</span>in_dim<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>out_dim<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">assert</span> activation <span class="token keyword">in</span> act_set        self<span class="token punctuation">.</span>__act <span class="token operator">=</span> act_set<span class="token punctuation">[</span>activation<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>__act_diff <span class="token operator">=</span> act_diff_set<span class="token punctuation">[</span>activation<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Calculate the forward results for a batch.</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__input <span class="token operator">=</span> x        res <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>n<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> self<span class="token punctuation">.</span>__neurons<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__act<span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Update parameters for a batch.</span>    <span class="token comment" spellcheck="true"># Grad_batch: n * 1 array.</span>    <span class="token comment" spellcheck="true"># Returns grad_batch for previous layer.</span>    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grad_batch<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> improved<span class="token punctuation">:</span> bool <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># When improved = True, grad = softmax + ce, so we don't calculate act_diff</span>        <span class="token keyword">if</span> <span class="token operator">not</span> improved<span class="token punctuation">:</span>            grad_batch <span class="token operator">=</span> self<span class="token punctuation">.</span>__act_diff<span class="token punctuation">(</span>grad_batch<span class="token punctuation">)</span>        res <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>grad_batch<span class="token punctuation">)</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>__in_dim<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># grad_batch: each row is the gradients for case xi.</span>        <span class="token comment" spellcheck="true"># After transpose, each row is the gradient for neuron i.</span>        grad_batch <span class="token operator">=</span> grad_batch<span class="token punctuation">.</span>T        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__out_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> self<span class="token punctuation">.</span>__neurons<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span>grad_batch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>__input<span class="token punctuation">)</span>        <span class="token keyword">return</span> res    @property    <span class="token keyword">def</span> <span class="token function">in_dim</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__in_dim    @property    <span class="token keyword">def</span> <span class="token function">out_dim</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__out_dim    @property    <span class="token keyword">def</span> <span class="token function">activation</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__act<span class="token punctuation">.</span>__name__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模型Model"><a href="#模型Model" class="headerlink" title="模型Model"></a>模型Model</h4><ul><li>变量：存储每一层，当前层数，以及模型的输入和输出大小。</li><li>方法：加入层、减少层，编译（其实是配置损失函数），拟合，预测 ，评估，以及几个只读属性的获取。</li></ul><p>拟合的时候，batch_size一般是2的倍数（因为GPU的核数如此）在16～256间不等；epochs选10～20会比较稳定。</p><p>但是我没有做多核优化，那其实随意了……反正都是一样慢。</p><p>参数校验使用了一堆assert，其余内容详见代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Class of a model.</span><span class="token comment" spellcheck="true"># Stores layers.</span><span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__layers<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__depth <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>__loss<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__loss_diff <span class="token operator">=</span> None<span class="token punctuation">,</span> None    <span class="token comment" spellcheck="true"># Add one layer.</span>    <span class="token comment" spellcheck="true"># Input dimension of first layer should be explicitly specified.</span>    <span class="token comment" spellcheck="true"># Input dimension of other layers may be omitted.</span>    <span class="token comment" spellcheck="true"># Activation function: see definition of Layer.</span>    <span class="token keyword">def</span> <span class="token function">add_layer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> out_dim<span class="token punctuation">:</span> int<span class="token punctuation">,</span> in_dim<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Input dimension for first layer should be specified.</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>__depth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">assert</span> in_dim <span class="token operator">></span> <span class="token number">0</span>            <span class="token comment" spellcheck="true"># Set current output dim = input dim of layer 0.</span>            self<span class="token punctuation">.</span>__out_dim <span class="token operator">=</span> in_dim            self<span class="token punctuation">.</span>__in_dim <span class="token operator">=</span> in_dim        <span class="token comment" spellcheck="true"># -1 means auto decide the input dimension.</span>        <span class="token keyword">if</span> in_dim <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            in_dim <span class="token operator">=</span> self<span class="token punctuation">.</span>__out_dim        <span class="token comment" spellcheck="true"># Input dimension for other layers should be equal to out dim.</span>        <span class="token keyword">assert</span> in_dim <span class="token operator">==</span> self<span class="token punctuation">.</span>__out_dim        <span class="token comment" spellcheck="true"># Add layer.</span>        self<span class="token punctuation">.</span>__layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Layer<span class="token punctuation">(</span>in_dim<span class="token punctuation">,</span> out_dim<span class="token punctuation">,</span> activation<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__depth <span class="token operator">+=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>__out_dim <span class="token operator">=</span> out_dim    <span class="token comment" spellcheck="true"># Remove layer at a certain index.</span>    <span class="token keyword">def</span> <span class="token function">remove_layer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Check whether there are layers to remove.</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>__depth <span class="token operator">></span> <span class="token number">0</span>        <span class="token keyword">assert</span> index <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__layers<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__depth <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">del</span> self<span class="token punctuation">.</span>__layers<span class="token punctuation">[</span>index<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>__out_dim <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>__depth <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> self<span class="token punctuation">.</span>__layers<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>out_dim        self<span class="token punctuation">.</span>__in_dim <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>__depth <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> self<span class="token punctuation">.</span>__layers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>in_dim    <span class="token comment" spellcheck="true"># Configure the loss function: cross entropy, mean square / abs error, etc.</span>    <span class="token comment" spellcheck="true"># Configure the method: regression or classification (TODO)</span>    <span class="token keyword">def</span> <span class="token function">compile</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> loss<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">"ce"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Check name of loss function.</span>        <span class="token keyword">assert</span> loss <span class="token keyword">in</span> loss_set        <span class="token comment" spellcheck="true"># Configure the loss function</span>        self<span class="token punctuation">.</span>__loss <span class="token operator">=</span> loss_set<span class="token punctuation">[</span>loss<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>__loss_diff <span class="token operator">=</span> loss_diff_set<span class="token punctuation">[</span>loss<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Train the data using Mini-Batch Gradient Descent:</span>    <span class="token comment" spellcheck="true"># update parameters for one time in a batch.</span>    <span class="token comment" spellcheck="true"># Batch-size and epochs may be specified.</span>    <span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> batch_size<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">,</span> epochs<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Check whether the loss function is configured for model.</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>__loss <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> self<span class="token punctuation">.</span>__loss_diff <span class="token keyword">is</span> <span class="token operator">not</span> None        <span class="token comment" spellcheck="true"># Check if the model is empty.</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>__depth <span class="token operator">></span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># Check the validity of parameters.</span>        <span class="token keyword">assert</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>y<span class="token punctuation">)</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>__out_dim <span class="token operator">==</span> len<span class="token punctuation">(</span>y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>__in_dim <span class="token operator">==</span> len<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> batch_size <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> epochs <span class="token operator">></span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># Improve the process for ce after softmax.</span>        improved <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>loss_name <span class="token operator">==</span> <span class="token string">"cross_entropy"</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>__layers<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>activation <span class="token operator">==</span> <span class="token string">"softmax"</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>__loss_diff <span class="token operator">=</span> loss_diff_set<span class="token punctuation">[</span><span class="token string">"ce_i"</span><span class="token punctuation">]</span>                improved <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token comment" spellcheck="true"># Use batches to fit: shuffle and split the data into mini batches.</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> epochs <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            x<span class="token punctuation">,</span> y <span class="token operator">=</span> shuffle2<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>            loss <span class="token operator">=</span> <span class="token number">0.0</span>            start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> x_batch<span class="token punctuation">,</span> y_batch <span class="token keyword">in</span> batch<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>                y_pred <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_batch<span class="token punctuation">)</span>                loss <span class="token operator">+=</span> self<span class="token punctuation">.</span>__loss<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y_batch<span class="token punctuation">)</span>                grad_batch <span class="token operator">=</span> self<span class="token punctuation">.</span>__loss_diff<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y_batch<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># Improve the process for ce after softmax.</span>                grad_batch <span class="token operator">=</span> self<span class="token punctuation">.</span>__layers<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>backward<span class="token punctuation">(</span>grad_batch<span class="token punctuation">,</span> improved<span class="token operator">=</span>improved<span class="token punctuation">)</span>                <span class="token keyword">for</span> layer <span class="token keyword">in</span> self<span class="token punctuation">.</span>__layers<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    grad_batch <span class="token operator">=</span> layer<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>grad_batch<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Total loss for epoch {}: {}, time cost: {} secs"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span> loss<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Calculate as a batch, not single values.</span>    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> layer <span class="token keyword">in</span> self<span class="token punctuation">.</span>__layers<span class="token punctuation">:</span>            x <span class="token operator">=</span> layer<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x    <span class="token comment" spellcheck="true"># Calculate accuracy.</span>    <span class="token keyword">def</span> <span class="token function">evaluate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>        y_pred <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        loss <span class="token operator">=</span> self<span class="token punctuation">.</span>__loss<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        accuracy <span class="token operator">=</span> self<span class="token punctuation">.</span>__accuracy<span class="token punctuation">(</span>y_pred<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        <span class="token keyword">return</span> loss<span class="token punctuation">,</span> accuracy    <span class="token comment" spellcheck="true"># Calculate ratio of correct predictions.</span>    <span class="token keyword">def</span> <span class="token function">__accuracy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> y_pred<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">,</span> y<span class="token punctuation">:</span> np<span class="token punctuation">.</span>ndarray<span class="token punctuation">)</span><span class="token punctuation">:</span>        compare <span class="token operator">=</span> y_pred<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> y<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> np<span class="token punctuation">.</span>count_nonzero<span class="token punctuation">(</span>compare<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    @property    <span class="token keyword">def</span> <span class="token function">depth</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__depth    @property    <span class="token keyword">def</span> <span class="token function">in_dim</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__in_dim    @property    <span class="token keyword">def</span> <span class="token function">out_dim</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__out_dim    @property    <span class="token keyword">def</span> <span class="token function">loss_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__loss<span class="token punctuation">.</span>__name__<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="如何运行"><a href="#如何运行" class="headerlink" title="如何运行"></a>如何运行</h4><p>以mnist为例运行一下代码。激动人心的时刻到了！</p><p>详见下文，和keras的写法差不多：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> Model <span class="token keyword">import</span> Model<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> mnist<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>utils <span class="token keyword">import</span> to_categorical<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Load data</span>    <span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token operator">=</span> mnist<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Flatten input 28 * 28 matrix into a 784 vector</span>    x_train <span class="token operator">=</span> x_train<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span>    x_test <span class="token operator">=</span> x_test<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Make y into one-hot encoding</span>    y_train <span class="token operator">=</span> to_categorical<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    y_test <span class="token operator">=</span> to_categorical<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Build model</span>    model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add_layer<span class="token punctuation">(</span>in_dim<span class="token operator">=</span><span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">,</span> out_dim<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add_layer<span class="token punctuation">(</span>out_dim<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add_layer<span class="token punctuation">(</span>out_dim<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"softmax"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Compile model</span>    model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">"ce"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Train model</span>    model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Predict and evaluate</span>    loss<span class="token punctuation">,</span> accuracy <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Total loss for prediction: {}, accuracy: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>loss<span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="加一个进度条看看"><a href="#加一个进度条看看" class="headerlink" title="加一个进度条看看"></a>加一个进度条看看</h4><p>为了明显显示出当前进度，不让人产生“这代码怎么一点反应都没有，风扇还死命转，是不是死循环了”的错觉，我决定在batch函数加一个进度条。</p><p>之所以在batch部分加进度条是为了避免其对主体部分逻辑的干扰——好吧我主体部分已经写的够乱了。</p><p>新的batch函数：（需要progressBar库）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> Model <span class="token keyword">import</span> Model<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> mnist<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>utils <span class="token keyword">import</span> to_categorical<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Load data</span>    <span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token operator">=</span> mnist<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Flatten input 28 * 28 matrix into a 784 vector</span>    x_train <span class="token operator">=</span> x_train<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span>    x_test <span class="token operator">=</span> x_test<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Make y into one-hot encoding</span>    y_train <span class="token operator">=</span> to_categorical<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    y_test <span class="token operator">=</span> to_categorical<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Build model</span>    model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add_layer<span class="token punctuation">(</span>in_dim<span class="token operator">=</span><span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">,</span> out_dim<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"tanh"</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add_layer<span class="token punctuation">(</span>out_dim<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add_layer<span class="token punctuation">(</span>out_dim<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"softmax"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Compile model</span>    model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">"ce"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Train model</span>    model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Predict and evaluate</span>    loss<span class="token punctuation">,</span> accuracy <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Total loss for prediction: {}, accuracy: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>loss<span class="token punctuation">,</span> accuracy<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果：</p><pre><code>36%|███▋      | 341/938 [03:45&lt;06:56,  1.43it/s]36%|███▋      | 342/938 [03:46&lt;06:59,  1.42it/s]</code></pre><p>需要注意在ide里面，这里的进度条不是在原地刷新显示而是在不断打印新的一行……但是在控制台执行就是原地刷新了。</p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>很遗憾，但目前为止都没有得到很好的结果，准确率只比初始值（10%）高一点。</p><p>可能是哪里出了什么bug，这个反向传播写的我心态不好了……</p><p>痛定思痛决定重写一次。详情看下一篇吧。</p><p>（待续）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;仿照keras的api，自己实现一个最简单的全连接神经网络。&lt;/p&gt;
&lt;p&gt;支持特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多种激活函数（sigmoid, tanh, relu, softmax）&lt;/li&gt;
&lt;li&gt;多种损失函数（cross entropy, mean square 
      
    
    </summary>
    
      <category term="machine learning" scheme="http://riroaki.github.io/categories/machine-learning/"/>
    
    
      <category term="deep learning" scheme="http://riroaki.github.io/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络要点整理</title>
    <link href="http://riroaki.github.io/Network/"/>
    <id>http://riroaki.github.io/Network/</id>
    <published>2019-04-22T02:49:01.000Z</published>
    <updated>2019-04-24T03:18:23.528Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TCP-IP——4层模型"><a href="#TCP-IP——4层模型" class="headerlink" title="TCP/IP——4层模型"></a>TCP/IP——4层模型</h3><table><thead><tr><th>应用层——数据段</th><th>FTP、TELNET、HTTP、DNS</th><th>SNMP、TFTP、NTP</th></tr></thead><tbody><tr><td>传输层——数据包</td><td>TCP</td><td>UDP</td></tr><tr><td>（核心）网络互联层——数据帧</td><td>IP、ICMP</td><td></td></tr><tr><td>主机到网络层——比特</td><td>以太网、令牌环网；ARP、RARP</td></tr></tbody></table><h3 id="OSI参考——7层模型"><a href="#OSI参考——7层模型" class="headerlink" title="OSI参考——7层模型"></a>OSI参考——7层模型</h3><p>【应用层、表示层、会话层】、【传输层】、【网络层】、【数据链路层、物理层】</p><p>【】表示对应四层协议的某一层</p><h3 id="为什么以太网层上要加一层IP网络层"><a href="#为什么以太网层上要加一层IP网络层" class="headerlink" title="为什么以太网层上要加一层IP网络层"></a>为什么以太网层上要加一层IP网络层</h3><ul><li><p>数据链路层不止是以太网——由于历史上出现多种令牌环网等，所以不一定采取MAC地址形式标示；</p></li><li><p>MAC是基于厂商而不是地理位置，所以不能缩短路由，实时更新20e的表成本很大；</p></li><li><p>历史包袱：现有的以太网只实现了点到点连接，网络层IP实现了端到端连接。</p></li></ul><p>现在基于IP的地址分配，采用了诸如子网、CIDR等等维护域间路由，减少更新成本。</p><p>或许IPv6协议之后，世界上每台机器都有唯一的编号，可能可以做到改进。</p><h3 id="为什么在IP层上加一层TCP层"><a href="#为什么在IP层上加一层TCP层" class="headerlink" title="为什么在IP层上加一层TCP层"></a>为什么在IP层上加一层TCP层</h3><ul><li>TCP提供可靠传输方式</li><li>标志主机不同进程</li></ul><p>Socket封装了TCP协议的接口可以调用。</p><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><ul><li>get和post区别：内容写在请求头和请求主体；post更安全，可以避免跨站脚本攻击（CSRF）<ul><li>一般使用Token实现防御，就是关键请求需要使用特定的一次性加密Token标记。</li></ul></li><li>HEAD和BODY（可以没有body）之间有两个\r\n；可以包含多个HEAD，用一个\r\n分割。</li><li>Content-Length限制长度，或者是Transfer-Encoding: Chunked表示分块传输编码，每个块前标示块大小；而总长度未知，最后一个块长度是0，所以遇到0表示内容结束；块之间是两个\r\n。</li></ul><h4 id="MIME-TYPE"><a href="#MIME-TYPE" class="headerlink" title="MIME-TYPE"></a>MIME-TYPE</h4><pre class="line-numbers language-json"><code class="language-json">text/plaintext/htmltext/cssimage/jpegimage/pngimage/svg+xmlaudio/mp4video/mp4application/javascriptapplication/pdfapplication/zipapplication/atom+xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTTP1-0"><a href="#HTTP1-0" class="headerlink" title="HTTP1.0"></a>HTTP1.0</h4><ul><li>无状态短连接发完就关闭</li><li>声明Connection: keep-alive表示长连接</li></ul><h4 id="HTTP1-1（主流）"><a href="#HTTP1-1（主流）" class="headerlink" title="HTTP1.1（主流）"></a>HTTP1.1（主流）</h4><ul><li>HEAD编码用ASCII，BODY可以是ASCII也可以是二进制（图片视频等等）</li><li>默认长连接（主要是传输时允许复用），最后发送长度为0表示内容结束才会关闭连接。<ul><li>缺点是队头堵塞，需要服务器完全接受才能继续</li></ul></li></ul><h4 id="HTTP2-0（2015推出）"><a href="#HTTP2-0（2015推出）" class="headerlink" title="HTTP2.0（2015推出）"></a>HTTP2.0（2015推出）</h4><ul><li>多工通信，非阻塞。</li><li>HEAD加入信息压缩（Content-Encoding表示内容编码，一般是gzip）。</li><li>由于HTTP本质还是没有状态的，每次请求都会发送状态信息，所以修改成服务器和客户端共同维护cookies和user agent等重复字段的表，不需要每次都传相同信息，节约通信成本。</li><li>HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送（server push）。这一来就可以在空闲的时候预先把可能未来会需要的资源先发送到客户端，提高用户体验。</li></ul><h4 id="HTTPS：HTTP-over-TLS，是一种在加密信道进行-HTTP-内容传输的协议。"><a href="#HTTPS：HTTP-over-TLS，是一种在加密信道进行-HTTP-内容传输的协议。" class="headerlink" title="HTTPS：HTTP over TLS，是一种在加密信道进行 HTTP 内容传输的协议。"></a>HTTPS：HTTP over TLS，是一种在加密信道进行 HTTP 内容传输的协议。</h4><ul><li><p>TLS证书机制，CA信任链，根证书为最安全的</p></li><li><p>从上面的过程可以看到，TLS 的完整过程需要三个算法（协议），密钥交互算法，对称加密算法，和消息认证算法（TLS 的传输会使用 MAC(message authentication code) 进行完整性检查）。</p><p>我们以 Github 网站使用的 TLS 为例，使用浏览器可以看到它使用的加密为 <code>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</code>。其中密钥交互算法是 <code>ECDHE_RSA</code>，对称加密算法是 <code>AES_128_GCM</code>，消息认证（MAC）算法为 <code>SHA256</code>。</p></li><li><p>HSTS：强制浏览器使用HTTPS协议</p></li><li><p>中间人攻击、伪造证书攻击</p></li></ul><h3 id="Socket与TCP、UDP"><a href="#Socket与TCP、UDP" class="headerlink" title="Socket与TCP、UDP"></a>Socket与TCP、UDP</h3><h4 id="Socket编程："><a href="#Socket编程：" class="headerlink" title="Socket编程："></a>Socket编程：</h4><ul><li>服务原语作为函数名，不追究底层实现：<ul><li>socket()创建套接字</li><li>bind()分配套接字地址</li><li>listen()声明接受连接和队列长度</li><li>accept()被动连接，connect()主动连接请求</li><li>read()/write()数据交换</li><li>close()关闭连接</li></ul></li><li>服务器在不断等待连接请求，如果遇到接入，那么就开一个线程处理通信；</li><li>键盘输入可以中断，pthread_cancel，取消点机制可以在循环的accept阶段（阻塞式IO）终止。</li></ul><h4 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h4><ul><li><p>第一次握手(SYN=1, seq=x):</p><p>客户端发送一个 TCP 的 SYN 标志位置1的包，指明客户端打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。</p><p>发送完毕后，客户端进入 <code>SYN_SEND</code> 状态。</p></li><li><p>第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1):</p><p>服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加1，即X+1。 发送完毕后，服务器端进入 <code>SYN_RCVD</code> 状态。</p></li><li><p>第三次握手(ACK=1，ACKnum=y+1)</p><p>客户端再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写ISN的+1</p><p>发送完毕后，客户端进入 <code>ESTABLISHED</code> 状态，当服务器端接收到这个包时，也进入 <code>ESTABLISHED</code>状态，TCP 握手结束。</p></li></ul><h4 id="少见的情况：四次握手"><a href="#少见的情况：四次握手" class="headerlink" title="少见的情况：四次握手"></a>少见的情况：四次握手</h4><ul><li>请求连接的时候，多发送一个SYN包。</li><li>发生在双方对等，P2P的情况，双方都请求连接，两次syn和两次seq</li></ul><h4 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h4><ul><li><p>第一次挥手(FIN=1，seq=x)</p><p>假设客户端想要关闭连接，客户端发送一个 FIN 标志位置为1的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。</p><p>发送完毕后，客户端进入 <code>FIN_WAIT_1</code> 状态。</p></li><li><p>第二次挥手(ACK=1，ACKnum=x+1)</p><p>服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。</p><p>发送完毕后，服务器端进入 <code>CLOSE_WAIT</code> 状态，客户端接收到这个确认包之后，进入 <code>FIN_WAIT_2</code> 状态，等待服务器端关闭连接。</p></li><li><p>第三次挥手(FIN=1，seq=y)</p><p>服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为1。</p><p>发送完毕后，服务器端进入 <code>LAST_ACK</code> 状态，等待来自客户端的最后一个ACK。</p></li><li><p>第四次挥手(ACK=1，ACKnum=y+1)</p><p>客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 <code>TIME_WAIT</code>状态，等待可能出现的要求重传的 ACK 包。</p><p>服务器端接收到这个确认包之后，关闭连接，进入 <code>CLOSED</code> 状态。</p><p>客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 <code>CLOSED</code> 状态。</p><ul><li>为什么要等待2MSL：为了避免本次会话的包在会话结束后出现，影响下次会话。需要把这一次的包都接受完毕再关闭连接。</li></ul></li></ul><h4 id="SYN攻击"><a href="#SYN攻击" class="headerlink" title="SYN攻击"></a>SYN攻击</h4><ul><li>在三次握手过程中，服务器发送 SYN-ACK 之后，收到客户端的 ACK 之前的 TCP 连接称为半连接(half-open connect)。此时服务器处于 SYN_RCVD 状态。当收到 ACK 后，服务器才能转入 ESTABLISHED 状态.</li><li>SYN 攻击指的是，攻击客户端在短时间内伪造大量不存在的IP地址，向服务器不断地发送SYN包，服务器回复确认包，并等待客户的确认。由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。</li><li>SYN 攻击是一种典型的 DoS/DDoS 攻击。</li></ul><h4 id="TCP心跳检测（Keep-Alive）"><a href="#TCP心跳检测（Keep-Alive）" class="headerlink" title="TCP心跳检测（Keep Alive）"></a>TCP心跳检测（Keep Alive）</h4><ul><li>在交互过程中 ，双方都有可能因为物理原因或者故障而掉线，这个时候需要检测对方是否还在不然无法close释放进程。</li><li>TCP KeepAlive 的基本原理是，隔一段时间给连接对端发送一个探测包，如果收到对方回应的 ACK，则认为连接还是存活的，在超过一定重试次数之后还是没有收到对方的回应，则丢弃该 TCP 连接。</li></ul><h4 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h4><ul><li>只管发不管收，直播流等数据些微损失影响不大，传输速率比较重要的场景。</li><li>无连接，不必握手，直接发就可以；支持广播和多播。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;TCP-IP——4层模型&quot;&gt;&lt;a href=&quot;#TCP-IP——4层模型&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP——4层模型&quot;&gt;&lt;/a&gt;TCP/IP——4层模型&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;应用层——数据段
      
    
    </summary>
    
      <category term="interview" scheme="http://riroaki.github.io/categories/interview/"/>
    
    
      <category term="network" scheme="http://riroaki.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>数据库知识要点整理</title>
    <link href="http://riroaki.github.io/Database/"/>
    <id>http://riroaki.github.io/Database/</id>
    <published>2019-04-22T02:48:50.000Z</published>
    <updated>2019-04-22T04:38:53.749Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库管理系统原则——ACID"><a href="#数据库管理系统原则——ACID" class="headerlink" title="数据库管理系统原则——ACID"></a>数据库管理系统原则——ACID</h3><p><strong>ACID</strong>，是指<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F">数据库管理系统</a>（<a href="https://zh.wikipedia.org/wiki/DBMS">DBMS</a>）在写入或更新资料的过程中，为保证<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1">事务</a>（transaction）是正确可靠的，所必须具备的四个特性：<a href="https://zh.wikipedia.org/w/index.php?title=%E5%8E%9F%E5%AD%90%E6%80%A7&amp;action=edit&amp;redlink=1">原子性</a>（atomicity，或称不可分割性）、<a href="https://zh.wikipedia.org/w/index.php?title=%E4%B8%80%E8%87%B4%E6%80%A7_(%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F">一致性</a>&amp;action=edit&amp;redlink=1)（consistency）、<a href="https://zh.wikipedia.org/wiki/%E9%9A%94%E9%9B%A2%E6%80%A7">隔离性</a>（isolation，又称独立性）、<a href="https://zh.wikipedia.org/w/index.php?title=%E6%8C%81%E4%B9%85%E6%80%A7&amp;action=edit&amp;redlink=1">持久性</a>（durability）。</p><h4 id="Atomicity（原子性）："><a href="#Atomicity（原子性）：" class="headerlink" title="Atomicity（原子性）："></a>Atomicity（原子性）：</h4><p>一个事务（transaction）中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被<a href="https://zh.wikipedia.org/wiki/%E5%9B%9E%E6%BB%9A_(%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86">回滚</a>)（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简。</p><h4 id="Consistency（一致性）："><a href="#Consistency（一致性）：" class="headerlink" title="Consistency（一致性）："></a>Consistency（一致性）：</h4><p>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7">约束</a>、<a href="https://zh.wikipedia.org/wiki/%E8%A7%A6%E5%8F%91%E5%99%A8_(%E6%95%B0%E6%8D%AE%E5%BA%93">触发器</a>)、<a href="https://zh.wikipedia.org/w/index.php?title=%E7%BA%A7%E8%81%94%E5%9B%9E%E6%BB%9A&amp;action=edit&amp;redlink=1">级联回滚</a>等。</p><p>事务是维护数据一致性的基本单位。要么全部执行，要么全都不执行。</p><h4 id="Isolation（隔离性）："><a href="#Isolation（隔离性）：" class="headerlink" title="Isolation（隔离性）："></a>Isolation（隔离性）：</h4><p>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</p><h4 id="Durability（持久性）："><a href="#Durability（持久性）：" class="headerlink" title="Durability（持久性）："></a>Durability（持久性）：</h4><p>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。（结果一定会写入内存）</p><h3 id="数据库表设计原则"><a href="#数据库表设计原则" class="headerlink" title="数据库表设计原则"></a>数据库表设计原则</h3><ul><li>明确实体和表的对应关系：一对一还是一对多，还是多对多</li><li>对第一、第三、第三范式（三个范式不能生搬硬套，因为适当降低标准可以提高性能）：<ul><li>第一范式：1NF是对属性的原子性约束，要求<strong>属性具有原子性，不可再分解</strong>；</li><li>第二范式：2NF是对记录的惟一性约束，要求<strong>记录有惟一标识，即实体的惟一性</strong>；</li><li>第三范式：3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余。 <ul><li>实际操作我们应当如何减少数据冗余：<ul><li>冗余本质是用空间换时间，比如极端情况我把两张表合并到一起，就可以操作更简单，提高性能；但是代价就是存储开销比较大，完全没有必要这么做。</li><li><strong>支持派生冗余，反对重复冗余</strong>。派生冗余就是比如单价和数量属性计算得到总金额，这个是常用的数据所以引入可以提高性能；重复就是两个表没有必要的重复性。</li></ul></li></ul></li></ul></li><li>完整性约束：<ul><li>最基本的主键不能缺失</li><li>外键定义约束表不发生冲突</li></ul></li><li>一些经验，比如：<ul><li>表较少、字段较少、组成主键的子段少，性能高。</li><li>复杂计算在查询外执行，不要在数据库做。</li><li>表的内容过多就应该分割一些，做子表。</li></ul></li></ul><h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h3><h4 id="数据库内部实现："><a href="#数据库内部实现：" class="headerlink" title="数据库内部实现："></a>数据库内部实现：</h4><ul><li>对常用结果进行缓存；命中缓存则不需要进行下一步操作。</li><li>解析sql语句之后进行语法树的优化：尝试预测不同方案的查询代价，选择代价最小的那一个查询计划。</li></ul><h4 id="表设计："><a href="#表设计：" class="headerlink" title="表设计："></a>表设计：</h4><ul><li>数据类型优化，单张表的属性少一点之类的，不要用枚举什么的；固定字段长度比可变字段长度效率高。</li><li>建立索引，提高搜索效率</li></ul><h4 id="写查询语句："><a href="#写查询语句：" class="headerlink" title="写查询语句："></a>写查询语句：</h4><ul><li>写的时候估算一下？</li><li>有索引的时候尽量使用</li><li>避免<code>select *</code>，用到什么就取什么</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li>使用B树或者B+树实现，指向记录的物理地址的位置。<ul><li>两种树的区别：<ul><li>B树是二叉树的直接变体，节点存数据指针和下一层的指针；</li><li>B+树的非叶子结点不存数据指针，所以每个节点能够存放的指针更多，更扁平</li></ul></li><li>优缺点：<ul><li>B+树查询速度稳定，因为都要查到叶子结点；</li><li>B+树更方便排序，因为叶子结点是链表串；</li><li>使用B+树做全表遍历更快，因为只涉及最后一层（当然，有索引你还全表遍历，不是直接遍历表就可以了嘛——除非有排序的需求）；</li><li>如果访问数据离根节点快，那么B树更好。</li></ul></li></ul></li><li>通常把节点加载到内存之后，根据查找得到的位置去访问物理空间。</li><li>between范围查询、like的右模糊查询会使用索引，而两侧模糊查询不会</li></ul><h4 id="建立索引原则"><a href="#建立索引原则" class="headerlink" title="建立索引原则"></a>建立索引原则</h4><ul><li>尽量选择主键这种区分度高的字段建立索引</li><li>需要经常范围搜索或者排序的位置，则建立索引</li><li>修改次数远大于检索次数的时候，建索引不好</li><li>如果使用的是多键索引，进行从左到右的匹配，“最左匹配特性”</li></ul><h4 id="索引的坏处"><a href="#索引的坏处" class="headerlink" title="索引的坏处"></a>索引的坏处</h4><ul><li>建立索引的时候内存开销大，容易宕机</li><li>物理空间占用较大，应该适当删除</li><li>修改数据的时候需要较高的维护成本</li></ul><h4 id="有了索引但是查询并不变快的场景"><a href="#有了索引但是查询并不变快的场景" class="headerlink" title="有了索引但是查询并不变快的场景"></a>有了索引但是查询并不变快的场景</h4><p>可能没有走索引。当数据库评估代价的时候，索引并不能帮助提高效率（索引基数较低的情况等等），那它还不如直接遍历全表。</p><h4 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h4><h5 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h5><ul><li>在mysql建立联合索引时会遵循最左前缀匹配的原则，即最左优先，在检索数据时从联合索引的最左边开始匹配，示例：对列col1、列col2和列col3建一个联合索引<code>(col1, col2)</code>，对查询语句会按照索引的顺序来检查，首先看<code>col1</code>的限制条件，再看<code>col2</code>。</li><li><p>所以在写查询的时候不必在意列的查询顺序。比如，<code>where col1 = &#39;1&#39; and col2 = &#39;2&#39;</code>和<code>where col2 = &#39;2&#39; and col1 = &#39;1&#39;</code>这两个查询语句都会用到索引(col1,col2)，mysql创建联合索引的规则是首先会对联合合索引的最左边的，也就是第一个字段col1的数据进行排序，在第一个字段的排序基础上，然后再对后面第二个字段col2进行排序。其实就相当于实现了类似 order by col1 col2这样一种排序规则。</p></li><li><p>借助mysql查询优化器explain，explain会纠正sql语句该以什么样的顺序执行效率最高，最后才生成真正的执行计划。</p><ul><li><p>具体：<code>EXPLAIN SELECT * FROM test WHERE col2=2\G</code>（\G是为了以列的形式显示出来，不然行来看的话会很长，展不开）</p></li><li><p>例如，我在自己之前用来做你画我猜的数据库测试了一下：</p></li><li><pre class="line-numbers language-mysql"><code class="language-mysql">mysql> explain select * from topics\G*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: topics   partitions: NULL         type: ALLpossible_keys: NULL          key: NULL      key_len: NULL          ref: NULL         rows: 1     filtered: 100.00        Extra: NULL1 row in set, 1 warning (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>type字段：ALL全表扫描,通常是不好的，其他的如index、range、const、ref、system则是较好的。</p></li><li><p>possible_keys：可能被用到的索引。</p></li><li><p>key_len：索引基数，也就是不同的键值一共有几种。</p><ul><li><blockquote><p>索引的基数相对于数据表行数较高（也就是说，列中包含很多不同的值，重复的值很少）的时候，它的工作效果最好。如果某数据列含有很多不同的年龄，索引会很快地分辨数据行。如果某个数据列用于记录性别（只有”M”和”F”两种值），那么索引的用处就不大。如果值出现的几率几乎相等，那么无论搜索哪个值都可能得到一半的数据行。在这些情况下，最好根本不要使用索引，因为查询优化器发现某个值出现在表的数据行中的百分比很高的时候，它一般会忽略索引，进行全表扫描。惯用的百分比界线是”30%”。（匹配的数据量超过一定限制的时候查询器会放弃使用索引。尽量不使用会导致索引失效的条件，比如in，用exists子查询代替，或者in的条件少时可以用union all来代替）。</p></blockquote></li></ul></li><li><p>key：按照现在的语句，实际搜索用到的索引，如果是NULL表示没有用到索引。</p></li><li><p>rows：估计要扫描的行数。</p></li></ul></li></ul><h5 id="为什么要使用联合索引？"><a href="#为什么要使用联合索引？" class="headerlink" title="为什么要使用联合索引？"></a>为什么要使用联合索引？</h5><ul><li>减少开销。建一个联合索引(col1,col2,col3)，实际相当于建了(col1),(col1,col2),(col1,col2,col3)三个索引。每多一个索引，都会增加写操作的开销和磁盘空间的开销。对于大量数据的表，使用联合索引会大大的减少开销！</li><li>覆盖索引。对联合索引(col1,col2,col3)，如果有如下的sql: select col1,col2,col3 from test where col1=1 and col2=2。那么MySQL可以直接通过遍历索引取得数据，而无需回表，这减少了很多的随机io操作。减少io操作，特别的随机io其实是dba主要的优化策略。所以，在真正的实际应用中，覆盖索引是主要的提升性能的优化手段之一。</li><li>效率高。索引列越多，通过索引筛选出的数据越少。有1000W条数据的表，有如下sql:select <em>from table where col1=1 and col2=2 and col3=3,假设假设每个条件可以筛选出10%的数据，如果只有单值索引，那么通过该索引能筛选出1000W</em>10%=100w条数据，然后再回表从100w条数据中找到符合col2=2 and col3= 3的数据，然后再排序，再分页；如果是联合索引，通过索引筛选出1000w<em>10%</em> 10% *10%=1w，效率提升可想而知！</li></ul><h3 id="其他散的知识点"><a href="#其他散的知识点" class="headerlink" title="其他散的知识点"></a>其他散的知识点</h3><h4 id="悲观锁和乐观锁"><a href="#悲观锁和乐观锁" class="headerlink" title="悲观锁和乐观锁"></a>悲观锁和乐观锁</h4><p>乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。</p><p>乐观锁用于多读——冲突较少，悲观锁用于多写——冲突较多。</p><ul><li>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作<ul><li>synchronized的底层实现主要依靠 <strong>Lock-Free</strong> 的队列，基本思路是 <strong>自旋后阻塞</strong>，<strong>竞争切换后继续竞争锁</strong>，<strong>稍微牺牲了公平性，但获得了高吞吐量</strong>。在线程冲突较少的情况下，可以获得和CAS类似的性能；而线程冲突严重的情况下，性能远高于CAS。</li></ul></li><li>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性<ul><li>CAS（将比较并修改值作为原子过程，无锁编程，自旋操作），缺点在于值一样的时候无法检查是否有更新过；自旋机制反复比较开销大。适用于较轻、竞争少的情况。</li><li>版本号机制（提交时比较读时版本号与当前版本号区别，提交版本号必须比记录版本号大才允许更新）</li></ul></li></ul><h4 id="drop、delete与truncate分别在什么场景之下使用？"><a href="#drop、delete与truncate分别在什么场景之下使用？" class="headerlink" title="drop、delete与truncate分别在什么场景之下使用？"></a><strong>drop、delete</strong>与<strong>truncate</strong>分别在什么场景之下使用？</h4><ul><li>不再需要一张表的时候，用<strong>drop</strong></li><li>想删除部分数据行时候，用<strong>delete</strong>，并且带上where子句</li><li>保留表而删除所有数据的时候用<strong>truncate</strong></li></ul><h4 id="什么是视图？以及视图的使用场景有哪些？"><a href="#什么是视图？以及视图的使用场景有哪些？" class="headerlink" title="什么是视图？以及视图的使用场景有哪些？"></a>什么是视图？以及视图的使用场景有哪些？</h4><p>视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，试图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询。</p><ul><li>只暴露部分字段给访问者，所以就建一个虚表，就是视图。</li><li>查询的数据来源于不同的表，而查询者希望以统一的方式查询，这样也可以建立一个视图，把多个表查询结果联合起来，查询者只需要直接从视图中获取数据，不必考虑数据来源于不同表所带来的差异</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据库管理系统原则——ACID&quot;&gt;&lt;a href=&quot;#数据库管理系统原则——ACID&quot; class=&quot;headerlink&quot; title=&quot;数据库管理系统原则——ACID&quot;&gt;&lt;/a&gt;数据库管理系统原则——ACID&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;ACID&lt;/stro
      
    
    </summary>
    
      <category term="interview" scheme="http://riroaki.github.io/categories/interview/"/>
    
    
      <category term="database" scheme="http://riroaki.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>NLP学习日记2——Skip-Gram模型</title>
    <link href="http://riroaki.github.io/NLP-2-Skip-Gram/"/>
    <id>http://riroaki.github.io/NLP-2-Skip-Gram/</id>
    <published>2019-04-19T13:20:59.000Z</published>
    <updated>2019-04-24T03:19:23.535Z</updated>
    
    <content type="html"><![CDATA[<p>在第一篇日记中提到的<code>Skip-gram</code>模型，它来自<code>word2vec</code>模型，这里补充它的说明。</p><h3 id="前置概念介绍"><a href="#前置概念介绍" class="headerlink" title="前置概念介绍"></a>前置概念介绍</h3><h4 id="词向量"><a href="#词向量" class="headerlink" title="词向量"></a>词向量</h4><p>考虑一下这件事：有些单词之间长得很像，意思和用法也很像；有些单词长得不像，但是意思差不多，比如dog和puppy，kitty和cat，或者说存在比较强的联系。</p><p>另外我们需要表示两个单词的距离，比如上文的dog和puppy之间的关系，cat和kitty的关系其实是一致的——一个是狗和小狗，另一个是猫和小猫。可以说他们彼此的距离是差不多的。但是这样的概念对于非结构化的文本来说，要怎么表示？</p><p>这个时候就需要词向量。我们知道，两个向量之间的距离是可以用公式求出来的（欧式距离、切比雪夫距离、曼哈顿距离等等）。假如每个单词使用一定的特征，如词性、词义等等表示，然后向量之间的距离就能够表示单词之间“语义”的差距的话，岂不是美滋滋？</p><h4 id="Word2Vec"><a href="#Word2Vec" class="headerlink" title="Word2Vec"></a>Word2Vec</h4><p>这个模型是谷歌搞出来训练词向量的模型集合。主要包括有两种模型：</p><ul><li><p>Skip-Gram模型主要用于给定input词语，预测上下文词语。</p></li><li><p>CBOW模型主要用于给定上下文填空。哈哈做出一个完形填空的算法，从此英语高考再也不用担心啦！</p></li></ul><p>⚠️需要注意的是，因为我们的目的在于获得词向量，所以最终得到的结果并不是这个用于输出的模型，而是这整个语料库的词向量表。另外我们确实无法通过这个模型准确预测下一个单词是什么：（，它只不过是用来获得词向量的手段。</p><h4 id="one-hot编码"><a href="#one-hot编码" class="headerlink" title="one-hot编码"></a>one-hot编码</h4><p>算法需要结构化的数值而非一个字符串。所以我们把单词通过one-hot编码转化为一个初始向量。</p><p>具体来说非常简单粗暴：</p><p>比如，基于“The dog barked at the mailman”可以构建一个大小为5的词汇表（忽略大小写和标点符号）：(“the”, “dog”, “barked”, “at”, “mailman”)，我们对这个词汇表的单词进行编号0-4。那么”dog“就可以被表示为一个5维向量[0, 1, 0, 0, 0]。</p><h3 id="Skip-Gram"><a href="#Skip-Gram" class="headerlink" title="Skip-Gram"></a>Skip-Gram</h3><p>终于到今天的正文部分了。</p><p>为了训练，我们需要把单词和它的上下文单词联系起来。</p><ul><li>我们设定两个参数，<code>skip_window</code>表示窗口大小，即从单词左侧和右侧分别取一定的个数个单词；<code>num_skips</code>表示选取几个单词作为输出。</li><li>比如：对一句话”<strong>The dog barked at the mailman</strong>“。在这个例子中，如果两个参数都是2，那么用于训练的是两组数据：<strong>(‘dog’, ‘barked’)，(‘dog’, ‘the’)</strong>。</li><li>下图是另一个例子，<code>skip_window=2,num_skips=2</code>：</li></ul><p><img src="/NLP-2-Skip-Gram/skip_gram.png" alt></p><h4 id="模型细节"><a href="#模型细节" class="headerlink" title="模型细节"></a>模型细节</h4><p>首先贴出模型的结构图：</p><p><img src="/NLP-2-Skip-Gram/skip-gram1.png" alt></p><p>假设语料库的单词集合大小为n。</p><p>首先，模型的输入就是一个<code>one-hot</code>编码后的单词，是一个n维的向量。</p><p>然后，模型的输出可以使用一个n维的向量表示单词表的概率分布。当然，为了保证最后所有单词概率和为1，我们需要加一层<code>softmax</code>函数，把结果指数归一化。</p><p>需要关注的是中间的hidden layer。</p><p>我们可以把隐层理解成一个巨大的矩阵，里面有每个单词和它在各个特征的值，使用某个单词对应的one-hot矩阵与它相乘就会得到这个单词的嵌入向量。</p><p><img src="/NLP-2-Skip-Gram/lookuptable.png" alt></p><p>所以我们需要求出的就是一个矩阵——这个隐层网络本身就是一个n*m维的矩阵（m是单词个数，n是特征维度）</p><p>接下来经过归一化，可以得到和所需要的单词最接近的单词。</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>这样我们能够得出结论：如果两个不同的单词有着非常相似的上下文，那么通过模型训练，这两个单词的嵌入向量将非常相似。</p><p>对于这样一个矩阵来说，n*m个参数的训练的非常低效和麻烦的。</p><blockquote><p>Word2Vec的作者在它的第二篇论文中强调了这些问题，下面是作者在第二篇论文中的三个创新：</p><ol><li>将常见的单词组合（word pairs）或者词组作为单个“words”来处理。</li><li>对高频次单词进行抽样来减少训练样本的个数。</li><li>对优化目标采用“negative sampling”方法，这样每个训练样本的训练只会更新一小部分的模型权重，从而降低计算负担。</li></ol><p>事实证明，对常用词抽样并且对优化目标采用“negative sampling”不仅降低了训练过程中的计算负担，还提高了训练的词向量的质量。</p></blockquote><p>那么按照这一思路，我们需要：</p><h4 id="对高频词进行抽样"><a href="#对高频词进行抽样" class="headerlink" title="对高频词进行抽样"></a>对高频词进行抽样</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在第一篇日记中提到的&lt;code&gt;Skip-gram&lt;/code&gt;模型，它来自&lt;code&gt;word2vec&lt;/code&gt;模型，这里补充它的说明。&lt;/p&gt;
&lt;h3 id=&quot;前置概念介绍&quot;&gt;&lt;a href=&quot;#前置概念介绍&quot; class=&quot;headerlink&quot; title=&quot;前
      
    
    </summary>
    
      <category term="machine learning" scheme="http://riroaki.github.io/categories/machine-learning/"/>
    
    
      <category term="NLP" scheme="http://riroaki.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>41.Trapping Rain Water</title>
    <link href="http://riroaki.github.io/42-Trapping-Rain-Water/"/>
    <id>http://riroaki.github.io/42-Trapping-Rain-Water/</id>
    <published>2019-04-19T12:14:13.000Z</published>
    <updated>2019-04-19T12:17:16.567Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given <em>n</em> non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p><p><img src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png" alt><br>The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. <strong>Thanks Marcos</strong> for contributing this image!</p><a id="more"></a><p><strong>Example:</strong></p><pre><code>Input: [0,1,0,2,1,0,1,3,2,1,2,1]Output: 6</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>待补充。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given &lt;em&gt;n&lt;/em&gt; non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png&quot; alt&gt;&lt;br&gt;The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. &lt;strong&gt;Thanks Marcos&lt;/strong&gt; for contributing this image!&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://riroaki.github.io/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://riroaki.github.io/tags/array/"/>
    
      <category term="hard" scheme="http://riroaki.github.io/tags/hard/"/>
    
  </entry>
  
  <entry>
    <title>软件架构扫盲</title>
    <link href="http://riroaki.github.io/Software-architecture/"/>
    <id>http://riroaki.github.io/Software-architecture/</id>
    <published>2019-04-18T07:24:32.000Z</published>
    <updated>2019-04-22T02:48:12.837Z</updated>
    
    <content type="html"><![CDATA[<p>面试被问到对架构的理解。老实说，我对这一块本来没有深入思考过。</p><p>之前常常集中精力在一些具体理论或者工具上，对架构这一块的了解仅限于感性意识——即，我知道有这样的理论和结构，但是无法清晰地描述它。</p><p>所以借此机会，在网上找了一些资料，了解了一下现代主流的软件架构。</p><p>本文主要基于O’Relly出版的一本介绍软件架构的<a href="https://www.oreilly.com/programming/free/files/software-architecture-patterns.pdf">免费小册子</a>。</p><a id="more"></a><p>在介绍架构之前，首先引入评价架构的指标：</p><h3 id="架构评价指标"><a href="#架构评价指标" class="headerlink" title="架构评价指标"></a>架构评价指标</h3><ul><li>是否易于部署</li><li>是否易于拓展和修改功能</li><li>是否易于测试</li><li>是否易于伸缩</li><li>是否易于开发</li></ul><p>下面介绍5种架构，并且会针对这些指标，给出关于这些架构的评价。</p><h3 id="分层架构LA"><a href="#分层架构LA" class="headerlink" title="分层架构LA"></a>分层架构LA</h3><p>这是最常见的软件架构，常见分层为4层：展示层，业务层，持久层，和数据库层。</p><p>每一层之间通过接口相连接。比如，用户访问网页并登陆，经过登陆逻辑，继续往下验证输入的用户名和密码，在数据库层获取数据后在后台验证，返回验证结果并显示在前端界面。用户请求将会被每一层处理。</p><p><img src="/Software-architecture/layer.jpg" alt></p><p>这个结构的特性很好理解，就如神经网络每一层之间的关系，上一层的输出被当作下一层的输入。缺陷也是显而易见的：耦合度比较高，层与层之间必须接口一致（像神经网络，的层间的输入输出维度必须一致）。</p><p>有些分层模型会适当地开放一些层，使得层与层之间可以跨越式访问，但是这样做会让层次之间联系变得更为复杂，提高了耦合度。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>每层可以单独测试，因为有完整的接口。</li><li>分工简单，因为每个团队（个人）只需要做和他关系最大的那一块就可以。主流的”前端”、”后端”都是根据层来划分技术人员的。</li><li>开发比较容易，只需要面向接口编程就可以了。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>性能比较差。每个用户请求都需要穿越所有的层。</li><li>维护困难。当我修改数据库层或者展现层的时候，就意味着可能上一层或者下一层需要变动，而发生变动的时候需要将服务停止运行。过高的耦合度使得软件变得牵一发而动全身。</li><li>拓展性不好。同上一点，需要添加或者删减一个功能的时候，都会带来所有层的影响。</li><li>部署不灵活。因为分层架构缺一不可，需要完整地部署整个项目，确保每个层都完成部署才能上线。</li></ul><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>常见的网页开发（如普通的课程项目<em>图书管理系统</em>）=前端+后端+数据库。</p><h3 id="事件驱动架构EDA"><a href="#事件驱动架构EDA" class="headerlink" title="事件驱动架构EDA"></a>事件驱动架构EDA</h3><p>高度解耦合的架构，适应性很高。包括中介拓扑结构和代理拓扑结构。</p><h4 id="中介拓扑结构Mediator"><a href="#中介拓扑结构Mediator" class="headerlink" title="中介拓扑结构Mediator"></a>中介拓扑结构Mediator</h4><p>处理事件主要包含的环节：</p><ul><li>事件队列Event Queue：所有事件发生之后会进入队列。队列可以有多个。</li><li>事件调停器Event Mediator：调停器通过拓扑排序等手段确定事件的执行顺序并进行处理（以及并行or串行）</li><li>事件管道Event Channel：调停器运输经过处理后的事件到处理器的路径</li><li>事件处理器Event Processor：事件的终点，负责响应事件。负责独立运作，完成单一的工作。</li></ul><p>⚠️注意，事件处理器收到的事件和在消息队列的事件不是同一个概念。它们有关联，但是后者是调停器生成的，和初始事件不完全一样。</p><p>以搬家举例，搬家是初始事件，当调停器通过事件队列收到事件之后，将其分解为多个子事件（搬家当然有很多事情需要做，比如联系方式、通知保险公司等等）。</p><p>此时，这些新的子事件就会被分配到相应的处理器进行响应。</p><p><img src="/Software-architecture/2-2.png" alt></p><h4 id="代理拓扑结构Broker"><a href="#代理拓扑结构Broker" class="headerlink" title="代理拓扑结构Broker"></a>代理拓扑结构Broker</h4><p>在代理拓扑结构中，核心的调停器被去除，而是由事件处理器代为转发给下一个事件处理器（如同接力赛跑）。如果这一块不是分内之事，就不操作，转发就可以。</p><p>这一个架构的场景是需要处理的事件逻辑都比较简单，没有很复杂的依赖关系（这是我的理解）。</p><p>由于没有中间的过程，效率会高一些。相当于把分解过程由处理器代劳了，有点去中心化的味道。</p><p>还是以搬家的事件为例说明：</p><p><img src="/Software-architecture/2-4.png" alt></p><h4 id="另一种架构：Proxy"><a href="#另一种架构：Proxy" class="headerlink" title="另一种架构：Proxy"></a>另一种架构：Proxy</h4><p>这一个说实话我本来没注意到，以为是和代理broker差不多（毕竟proxy也是代理的意思）。</p><p>看到描述，引用在这里。暂时看不明白。<a href="https://github.com/hehonghui/android-tech-frontier/blob/master/software-architecture-patterns/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F.md#appendix">出处</a></p><blockquote><ul><li>如果我们使用 proxy，那就意味着我自己对需要处理的事件进行了分解，然后把不同的子事件一一委托给不同的 proxy，由被委托的 proxy 帮我完成子事件，从而完成我要做的事件。</li></ul></blockquote><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>便于部署。因为每个处理器是独立的，可以单独部署。当然，如果使用的是中介拓扑结构，那会稍微麻烦一些——修改处理器的同时需要同时修改中介，即调度器。</li><li>性能高。异步处理事件（交付后不必等待其完成处理即可返回），相当于并行操作，提高效率。</li><li>可拓展性强。相比层级结构，易于添加功能。</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>实现比较复杂。事件是异步分发处理的。</li><li>难以测试。主要来自其异步的特点。</li></ul><blockquote><p>使用事件驱动架构模式最困难的地方就在于架构的创建、维护、以及对事件处理器的管理。通常每一个事件都拥有其指定的事件处理协议（例如：传递给事件处理器的数据类型、数据格式），这就使得设下标准的数据格式成为使用事件驱动架构模式中至关重要的一环（例如：XML，JSON，Java 对象，等等……），并在架构创建之初就为这些数据格式授权，以便处理。</p></blockquote><h3 id="微核架构MKA"><a href="#微核架构MKA" class="headerlink" title="微核架构MKA"></a>微核架构MKA</h3><p>看到这个就想起操作系统的位内核架构，其实两个差不多——不如说微内核的操作系统也属于一种微核架构的实践？hhh。</p><p>如同微内核操作系统的结构，内核部分只需要提供一个最基本功能的实现即可；而需要什么功能，做相应插件就能够实现。原则上插件相互独立，不应过于依赖彼此，通信也应该少一些。</p><p><img src="/Software-architecture/microKernal.png" alt></p><blockquote><p>微内核架构是可以被嵌入到其他架构（如层级架构）中间的。</p></blockquote><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul><li>功能拓展性好，需要什么功能开发插件就可以。</li><li>部署较方便，同样是因为插件的特性，可以独立加载或者卸载。</li><li>可定制性高，需要什么就加什么。</li><li>可以渐进式开发。</li></ul><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul><li>内核系统难以做成分布式，只能以独立单元存在。</li><li>开发难度较高。需要设计插件的注册机制，插件与内核通信等等（其实应该是因为这一个领域做的不多？）。</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>说到插件，就自然联想到常见的各种IDE、浏览器了。</p><h3 id="微服务架构MSA"><a href="#微服务架构MSA" class="headerlink" title="微服务架构MSA"></a>微服务架构MSA</h3><p>这一个架构是从SOA（面向服务的架构）发展而来的——SOA也是一种架构，和微服务架构大体相似，也是将功能独立成各种单元，通过良好的接口定义连接起来。与原先的宏模式相比，强调了松耦合和组件化的特征。</p><p>微服务架构将应用的服务分解成不同模块，以管道和用户界面通信。微服务架构模式的另一个关键概念是它是一个<em>分布式</em>的架构，所以所有组件之间是完全解耦的，用户界面层通过某种远程访问协议（如，JMS, AMQP, REST, SOAP, RMI等）进行访问。</p><p>REST、SOAP比较常见，在这里简单介绍一下：</p><ul><li>REST是基于http+json格式传输信息的协议。</li><li>SOAP是基于http+XML格式传输信息的协议。</li></ul><p><img src="/Software-architecture/4-1.png" alt></p><h4 id="模式的拓扑结构"><a href="#模式的拓扑结构" class="headerlink" title="模式的拓扑结构"></a>模式的拓扑结构</h4><ol><li>基于REST的API拓扑，使用者多为网站，采用粒度非常小的服务分解，每一个小的服务对应一个极小的API。</li><li>基于REST的拓扑，类似上一类，但是将多个REST的API结构进行整合成一个大的REST服务组件。</li><li>集中式拓扑，采用一个代理层分析请求并实现操作。主要是用在控制逻辑比较复杂的场合。</li></ol><p>⚠️注意，使用REST的时候需要合理划分粒度和服务，减少耦合依赖和重复。</p><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ul><li>易于部署。由于服务比较独立，一般采用分布式组件，可以单独部署。由于改变某个组件被隔离，所以避免了月末的爆炸性增长部署工作。</li><li>易于测试。由于服务独立，所以可以分开测试。</li><li>伸缩性好，也就是可以适应不同规模。</li><li>易于开发，因为单个组件功能简单且不会互相影响，所以协调工作减少。</li></ul><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><ul><li>性能较低。分布式特性不适合高性能要求的程序。</li></ul><h3 id="基于空间的架构——云架构SBA"><a href="#基于空间的架构——云架构SBA" class="headerlink" title="基于空间的架构——云架构SBA"></a>基于空间的架构——云架构SBA</h3><blockquote><p>大多数基于网站的商务应用都遵循相同的请求流程：一个请求从浏览器发到web服务器，然后到应用服务器，然后到数据库服务器。虽然这个模式在用户数不大的时候工作良好，但随着用户负载的增加,瓶颈会开始出现，首先出现在web服务器层，然后应用服务器层，最后数据库服务器层。</p><p>通常的解决办法就是<strong>向外扩展</strong>，也就是增加web服务器数量。这个方法相对来说简单和廉价，并能够解决问题。然而扩展应用服务器会更复杂，而且成本更高，并且又只是把问题移动到了数据库服务器，那会更复杂，更贵。</p><p>就算你能扩展数据库服务器，你最终会陷入一个金字塔式的情形，在金字塔最下面是web服务器，它会出现最多的问题，但也最好伸缩。金字塔顶部是数据库服务器，问题不多，但最难伸缩。</p></blockquote><p>从上述描述看来，高并发系统需要解决的主要问题在于数据库服务器较差的伸缩性。</p><p>基于空间的架构模型是专门为了<strong>解决伸缩性和并发问题</strong>而设计的。它对于用户数量不可预测且数量级经常变化的情况同样适用。在架构级别来解决这个伸缩性问题通常是比增加服务器数量或者提高缓存技术更好的解决办法。</p><p>主要包括处理单元和虚拟中间件。</p><p>说实话，从这里开始我已经看不懂了。先贴图，日后看懂了再解释吧……</p><ul><li>处理单元</li><li>虚拟中间件<ul><li><strong>消息中间件</strong>（Messaging Grid）：管理用户请求和session，当一个请求进来以后，决定分配给哪一个处理单元。</li><li><strong>数据中间件</strong>（Data Grid）：将数据复制到每一个处理单元，即数据同步。保证某个处理单元都得到同样的数据。</li><li><strong>处理中间件</strong>（Processing Grid）：可选，如果一个请求涉及不同类型的处理单元，该中间件负责协调处理单元</li><li><strong>部署中间件</strong>（Deployment Manager）：负责处理单元的启动和关闭，监控负载和响应时间，当负载增加，就新启动处理单元，负载减少，就关闭处理单元。</li></ul></li></ul><p><img src="/Software-architecture/5-1.png" alt></p><h3 id="一图流总结"><a href="#一图流总结" class="headerlink" title="一图流总结"></a>一图流总结</h3><p>把所有5种架构的6个维度的特征用图表概括，就是这样：</p><p><img src="/Software-architecture/a-1.png" alt></p><p>联系其定义，这些特征也比较好理解。</p><p>当然，纸上得来终觉浅，架构的理论没有具体实践经验的支撑，难以深入理解。</p><p>这一篇就属于扫盲文章了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面试被问到对架构的理解。老实说，我对这一块本来没有深入思考过。&lt;/p&gt;
&lt;p&gt;之前常常集中精力在一些具体理论或者工具上，对架构这一块的了解仅限于感性意识——即，我知道有这样的理论和结构，但是无法清晰地描述它。&lt;/p&gt;
&lt;p&gt;所以借此机会，在网上找了一些资料，了解了一下现代主流的软件架构。&lt;/p&gt;
&lt;p&gt;本文主要基于O’Relly出版的一本介绍软件架构的&lt;a href=&quot;https://www.oreilly.com/programming/free/files/software-architecture-patterns.pdf&quot;&gt;免费小册子&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="interview" scheme="http://riroaki.github.io/categories/interview/"/>
    
    
      <category term="software theory" scheme="http://riroaki.github.io/tags/software-theory/"/>
    
  </entry>
  
  <entry>
    <title>LuckyMoney——红包分配算法</title>
    <link href="http://riroaki.github.io/LuckyMoney/"/>
    <id>http://riroaki.github.io/LuckyMoney/</id>
    <published>2019-04-17T19:24:25.000Z</published>
    <updated>2019-04-18T12:58:26.608Z</updated>
    
    <content type="html"><![CDATA[<p>面试被问到这题，记录一下思路～从一开始的复杂算法到后面的简化和优化过程。</p><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul><li>保证每人有一个金额下限（0.01），以及一个金额上限（占总金额的比重不能超过90%）</li><li>保证结果有2位小数（精确到分），需要考虑浮点数计算误差。</li></ul><a id="more"></a><h3 id="初步思路"><a href="#初步思路" class="headerlink" title="初步思路"></a>初步思路</h3><ol><li>分割法：每次把最大的红包分割成两个小的，进行<code>n-1</code>次操作。<ul><li>注意随机的上界和下界；最后顺序还要shuffle。</li><li>时间复杂度：O(nlogn)​，代码也长，逻辑比较复杂+可读性差。</li></ul></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LuckyMoney</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> min <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">,</span> maxRate <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">distribute</span><span class="token punctuation">(</span><span class="token keyword">double</span> total<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Corner case: cases with 1 people, or invalid cases.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> total <span class="token operator">&lt;=</span> min <span class="token operator">*</span> n <span class="token operator">||</span> maxRate <span class="token operator">*</span> n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>total<span class="token punctuation">}</span><span class="token punctuation">;</span>        Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> totalCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>maxRate <span class="token operator">*</span> totalCents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Maximum heap, stores the largest Lucky on the peek.</span>        PriorityQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> money <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o2 <span class="token operator">-</span> o1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Split the max Lucky for n - 1 times.</span>        money<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>totalCents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> maxMoney <span class="token operator">=</span> money<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lowerBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> min <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> totalCents <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> maxCents<span class="token punctuation">)</span><span class="token punctuation">,</span> upperBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>maxCents<span class="token punctuation">,</span> maxMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> curr <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>upperBound <span class="token operator">-</span> lowerBound<span class="token punctuation">)</span> <span class="token operator">+</span> lowerBound<span class="token punctuation">;</span>            money<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span>            money<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>maxMoney <span class="token operator">-</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Shuffle the values.</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmpValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>tmpValues<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Calculate the money.</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmpValues<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100.0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// This part can also be used for all methods below.</span>    <span class="token comment" spellcheck="true">// Check the results.</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token punctuation">,</span> <span class="token keyword">double</span> total<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> null <span class="token operator">||</span> res<span class="token punctuation">.</span>length <span class="token operator">!=</span> n<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            sum <span class="token operator">+=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check sum.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">-</span> total <span class="token operator">&lt;</span> <span class="token number">1e-6</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check each.</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> sum <span class="token operator">>=</span> maxRate <span class="token operator">||</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// test 100.00</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> test <span class="token operator">=</span> <span class="token function">distribute</span><span class="token punctuation">(</span><span class="token number">100.00</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">validate</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">100.00</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>直接随机求每次的值，定好每次上界和下界即可。<ul><li>结果上看，存在前面分钱多，后面分钱少的问题。可以考虑使用shuffle；</li><li>另外，由于使用的是平均分布的随机函数，所以导致大或者小红包出现概率比较大，比较”不公平”。</li><li>时间复杂度：O(n)</li></ul></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LuckyMoney</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> min <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">,</span> maxRate <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">distribute</span><span class="token punctuation">(</span><span class="token keyword">double</span> total<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> remainCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> minCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>min <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>maxRate <span class="token operator">*</span> remainCents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> lowerBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>minCents<span class="token punctuation">,</span> remainCents <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> maxCents<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> upperBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>maxCents<span class="token punctuation">,</span> remainCents <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> minCents<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>upperBound <span class="token operator">-</span> lowerBound<span class="token punctuation">)</span> <span class="token operator">+</span> lowerBound<span class="token punctuation">;</span>            remainCents <span class="token operator">-=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调整思路"><a href="#调整思路" class="headerlink" title="调整思路"></a>调整思路</h3><p>在上面的实现过程中，我遇到了两个问题：</p><ol><li>大小红包出现概率过大，导致不公平；</li><li>前面红包普遍比后面红包大，不够随机。</li></ol><p>经过一些资料查阅，看到一些针对微信红包的测试实验结果：</p><ul><li>在比较靠后抽取的红包金额方差较大，其分布接近指数，容易抽到手气最佳；</li><li>在比较靠前抽取的红包方差较小，平均值差不多。</li></ul><p>此外，我了解到使用正态分布可以使大家的金额数接近平均值，使得大红包和小红包都不容易出现。</p><p>有一些文章推测，微信红包使用的是截尾正态分布算法，即保留部分正态分布图像在指定区间，而区间以外的概率密度为0；当然，为保证所需区间概率密度和为1，需要拔高整体图像，这在公式上通过乘一个系数得到。</p><p>经过一番思考后写下的代码：</p><ol><li>调整平均分布为截尾正态分布，每个人获得的是以当前余额的平均为均值，并明确上下限的截尾正态分布随机获得的值。<ul><li>结果较好，避免了红包金额不公和前后分布不均问题。</li><li>截尾正态分布实现比较粗暴（如果随机结果不在里面就舍弃重来）。</li><li>在正态分布参数的选择上，直接以均值作为方差的开方，不知是否有更好的参数？</li></ul></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LuckyMoney</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> min <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">,</span> maxRate <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">distribute</span><span class="token punctuation">(</span><span class="token keyword">double</span> total<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> remainCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> minCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>min <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>maxRate <span class="token operator">*</span> remainCents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> lowerBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>minCents<span class="token punctuation">,</span> remainCents <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> maxCents<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> upperBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>maxCents<span class="token punctuation">,</span> remainCents <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> minCents<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mean <span class="token operator">=</span> remainCents <span class="token operator">/</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">truncatedNorm</span><span class="token punctuation">(</span>mean<span class="token punctuation">,</span> mean<span class="token punctuation">,</span> lowerBound<span class="token punctuation">,</span> upperBound<span class="token punctuation">)</span><span class="token punctuation">;</span>            remainCents <span class="token operator">-=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// A naive implementation of truncated normal distribution.</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">truncatedNorm</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> sqrtv<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lo <span class="token operator">==</span> hi<span class="token punctuation">)</span>            <span class="token keyword">return</span> lo<span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token punctuation">;</span>        Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">nextGaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> sqrtv<span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> lo <span class="token operator">||</span> res <span class="token operator">></span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>修改成实时分配（用性能换空间）</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LuckyMoney</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> min <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">,</span> maxRate <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Index = 1, 2, 3, ..., n</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">nextMoney</span><span class="token punctuation">(</span><span class="token keyword">double</span> remain<span class="token punctuation">,</span> <span class="token keyword">double</span> total<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> n<span class="token punctuation">)</span>            <span class="token keyword">return</span> remain<span class="token punctuation">;</span>        <span class="token keyword">int</span> remainCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>remain <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> minCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>min <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>total <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">*</span> maxRate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lowerBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>minCents<span class="token punctuation">,</span> remainCents <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> index<span class="token punctuation">)</span> <span class="token operator">*</span> maxCents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> upperBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>maxCents<span class="token punctuation">,</span> remainCents <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> index<span class="token punctuation">)</span> <span class="token operator">*</span> minCents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mean <span class="token operator">=</span> remainCents <span class="token operator">/</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">truncatedNorm</span><span class="token punctuation">(</span>mean<span class="token punctuation">,</span> mean<span class="token punctuation">,</span> lowerBound<span class="token punctuation">,</span> upperBound<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Truncated normalize distribution function: omitted.</span>    <span class="token comment" spellcheck="true">// main function.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">,</span> remain <span class="token operator">=</span> total<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> curr <span class="token operator">=</span> <span class="token function">nextMoney</span><span class="token punctuation">(</span>remain<span class="token punctuation">,</span> total<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            remain <span class="token operator">-=</span> curr<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>（网传）微信红包算法实现及分析<ul><li>实时分配金额，最小值为0.01，最大值为当前剩余平均值的两倍</li><li>使用红包类，思路清晰；避免了正态计算，时间效率较好。</li><li>当然，这里没有涉及最大红包的数值限制。</li></ul></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getRandomMoney</span><span class="token punctuation">(</span>LeftMoneyPackage _leftMoneyPackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// remainSize 剩余的红包数量</span>    <span class="token comment" spellcheck="true">// remainMoney 剩余的钱</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_leftMoneyPackage<span class="token punctuation">.</span>remainSize <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _leftMoneyPackage<span class="token punctuation">.</span>remainSize<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>_leftMoneyPackage<span class="token punctuation">.</span>remainMoney <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Random r     <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> min   <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">double</span> max   <span class="token operator">=</span> _leftMoneyPackage<span class="token punctuation">.</span>remainMoney <span class="token operator">/</span> _leftMoneyPackage<span class="token punctuation">.</span>remainSize <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> money <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> max<span class="token punctuation">;</span>    money <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>money<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>    money <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>money <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>    _leftMoneyPackage<span class="token punctuation">.</span>remainSize<span class="token operator">--</span><span class="token punctuation">;</span>    _leftMoneyPackage<span class="token punctuation">.</span>remainMoney <span class="token operator">-=</span> money<span class="token punctuation">;</span>    <span class="token keyword">return</span> money<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浮点数精度问题"><a href="#浮点数精度问题" class="headerlink" title="浮点数精度问题"></a>浮点数精度问题</h3><ul><li>使用<code>BigDecimal</code>确保精度，商业运算常规做法。具体用法同<code>BigInteger</code>。</li></ul><h3 id="多人抢红包实例"><a href="#多人抢红包实例" class="headerlink" title="多人抢红包实例"></a>多人抢红包实例</h3><ul><li>注意<code>synchronized</code>关键字的使用。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LuckyMoney</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> totalSize<span class="token punctuation">,</span> remainSize<span class="token punctuation">;</span>    <span class="token keyword">double</span> totalMoney<span class="token punctuation">,</span> remainMoney<span class="token punctuation">,</span> minMoney <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">,</span> maxRate <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">,</span> maxMoney<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LuckyMoney</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">,</span> <span class="token keyword">int</span> people<span class="token punctuation">)</span> <span class="token punctuation">{</span>        totalSize <span class="token operator">=</span> remainSize <span class="token operator">=</span> people<span class="token punctuation">;</span>        totalMoney <span class="token operator">=</span> remainMoney <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>money <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>        maxMoney <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>totalMoney <span class="token operator">*</span> maxRate <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetLuckyMoney</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> LuckyMoney money<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GetLuckyMoney</span><span class="token punctuation">(</span>LuckyMoney _money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        money <span class="token operator">=</span> _money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">++</span>index<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Man "</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">" get "</span> <span class="token operator">+</span> <span class="token function">getMoney</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">getMoney</span><span class="token punctuation">(</span>LuckyMoney money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> res<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>money<span class="token punctuation">.</span>remainSize <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            money<span class="token punctuation">.</span>remainSize<span class="token operator">--</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>money<span class="token punctuation">.</span>remainMoney <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">double</span> lowerBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>money<span class="token punctuation">.</span>minMoney<span class="token punctuation">,</span> money<span class="token punctuation">.</span>remainMoney <span class="token operator">-</span> <span class="token punctuation">(</span>money<span class="token punctuation">.</span>remainSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> money<span class="token punctuation">.</span>maxMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> upperBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>money<span class="token punctuation">.</span>maxMoney<span class="token punctuation">,</span> money<span class="token punctuation">.</span>remainMoney <span class="token operator">-</span> <span class="token punctuation">(</span>money<span class="token punctuation">.</span>remainSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> money<span class="token punctuation">.</span>minMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> mean <span class="token operator">=</span> money<span class="token punctuation">.</span>remainMoney <span class="token operator">/</span> money<span class="token punctuation">.</span>remainSize<span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token function">truncatedNorm</span><span class="token punctuation">(</span>mean<span class="token punctuation">,</span> mean<span class="token punctuation">,</span> lowerBound<span class="token punctuation">,</span> upperBound<span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>res <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>        money<span class="token punctuation">.</span>remainSize<span class="token operator">--</span><span class="token punctuation">;</span>        money<span class="token punctuation">.</span>remainMoney <span class="token operator">-=</span> res<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">truncatedNorm</span><span class="token punctuation">(</span><span class="token keyword">double</span> m<span class="token punctuation">,</span> <span class="token keyword">double</span> sqrtV<span class="token punctuation">,</span> <span class="token keyword">double</span> lo<span class="token punctuation">,</span> <span class="token keyword">double</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lo <span class="token operator">==</span> hi<span class="token punctuation">)</span>            <span class="token keyword">return</span> lo<span class="token punctuation">;</span>        <span class="token keyword">double</span> res<span class="token punctuation">;</span>        Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextGaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> sqrtV <span class="token operator">+</span> m<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> lo <span class="token operator">||</span> res <span class="token operator">></span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LuckyMoney money <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LuckyMoney</span><span class="token punctuation">(</span><span class="token number">100.0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Start to distribute "</span> <span class="token operator">+</span> money<span class="token punctuation">.</span>totalMoney <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> money<span class="token punctuation">.</span>totalSize <span class="token operator">+</span> <span class="token string">" people."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GetLuckyMoney test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetLuckyMoney</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-java"><code class="language-java">Start to distribute <span class="token number">100.0</span> to <span class="token number">10</span> people<span class="token punctuation">.</span>Man <span class="token number">1</span> get <span class="token number">7.58</span>Man <span class="token number">2</span> get <span class="token number">3.19</span>Man <span class="token number">3</span> get <span class="token number">16.73</span>Man <span class="token number">4</span> get <span class="token number">11.79</span>Man <span class="token number">5</span> get <span class="token number">6.53</span>Man <span class="token number">6</span> get <span class="token number">7.53</span>Man <span class="token number">7</span> get <span class="token number">13.45</span>Man <span class="token number">8</span> get <span class="token number">1.92</span>Man <span class="token number">9</span> get <span class="token number">3.62</span>Man <span class="token number">10</span> get <span class="token number">27.66</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于提高代码可读性的建议"><a href="#关于提高代码可读性的建议" class="headerlink" title="关于提高代码可读性的建议"></a>关于提高代码可读性的建议</h3><ul><li>避免一行一注释，减少注释冗余。</li><li>命名方案一致。</li><li>不重复写相同代码。</li><li>避免层数过深的逻辑。</li><li>限制每行长度。</li><li>一致的临时变量命名。比如都用<code>i</code>。</li><li>加入块注释，例如：</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Return a truncated normal distribution N(m, v) between [lo, hi].     * @param m:            mean of normal distribution     * @param sqrtV:    square of variance of normal distribution     * @param lo:            lower bound of truncation     * @param hi:         upper bound of truncation     * @return round value of truncated normal distribution.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">truncatedNorm</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> sqrtV<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lo <span class="token operator">==</span> hi<span class="token punctuation">)</span>            <span class="token keyword">return</span> lo<span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token punctuation">;</span>        Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">nextGaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> sqrtV<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> lo <span class="token operator">||</span> res <span class="token operator">></span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面试被问到这题，记录一下思路～从一开始的复杂算法到后面的简化和优化过程。&lt;/p&gt;
&lt;h3 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;保证每人有一个金额下限（0.01），以及一个金额上限（占总金额的比重不能超过90%）&lt;/li&gt;
&lt;li&gt;保证结果有2位小数（精确到分），需要考虑浮点数计算误差。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="interview" scheme="http://riroaki.github.io/categories/interview/"/>
    
    
      <category term="array" scheme="http://riroaki.github.io/tags/array/"/>
    
      <category term="random" scheme="http://riroaki.github.io/tags/random/"/>
    
  </entry>
  
  <entry>
    <title>19届图森杯划水经历</title>
    <link href="http://riroaki.github.io/19%E5%B1%8A%E5%9B%BE%E6%A3%AE%E6%9D%AF%E5%88%92%E6%B0%B4%E7%BB%8F%E5%8E%86/"/>
    <id>http://riroaki.github.io/19届图森杯划水经历/</id>
    <published>2019-04-14T19:11:54.000Z</published>
    <updated>2019-04-15T17:48:55.791Z</updated>
    
    <content type="html"><![CDATA[<p>⚠️流水账警告⚠️</p><p>因为大三时间比较自由，我和两个关系比较好的同学报了图森杯（acm校赛选拔），然后因为没有准备所以变成了丢人现场……另外两个同学不想去，最后变成我一个人单刷(´･ω･`)喵喵喵？</p><p>不过单刷也有单刷的好处嘛，至少我划水不用有心里负担。体验体验这种感觉也是不错滴。</p><p>于是我愉快地睡过了上午的签到……（其实是前一天<s>打铁</s>只狼太晚了，唉破罐子破摔）好在让一个学长帮忙签到了，除了没有试机以外问题不大。</p><p>于是下午我佛系地到考场，结果还遇到些麻烦——平时刷oj用的都是java，intelliJ美滋滋，但是在这里只有eclipse能用，机房的intellij竟然连java环境都没有配好。想了想写c++还要用dev-c++那种手感，还是拿eclipse凑活。</p><p>（事实证明c++才是刷oj的王道啊）</p><h3 id="以下正式开始做题："><a href="#以下正式开始做题：" class="headerlink" title="以下正式开始做题："></a>以下正式开始做题：</h3><p>我慢悠悠地调试了一会，感觉ok了，于是看了一下提交界面，找了一下最简单的题——怎么看呢，就是提交人数最多的题——然后看了下是题E：portion（<a href="http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5973），嗯没什么好说的，正经签到题，写完就ac。其实我更好奇一些单词的意思，奈何机房的win7没法像mac一样查字典。">http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5973），嗯没什么好说的，正经签到题，写完就ac。其实我更好奇一些单词的意思，奈何机房的win7没法像mac一样查字典。</a></p><p>接下来嘛，继续看大家做什么，我就跟着做什么。接下来的题也没啥意思，甚至很迷：</p><p>J题：Extended Twin Composite Number（<a href="http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5977），讲的是给定整数n，要求两个合数x和y，x+n=y。第一反应，让x=2*n就行了呗，一看x和y范围是1e18，n范围是1e9，这么做应该没问题。半信半疑地提交了，这么简单？？">http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5977），讲的是给定整数n，要求两个合数x和y，x+n=y。第一反应，让x=2*n就行了呗，一看x和y范围是1e18，n范围是1e9，这么做应该没问题。半信半疑地提交了，这么简单？？</a></p><p>结果wa。我就纳闷了，什么？这难道不对嘛？立刻回去找答案看是不是我忽略了什么要求，看了一下sample，难道x要比n小？也没说呀。</p><p>emmm想了一会之后，决定先不管它，去做另一个热度很高的题：</p><p>G题：Postman（<a href="http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5975）。这题讲的是邮差在数轴上走，从邮局（坐标0）出发，到指定n个目的地送信的最短距离。每次最多携带k封信。">http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5975）。这题讲的是邮差在数轴上走，从邮局（坐标0）出发，到指定n个目的地送信的最短距离。每次最多携带k封信。</a></p><p>这题真心不难。看了一下样例就心里有数，首先排序目的地，把正负分开算，然后从每一极向0分割出送信个数为k的区间，算作一次送信（即从绝对值大的一侧往里数k个而不是反过来），每个块最大的距离乘2就是这一个块送信的距离。</p><p>然后最后结果减去最大的那一极的绝对值，因为最后不需要回到邮局所以走到最远的地方就不用回来了，把刚才考虑的来回去掉一半。</p><p>满心欢喜地提交想着这下也差不多算不亏了，结果TLE。(´･ω･`)喵喵喵？</p><p>不会吧？排个序就超时？难道目标算法是线性的？可我看那么多人都过了这题呀……</p><h3 id="可达鸭眉头一皱发现事情并不简单。"><a href="#可达鸭眉头一皱发现事情并不简单。" class="headerlink" title="可达鸭眉头一皱发现事情并不简单。"></a>可达鸭眉头一皱发现事情并不简单。</h3><p>苦思冥想没有线性方案，我开始慌了。周围环境十分吵闹，开场已经一个多小时，我一度有退场的打算——太丢人了，我现在也才一个气球。</p><p>对面的小哥也是单刷，拿到一个气球之后默默地离开了。可能也是来体验一下的吧……</p><p>我又刷新了一下排行榜，没怎么变，做A题的人稍有增加。粗粗一看是二分图匹配，打扰了打扰了。匈牙利算法没背过呀，况且也不知道怎么套求权函数，不然大概要用dp？我只想到dfs+回溯的方法，怕是和八皇后一样复杂。害怕TLE就没做下去……也许这是本场比赛最大的失误吧。</p><p>转了一圈还是想从这两个简单题入手。</p><p>回到J题，我心里想的是可能真的有限制吧，虽然说是1e18但是限制1e9这样子，所以wa了？</p><p>那我不妨优化一下。</p><p>其实，如果n是偶数，那么我只要也取偶数，很容易就能达到目标。所以取x=4，y=n+4。</p><p>那么……奇数？</p><p>奇数不妨凑3的倍数？对三取余，剩下0那我就用6加，剩下1我就用8加，剩下2我就用4加，这样y肯定是三的倍数。</p><p>这样一写一提交，竟然ac了！这个是个振奋的信号，让我恢复精神继续怼G题了。</p><p>这个时候大概两个小时过去了。</p><p>然而，我接下来不管怎么怼G，始终发现：</p><h3 id="它就是没法改进了。"><a href="#它就是没法改进了。" class="headerlink" title="它就是没法改进了。"></a>它就是没法改进了。</h3><p>然而始终是TLE，心态又不好了。这个时候，周围有人的讨论、欢呼，此起彼伏的键盘声，以及换座位的响动，无一不在干扰心神。我佛了。。只好转战其他题目。</p><p>转了半天，发现这个B题：Even Number Theory（<a href="http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5970）还有点思路，于是开始写数字找规律。">http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5970）还有点思路，于是开始写数字找规律。</a></p><p>问题是求偶数n的双阶乘的偶质数分解——偶质数分解是我自己口胡的词，就是一个由2和某奇数相乘的到的数——这样的最大分解有几个。n可达1e1000，看来肯定是数学优化问题，估计有公式。</p><p>双阶乘进行质因数分解，自然就是所有不大于它的偶数的偶质数因子个数相加咯。</p><p>我写了一下，找到初步规律：</p><p>偶数序列：2，4，6，8，10，12，14，16，18，20，22，24，26，28，30，……</p><p>分解个数：1，2，1，3，1，2，1，4，1，2，1，3，1，2，1，……</p><p>我立刻看到一个循环节，12131214……没多想就写了一个简单公式，每16就增加（1+2+1+3+1+2+1+4）个数，而不足16再加单独的和。</p><p>然后因为是1e1000，所以用BigInteger类来操作。幸运的是在code jam早就接触了这个类所以遇到的时候自然而然就想到了。</p><p>一切都看起来很完美，于是提交，wa！</p><p>我有些困惑，于是继续写数字——哇，32对应的不是4而是5诶（16对应的是4，而32=2*16，对所以应5），那就不是循环了。有些挫败的我安慰自己说，没关系反正提交次数不太重要，做出来就可以了。</p><p>于是我开始找规律。结果这个规律还真不明显……循环又不是，但是说它增长有规律我也是不信的。</p><p>干脆采取O(n)递推？可以，但是这么做……你确定不会爆栈？？时间复杂度肯定也会超的吧……</p><p>绝望……</p><p>后来又切了几道，然并卵。</p><p>就这样僵持到了结束也没有A出下一题……</p><h3 id="我好菜呀……"><a href="#我好菜呀……" class="headerlink" title="我好菜呀……"></a>我好菜呀……</h3><p>事后和咕咕的队友讨论了一下，队友拿着逻辑完全一致，但是用cpp写的代码一次就ac了，啥玩意……</p><p>有人说，java读输入要用这个：</p><p><code>Scanner sc = new Scanner (new BufferedInputStream(System.in));</code></p><p>然而当我想起要测试一下的时候，已经out of contest time了，于是TLE变成了永远的谜……</p><p>啥都别说了，我也太菜了……这样下去怎么打code jam呀……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;⚠️流水账警告⚠️&lt;/p&gt;
&lt;p&gt;因为大三时间比较自由，我和两个关系比较好的同学报了图森杯（acm校赛选拔），然后因为没有准备所以变成了丢人现场……另外两个同学不想去，最后变成我一个人单刷(´･ω･`)喵喵喵？&lt;/p&gt;
&lt;p&gt;不过单刷也有单刷的好处嘛，至少我划水不用有心里负
      
    
    </summary>
    
      <category term="competition" scheme="http://riroaki.github.io/categories/competition/"/>
    
    
  </entry>
  
  <entry>
    <title>bash自动化部署脚本</title>
    <link href="http://riroaki.github.io/bash%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"/>
    <id>http://riroaki.github.io/bash自动化部署脚本/</id>
    <published>2019-04-11T07:33:43.000Z</published>
    <updated>2019-04-13T09:17:48.359Z</updated>
    
    <content type="html"><![CDATA[<p>这是18年部署战争游戏时，写自动化部署脚本的一点经验。</p><p>感觉<code>shell</code>写起来和<code>python</code>有点像……</p><h3 id="登录服务器"><a href="#登录服务器" class="headerlink" title="登录服务器"></a>登录服务器</h3><p>开头需要指明使用<code>expect</code>执行脚本，因为这些指令不是<code>bash</code>自带的；</p><p>使用的是<code>spawn</code>指令发送<code>ssh</code>连接请求，然后用<code>expect</code>表示等待对方输出后再做反馈，是一个灵活的指令；</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#! /usr/bin/expect</span><span class="token comment" spellcheck="true"># 如果不想明文写在脚本里，可以设置为命令行参数</span><span class="token keyword">set</span> ipaddr <span class="token punctuation">[</span>lindex <span class="token variable">$argv</span> 0<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">set</span> username <span class="token punctuation">[</span>lindex <span class="token variable">$argv</span> 1<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">set</span> password <span class="token punctuation">[</span>lindex <span class="token variable">$argv</span> 2<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token function">timeout</span> 30 <span class="token comment" spellcheck="true"># 超时等待时间</span><span class="token keyword">set</span> prompt <span class="token string">"#"</span> <span class="token comment" spellcheck="true"># 这里是登陆成功的输出，linux简单用#匹配最后一个字符就可以</span>spawn <span class="token function">ssh</span> <span class="token variable">$username@</span><span class="token variable">$ipaddr</span><span class="token function">expect</span> <span class="token punctuation">{</span>    <span class="token string">"yes/no"</span> <span class="token punctuation">{</span> send <span class="token string">"yes\r"</span><span class="token punctuation">;</span> exp_continue <span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 继续执行expect语句</span>    <span class="token string">"*assword"</span> <span class="token punctuation">{</span> send <span class="token string">"<span class="token variable">$password</span>\r"</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 密码输入提示，忽略p大小写</span>    <span class="token string">"Permission denied*"</span> <span class="token punctuation">{</span> <span class="token keyword">exit</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 密码错误</span>    <span class="token function">timeout</span> <span class="token punctuation">{</span> puts <span class="token string">"Timed out during login"</span><span class="token punctuation">;</span> <span class="token keyword">exit</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">expect</span> <span class="token string">"<span class="token variable">$prompt</span>"</span>interact <span class="token comment" spellcheck="true"># 交还控制权</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入服务器后执行指令要用<code>send</code>指令。</p><p>结束时，如果把权限交还用户则需要用<code>interact</code>。</p><pre class="line-numbers language-shell"><code class="language-shell"># ...# 结束连接send "exit\r"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="文件指令"><a href="#文件指令" class="headerlink" title="文件指令"></a>文件指令</h3><p>文件主要使用<code>scp</code>指令进行本地和远程的传输。它是<code>seccure copy</code>的缩写，和<code>cp</code>比较区别在于，前者可以远程传输，而且是加密的；后者只能本机移动。</p><p>以文件上传到远程服务器为例，展示具体使用格式（下一步要输入密码）：</p><pre class="line-numbers language-shell"><code class="language-shell"># 复制单个文件scp $file $username@$ipaddr:$remote_folder# 递归复制整个目录scp -r $folder $username@$ipaddr:$remote_folder<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在脚本中，我们使用<code>expect</code>模块执行<code>scp</code>指令：</p><pre class="line-numbers language-shell"><code class="language-shell">#! /usr/bin/expect# 复制文件spawn scp $file $username@$ipaddr:$remote_folderexpect {  "yes/no" { send "yes\r"; exp_continue }  "*assword" { send "$password\r" }  timeout { exit }}# 等待传输结束expect "100%"expect eof<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对文件夹，只需要把上面<code>spawn scp $file $username…</code>改成<code>spawn scp -r $folder $username…</code>即可。</p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>需要提前在服务器修改nginx配置，并配置好本地python环境（gunicorn+flask等等）。</p><p>这个没什么好说的，常规启动服务即可。</p><pre class="line-numbers language-shell"><code class="language-shell">send "kill -9 $(pidof gunicorn)"send "nginx -s restart && nohup gunicorn -w 1 -b 127.0.0.1:8080 main:app -D"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有关部署的细节，详见<a href="https://riroaki.github.io/2019/03/28/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%EF%BC%9AFlask-gunicorn-nginx/">另一篇文章</a>。</p><p>总体代码：</p><pre class="line-numbers language-shell"><code class="language-shell">#! /usr/bin/expect# 如果不想明文写在脚本里，可以设置为命令行参数set ipaddr [lindex $argv 0];set username [lindex $argv 1];set password [lindex $argv 2];set folder "./war"set remote_folder "~/war"set timeout 30# 复制文件spawn scp $file $username@$ipaddr:$remote_folderexpect {  "yes/no" { send "yes\r"; exp_continue }  "*assword" { send "$password\r" }  timeout { exit }}# 等待传输结束expect "100%"expect eofspawn ssh $username@$ipaddrexpect {    "yes/no" { send "yes\r"; exp_continue } # 继续执行expect语句    "*assword" { send "$password\r" } # 密码输入提示，忽略p大小写    "Permission denied*" { exit } # 密码错误    timeout { puts "Timed out during login"; exit }}expect "#"# 运行send "kill -9 $(pidof gunicorn)\r"send "nginx -s restart && cd ~/war/ && nohup gunicorn -w 1 -b 127.0.0.1:8080 main:app -D\r"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是18年部署战争游戏时，写自动化部署脚本的一点经验。&lt;/p&gt;
&lt;p&gt;感觉&lt;code&gt;shell&lt;/code&gt;写起来和&lt;code&gt;python&lt;/code&gt;有点像……&lt;/p&gt;
&lt;h3 id=&quot;登录服务器&quot;&gt;&lt;a href=&quot;#登录服务器&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="back end" scheme="http://riroaki.github.io/categories/back-end/"/>
    
    
      <category term="shell" scheme="http://riroaki.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Easy Painter-iOS绘图实例</title>
    <link href="http://riroaki.github.io/EasyPainter-iOS%E7%BB%98%E5%9B%BE%E5%AE%9E%E4%BE%8B/"/>
    <id>http://riroaki.github.io/EasyPainter-iOS绘图实例/</id>
    <published>2019-04-10T19:46:41.000Z</published>
    <updated>2019-04-18T13:00:45.188Z</updated>
    
    <content type="html"><![CDATA[<p>这是去年刚接触iOS编程的时候，入门做的一点小项目——第一个是一个支持多种颜色的画板，第二个是玩纪念碑谷2之后，模仿每一关最后的部分实现的画画功能。</p><a id="more"></a><p>先看一下效果图：</p><h3 id="画板"><a href="#画板" class="headerlink" title="画板"></a>画板</h3><p>可以实现多种颜色和阴影，清空画版、分享绘画等等。</p><p><img src="/EasyPainter-iOS绘图实例/board.JPG" alt></p><h3 id="纪念碑谷"><a href="#纪念碑谷" class="headerlink" title="纪念碑谷"></a>纪念碑谷</h3><p>很直观的效果，画笔有多种样式：</p><ul><li>直接绘制，表现为对称的白色线条（这是纪念碑谷中的效果——除了没有发光以外）</li></ul><p><img src="/EasyPainter-iOS绘图实例/white.png" alt></p><ul><li>后来觉得线条太单调，于是增加了绘制树叶</li></ul><p><img src="/EasyPainter-iOS绘图实例/tree.png" alt></p><ul><li>我又加入了多种颜色～</li></ul><p><img src="/EasyPainter-iOS绘图实例/colorful.png" alt></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>占坑，待补充。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是去年刚接触iOS编程的时候，入门做的一点小项目——第一个是一个支持多种颜色的画板，第二个是玩纪念碑谷2之后，模仿每一关最后的部分实现的画画功能。&lt;/p&gt;
    
    </summary>
    
      <category term="front end" scheme="http://riroaki.github.io/categories/front-end/"/>
    
    
      <category term="iOS" scheme="http://riroaki.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>NLP学习日记1——Set Expan</title>
    <link href="http://riroaki.github.io/NLP-1-Set-Expan/"/>
    <id>http://riroaki.github.io/NLP-1-Set-Expan/</id>
    <published>2019-04-10T19:02:10.000Z</published>
    <updated>2019-04-24T17:55:27.094Z</updated>
    
    <content type="html"><![CDATA[<p>说来惭愧，其实这是上个学期初实验室的老师布置下来的任务，直到今天才开始认真接触。</p><p>NLP应当是未来大势之一——在视觉、语音等方面已经能够做到炉火纯青的ML和DL，在NLP领域进展却比较慢，可以说是在日渐饱和的AI领域为数不多的未被探索完全的领域了。</p><p>词集拓展的概念和做法来自一篇论文：《SetExpan- Corpus-Based Set Expansion via Context Feature Selection and Rank Ensemble》，指的是根据一些词集种子，从语料库中摘取同一类的词语。作者采用的是英文词语，源代码在<a href="https://github.com/mickeystroller/SetExpan">这里</a>。</p><p>这个方法说来简单，但是实际做起来并不容易。简单的上下文提取和匹配如果做不好，很容易出现语义漂移的现象，即同一个上下文抽取的词却不一样。</p><p>此外，中文本身的分词难度也为项目带来困难。</p><p>而且分类是重要的一步，为之后建立知识图谱、挖掘联系等等都具有基础性意义。</p><p>那么首先我们来分析一下论文讲的方法。</p><h2 id="理论部分"><a href="#理论部分" class="headerlink" title="理论部分"></a>理论部分</h2><p>所谓词集拓展，就是将一个小的词语集合（如几个国家名称），从语料库拓展到文章中所有的国家名称。</p><p>目前现有的基于小初始集的无监督词集拓展主要包括两种：</p><ol><li>基于和已有实体的分布相似性，一次性提取全部实体<ul><li>盲目地使用所有这些特征可能将不期望的实体引入扩展集合中，因为许多上下文特征不代表用于定义目标语义类，尽管它们确实与一些种子实体具有连接。比如国家和地区都可以接在“位于”之后，容易混为一谈。</li></ul></li><li>迭代性提取模式，用每次带来的新模式进行提取，不断加入词集<ul><li>依靠每次迭代得到的词集质量。由于文本的非结构化以及噪声存在，很难有完美的评分机制。</li><li>需要注意：实体入侵（实体质量不佳）、语义漂移（模式质量不佳）</li></ul></li></ol><p>还有一种取巧的办法，Google Set，即每次从谷歌搜索引擎中搜索关键词，然后提取前面几页搜索结果的关联关键词。这种办法质量不错但是需要在线连接，成本较高。在这里我们实现一种离线的词集拓展。</p><p>这里需要描述的工作是：</p><ol><li>一种迭代集扩展框架，采用新颖的上下文特征选择方法，处理实体入侵和语义漂移问题; </li><li>一种基于无监督排序的集成算法，用于实体选择，使我们的系统具有鲁棒性，进一步降低了语义漂移的影响。</li></ol><p>好，开始描述具体过程：</p><h3 id="模式建立"><a href="#模式建立" class="headerlink" title="模式建立"></a>模式建立</h3><p>针对单词集中的每个单词构建一个模式。</p><p>（待续）</p><h3 id="模式评估"><a href="#模式评估" class="headerlink" title="模式评估"></a>模式评估</h3><p>（待续）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说来惭愧，其实这是上个学期初实验室的老师布置下来的任务，直到今天才开始认真接触。&lt;/p&gt;
&lt;p&gt;NLP应当是未来大势之一——在视觉、语音等方面已经能够做到炉火纯青的ML和DL，在NLP领域进展却比较慢，可以说是在日渐饱和的AI领域为数不多的未被探索完全的领域了。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="machine learning" scheme="http://riroaki.github.io/categories/machine-learning/"/>
    
    
      <category term="NLP" scheme="http://riroaki.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>41.First Missing Positive</title>
    <link href="http://riroaki.github.io/41-First-Missing-Positive/"/>
    <id>http://riroaki.github.io/41-First-Missing-Positive/</id>
    <published>2019-04-10T18:36:26.000Z</published>
    <updated>2019-04-19T12:13:30.438Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an unsorted integer array, find the smallest missing positive integer.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: [1,2,0]Output: 3</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: [3,4,-1,1]Output: 2</code></pre><p><strong>Example 3:</strong></p><pre><code>Input: [7,8,9,11,12]Output: 1</code></pre><p><strong>Note:</strong></p><p>Your algorithm should run in <em>O</em>(<em>n</em>) time and uses constant extra space.</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="联想merge-interval"><a href="#联想merge-interval" class="headerlink" title="联想merge interval"></a>联想merge interval</h4><p>虽然不是常数空间的算法，但是时间复杂度是线性的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Interval</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>        <span class="token function">Interval</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            left <span class="token operator">=</span> l<span class="token punctuation">;</span>            right <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">firstMissingPositive</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Interval<span class="token operator">></span> intervalList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>intervalList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                intervalList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Interval</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                Interval tmp <span class="token operator">=</span> intervalList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>intervalList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    tmp<span class="token punctuation">.</span>right<span class="token operator">++</span><span class="token punctuation">;</span>                    intervalList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>intervalList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> num<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>intervalList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> intervalList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> intervalList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>intervalList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(n)$</li></ul><h4 id="常数空间的做法：交换"><a href="#常数空间的做法：交换" class="headerlink" title="常数空间的做法：交换"></a>常数空间的做法：交换</h4><p>首先，总共有n个数 ，那么缺失的数最大也是<code>n+1</code>，不然就是<code>1-n</code>中间的数。</p><p>假如我们让所有数归位（即，尽量让所有的数满足<code>a[i] = i + 1</code>）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">firstMissingPositive</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 注意这个是循环不是一次判断！</span>          <span class="token comment" spellcheck="true">// 最后一个判断条件是必要的，在[1, 1]情况下就会死循环</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n               <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$，别看是两层循环，但是每一次交换都能够保证至少一个数归位，所以总共最多只需要交换n次。</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given an unsorted integer array, find the smallest missing positive integer.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://riroaki.github.io/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://riroaki.github.io/tags/array/"/>
    
      <category term="interval" scheme="http://riroaki.github.io/tags/interval/"/>
    
  </entry>
  
  <entry>
    <title>40.Combination Sum II</title>
    <link href="http://riroaki.github.io/40-Combination-Sum-II/"/>
    <id>http://riroaki.github.io/40-Combination-Sum-II/</id>
    <published>2019-04-10T18:28:44.000Z</published>
    <updated>2019-04-10T18:35:46.336Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p><p>Each number in <code>candidates</code> may only be used <strong>once</strong> in the combination.</p><p><strong>Note:</strong></p><ul><li>All numbers (including <code>target</code>) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: candidates = [10,1,2,7,6,1,5], target = 8,A solution set is:[  [1, 7],  [1, 2, 5],  [2, 6],  [1, 1, 6]]</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: candidates = [2,5,2,1,2], target = 5,A solution set is:[  [1,2,2],  [5]]</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="回溯-dfs"><a href="#回溯-dfs" class="headerlink" title="回溯+dfs"></a>回溯+dfs</h4><p>和上题类似但是允许重复元素使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res<span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">backTrack</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">backTrack</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> curr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> index <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            curr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backTrack</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curr<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^{m/avg(n)})$</li><li>空间复杂度：$O(mn^{m/avg(n)})$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a collection of candidate numbers (&lt;code&gt;candidates&lt;/code&gt;) and a target number (&lt;code&gt;target&lt;/code&gt;), find all unique combinations in &lt;code&gt;candidates&lt;/code&gt; where the candidate numbers sums to &lt;code&gt;target&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each number in &lt;code&gt;candidates&lt;/code&gt; may only be used &lt;strong&gt;once&lt;/strong&gt; in the combination.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All numbers (including &lt;code&gt;target&lt;/code&gt;) will be positive integers.&lt;/li&gt;
&lt;li&gt;The solution set must not contain duplicate combinations.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://riroaki.github.io/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://riroaki.github.io/tags/array/"/>
    
      <category term="backtracking" scheme="http://riroaki.github.io/tags/backtracking/"/>
    
      <category term="dfs" scheme="http://riroaki.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>39.Combination Sum</title>
    <link href="http://riroaki.github.io/39-Combination-Sum/"/>
    <id>http://riroaki.github.io/39-Combination-Sum/</id>
    <published>2019-04-10T18:23:04.000Z</published>
    <updated>2019-04-10T18:28:14.727Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a <strong>set</strong> of candidate numbers (<code>candidates</code>) <strong>(without duplicates)</strong> and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p><p>The <strong>same</strong> repeated number may be chosen from <code>candidates</code> unlimited number of times.</p><p><strong>Note:</strong></p><ul><li>All numbers (including <code>target</code>) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: candidates = [2,3,6,7], target = 7,A solution set is:[  [7],  [2,2,3]]</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: candidates = [2,3,5], target = 8,A solution set is:[  [2,2,2,2],  [2,3,3],  [3,5]]</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="回溯-dfs"><a href="#回溯-dfs" class="headerlink" title="回溯+dfs"></a>回溯+dfs</h4><p>理论上有2的n种可能；</p><p>排序保证unique。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">combinationSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>candidates <span class="token operator">==</span> null <span class="token operator">||</span> candidates<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> tmp <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target <span class="token operator">-</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> vec <span class="token operator">:</span> tmp<span class="token punctuation">)</span>                      vec<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(2^n)$</li><li>空间复杂度：$O(2^n)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a &lt;strong&gt;set&lt;/strong&gt; of candidate numbers (&lt;code&gt;candidates&lt;/code&gt;) &lt;strong&gt;(without duplicates)&lt;/strong&gt; and a target number (&lt;code&gt;target&lt;/code&gt;), find all unique combinations in &lt;code&gt;candidates&lt;/code&gt; where the candidate numbers sums to &lt;code&gt;target&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;same&lt;/strong&gt; repeated number may be chosen from &lt;code&gt;candidates&lt;/code&gt; unlimited number of times.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All numbers (including &lt;code&gt;target&lt;/code&gt;) will be positive integers.&lt;/li&gt;
&lt;li&gt;The solution set must not contain duplicate combinations.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://riroaki.github.io/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://riroaki.github.io/tags/array/"/>
    
      <category term="backtracking" scheme="http://riroaki.github.io/tags/backtracking/"/>
    
      <category term="dfs" scheme="http://riroaki.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>38.Count and Say</title>
    <link href="http://riroaki.github.io/38-Count-and-Say/"/>
    <id>http://riroaki.github.io/38-Count-and-Say/</id>
    <published>2019-04-10T18:18:58.000Z</published>
    <updated>2019-04-10T18:22:06.002Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>The count-and-say sequence is the sequence of integers with the first five terms as following:</p><pre><code>1.     12.     113.     214.     12115.     111221</code></pre><p><code>1</code> is read off as <code>&quot;one 1&quot;</code> or <code>11</code>.<br><code>11</code> is read off as <code>&quot;two 1s&quot;</code> or <code>21</code>.<br><code>21</code> is read off as <code>&quot;one 2</code>, then <code>one 1&quot;</code> or <code>1211</code>.</p><p>Given an integer <em>n</em> where 1 ≤ <em>n</em> ≤ 30, generate the <em>n</em>th term of the count-and-say sequence.</p><p>Note: Each term of the sequence of integers will be represented as a string.</p> <a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: 1Output: &quot;1&quot;</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: 4Output: &quot;1211&quot;</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="常规做法"><a href="#常规做法" class="headerlink" title="常规做法"></a>常规做法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">countAndSay</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String s <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> count <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        s <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// System.out.println(s);</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(n)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;The count-and-say sequence is the sequence of integers with the first five terms as following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.     1
2.     11
3.     21
4.     1211
5.     111221
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;1&lt;/code&gt; is read off as &lt;code&gt;&amp;quot;one 1&amp;quot;&lt;/code&gt; or &lt;code&gt;11&lt;/code&gt;.&lt;br&gt;&lt;code&gt;11&lt;/code&gt; is read off as &lt;code&gt;&amp;quot;two 1s&amp;quot;&lt;/code&gt; or &lt;code&gt;21&lt;/code&gt;.&lt;br&gt;&lt;code&gt;21&lt;/code&gt; is read off as &lt;code&gt;&amp;quot;one 2&lt;/code&gt;, then &lt;code&gt;one 1&amp;quot;&lt;/code&gt; or &lt;code&gt;1211&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Given an integer &lt;em&gt;n&lt;/em&gt; where 1 ≤ &lt;em&gt;n&lt;/em&gt; ≤ 30, generate the &lt;em&gt;n&lt;/em&gt;th term of the count-and-say sequence.&lt;/p&gt;
&lt;p&gt;Note: Each term of the sequence of integers will be represented as a string.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://riroaki.github.io/categories/leetcode/"/>
    
    
      <category term="easy" scheme="http://riroaki.github.io/tags/easy/"/>
    
      <category term="string" scheme="http://riroaki.github.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>36.Valid Sudoku</title>
    <link href="http://riroaki.github.io/36-Valid-Sudoku/"/>
    <id>http://riroaki.github.io/36-Valid-Sudoku/</id>
    <published>2019-04-10T18:13:34.000Z</published>
    <updated>2019-04-10T18:17:32.351Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated <strong>according to the following rules</strong>:</p><ol><li>Each row must contain the digits <code>1-9</code> without repetition.</li><li>Each column must contain the digits <code>1-9</code> without repetition.</li><li>Each of the 9 <code>3x3</code> sub-boxes of the grid must contain the digits <code>1-9</code> without repetition.</li></ol><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="img"><br>A partially filled sudoku which is valid.</p><p>The Sudoku board could be partially filled, where empty cells are filled with the character <code>&#39;.&#39;</code>.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input:[  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]Output: true</code></pre><p><strong>Example 2:</strong></p><pre><code>Input:[  [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]Output: falseExplanation: Same as Example 1, except with the 5 in the top left corner being     modified to 8. Since there are two 8&#39;s in the top left 3x3 sub-box, it is invalid.</code></pre><p><strong>Note:</strong></p><ul><li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li><li>Only the filled cells need to be validated according to the mentioned rules.</li><li>The given board contain only digits <code>1-9</code> and the character <code>&#39;.&#39;</code>.</li><li>The given board size is always <code>9x9</code>.</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="分批验证"><a href="#分批验证" class="headerlink" title="分批验证"></a>分批验证</h4><p>按行、列、九宫格验证1～9有且仅有一个即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidSudoku</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 分批验证9行，9列以及九宫格块</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmpRowStart <span class="token operator">=</span> i <span class="token operator">-</span> i <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmpColStart <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">[</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                row<span class="token punctuation">[</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>col<span class="token punctuation">[</span>board<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                col<span class="token punctuation">[</span>board<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>tmpRowStart <span class="token operator">+</span> j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tmpColStart <span class="token operator">+</span> j <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>board<span class="token punctuation">[</span>tmpRowStart <span class="token operator">+</span> j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tmpColStart <span class="token operator">+</span> j <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                grid<span class="token punctuation">[</span>board<span class="token punctuation">[</span>tmpRowStart <span class="token operator">+</span> j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tmpColStart <span class="token operator">+</span> j <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(n)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated &lt;strong&gt;according to the following rules&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Each row must contain the digits &lt;code&gt;1-9&lt;/code&gt; without repetition.&lt;/li&gt;
&lt;li&gt;Each column must contain the digits &lt;code&gt;1-9&lt;/code&gt; without repetition.&lt;/li&gt;
&lt;li&gt;Each of the 9 &lt;code&gt;3x3&lt;/code&gt; sub-boxes of the grid must contain the digits &lt;code&gt;1-9&lt;/code&gt; without repetition.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png&quot; alt=&quot;img&quot;&gt;&lt;br&gt;A partially filled sudoku which is valid.&lt;/p&gt;
&lt;p&gt;The Sudoku board could be partially filled, where empty cells are filled with the character &lt;code&gt;&amp;#39;.&amp;#39;&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://riroaki.github.io/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://riroaki.github.io/tags/array/"/>
    
      <category term="medium" scheme="http://riroaki.github.io/tags/medium/"/>
    
  </entry>
  
  <entry>
    <title>35.Search Insert Position</title>
    <link href="http://riroaki.github.io/35-Search-Insert-Position/"/>
    <id>http://riroaki.github.io/35-Search-Insert-Position/</id>
    <published>2019-04-10T18:10:39.000Z</published>
    <updated>2019-04-10T18:12:59.539Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><p>You may assume no duplicates in the array.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: [1,3,5,6], 5Output: 2</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: [1,3,5,6], 2Output: 1</code></pre><p><strong>Example 3:</strong></p><pre><code>Input: [1,3,5,6], 7Output: 4</code></pre><p><strong>Example 4:</strong></p><pre><code>Input: [1,3,5,6], 0Output: 0</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><p>啥也别说了，就这样。</p><pre class="line-numbers language-python"><code class="language-python">public int searchInsert<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> int target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    int lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        int mi <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mi<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>            lo <span class="token operator">=</span> mi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            hi <span class="token operator">=</span> mi<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lo<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(log(n))​$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.&lt;/p&gt;
&lt;p&gt;You may assume no duplicates in the array.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://riroaki.github.io/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://riroaki.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://riroaki.github.io/tags/easy/"/>
    
      <category term="binary search" scheme="http://riroaki.github.io/tags/binary-search/"/>
    
  </entry>
  
</feed>
