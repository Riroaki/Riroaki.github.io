<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Riroaki</title>
  
  <subtitle>Riroaki&#39;s home</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://riroaki.github.io/"/>
  <updated>2019-04-17T22:46:01.239Z</updated>
  <id>http://riroaki.github.io/</id>
  
  <author>
    <name>Riroaki</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LuckyMoney——红包分配算法</title>
    <link href="http://riroaki.github.io/2019/04/18/LuckyMoney/"/>
    <id>http://riroaki.github.io/2019/04/18/LuckyMoney/</id>
    <published>2019-04-17T19:24:25.000Z</published>
    <updated>2019-04-17T22:46:01.239Z</updated>
    
    <content type="html"><![CDATA[<p>面试被问到这题，记录一下思路～从一开始的复杂算法到后面的简化和优化过程。</p><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul><li>保证每人有一个金额下限（0.01），以及一个金额上限（占总金额的比重不能超过90%）</li><li>保证结果有2位小数（精确到分），需要考虑浮点数计算误差。</li></ul><h3 id="初步思路"><a href="#初步思路" class="headerlink" title="初步思路"></a>初步思路</h3><ol><li>分割法：每次把最大的红包分割成两个小的，进行<code>n-1</code>次操作。<ul><li>注意随机的上界和下界；最后顺序还要shuffle。</li><li>时间复杂度：O(nlogn)​，代码也长，逻辑比较复杂+可读性差。</li></ul></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LuckyMoney</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> min <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">,</span> maxRate <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">distribute</span><span class="token punctuation">(</span><span class="token keyword">double</span> total<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Corner case: cases with 1 people, or invalid cases.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> total <span class="token operator">&lt;=</span> min <span class="token operator">*</span> n <span class="token operator">||</span> maxRate <span class="token operator">*</span> n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>total<span class="token punctuation">}</span><span class="token punctuation">;</span>        Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> totalCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>maxRate <span class="token operator">*</span> totalCents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Maximum heap, stores the largest Lucky on the peek.</span>        PriorityQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> money <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o2 <span class="token operator">-</span> o1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Split the max Lucky for n - 1 times.</span>        money<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>totalCents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> maxMoney <span class="token operator">=</span> money<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lowerBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> min <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> totalCents <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> maxCents<span class="token punctuation">)</span><span class="token punctuation">,</span> upperBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>maxCents<span class="token punctuation">,</span> maxMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> curr <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>upperBound <span class="token operator">-</span> lowerBound<span class="token punctuation">)</span> <span class="token operator">+</span> lowerBound<span class="token punctuation">;</span>            money<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span>            money<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>maxMoney <span class="token operator">-</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Shuffle the values.</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmpValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span>tmpValues<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Calculate the money.</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmpValues<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100.0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// This part can also be used for all methods below.</span>    <span class="token comment" spellcheck="true">// Check the results.</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res<span class="token punctuation">,</span> <span class="token keyword">double</span> total<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> null <span class="token operator">||</span> res<span class="token punctuation">.</span>length <span class="token operator">!=</span> n<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            sum <span class="token operator">+=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check sum.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">-</span> total <span class="token operator">&lt;</span> <span class="token number">1e-6</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check each.</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> sum <span class="token operator">>=</span> maxRate <span class="token operator">||</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// test 100.00</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> test <span class="token operator">=</span> <span class="token function">distribute</span><span class="token punctuation">(</span><span class="token number">100.00</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">validate</span><span class="token punctuation">(</span>test<span class="token punctuation">,</span> <span class="token number">100.00</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>直接随机求每次的值，定好每次上界和下界即可。<ul><li>结果上看，存在前面分钱多，后面分钱少的问题。可以考虑使用shuffle；</li><li>另外，由于使用的是平均分布的随机函数，所以导致大或者小红包出现概率比较大，比较”不公平”。</li><li>时间复杂度：O(n)</li></ul></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LuckyMoney</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> min <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">,</span> maxRate <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">distribute</span><span class="token punctuation">(</span><span class="token keyword">double</span> total<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> remainCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> minCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>min <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>maxRate <span class="token operator">*</span> remainCents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> lowerBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>minCents<span class="token punctuation">,</span> remainCents <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> maxCents<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> upperBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>maxCents<span class="token punctuation">,</span> remainCents <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> minCents<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>upperBound <span class="token operator">-</span> lowerBound<span class="token punctuation">)</span> <span class="token operator">+</span> lowerBound<span class="token punctuation">;</span>            remainCents <span class="token operator">-=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调整思路"><a href="#调整思路" class="headerlink" title="调整思路"></a>调整思路</h3><p>在上面的实现过程中，我遇到了两个问题：</p><ol><li>大小红包出现概率过大，导致不公平；</li><li>前面红包普遍比后面红包大，不够随机。</li></ol><p>经过一些资料查阅，看到一些针对微信红包的测试实验结果：</p><ul><li>在比较靠后抽取的红包金额方差较大，其分布接近指数，容易抽到手气最佳；</li><li>在比较靠前抽取的红包方差较小，平均值差不多。</li></ul><p>此外，我了解到使用正态分布可以使大家的金额数接近平均值，使得大红包和小红包都不容易出现。</p><p>有一些文章推测，微信红包使用的是截尾正态分布算法，即保留部分正态分布图像在指定区间，而区间以外的概率密度为0；当然，为保证所需区间概率密度和为1，需要拔高整体图像，这在公式上通过乘一个系数得到。</p><p>经过一番思考后写下的代码：</p><ol><li>调整平均分布为截尾正态分布，每个人获得的是以当前余额的平均为均值，并明确上下限的截尾正态分布随机获得的值。<ul><li>结果较好，避免了红包金额不公和前后分布不均问题。</li><li>截尾正态分布实现比较粗暴（如果随机结果不在里面就舍弃重来）。</li><li>在正态分布参数的选择上，直接以均值作为方差的开方，不知是否有更好的参数？</li></ul></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LuckyMoney</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> min <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">,</span> maxRate <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">distribute</span><span class="token punctuation">(</span><span class="token keyword">double</span> total<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> remainCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>total <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> minCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>min <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>maxRate <span class="token operator">*</span> remainCents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> lowerBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>minCents<span class="token punctuation">,</span> remainCents <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> maxCents<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> upperBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>maxCents<span class="token punctuation">,</span> remainCents <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> minCents<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mean <span class="token operator">=</span> remainCents <span class="token operator">/</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">truncatedNorm</span><span class="token punctuation">(</span>mean<span class="token punctuation">,</span> mean<span class="token punctuation">,</span> lowerBound<span class="token punctuation">,</span> upperBound<span class="token punctuation">)</span><span class="token punctuation">;</span>            remainCents <span class="token operator">-=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// A naive implementation of truncated normal distribution.</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">truncatedNorm</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> sqrtv<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lo <span class="token operator">==</span> hi<span class="token punctuation">)</span>            <span class="token keyword">return</span> lo<span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token punctuation">;</span>        Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">nextGaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> sqrtv<span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> lo <span class="token operator">||</span> res <span class="token operator">></span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>修改成实时分配（用性能换空间）</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LuckyMoney</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> min <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">,</span> maxRate <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Index = 1, 2, 3, ..., n</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">nextMoney</span><span class="token punctuation">(</span><span class="token keyword">double</span> remain<span class="token punctuation">,</span> <span class="token keyword">double</span> total<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> n<span class="token punctuation">)</span>            <span class="token keyword">return</span> remain<span class="token punctuation">;</span>        <span class="token keyword">int</span> remainCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>remain <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> minCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>min <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> maxCents <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>total <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">*</span> maxRate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lowerBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>minCents<span class="token punctuation">,</span> remainCents <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> index<span class="token punctuation">)</span> <span class="token operator">*</span> maxCents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> upperBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>maxCents<span class="token punctuation">,</span> remainCents <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> index<span class="token punctuation">)</span> <span class="token operator">*</span> minCents<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mean <span class="token operator">=</span> remainCents <span class="token operator">/</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">truncatedNorm</span><span class="token punctuation">(</span>mean<span class="token punctuation">,</span> mean<span class="token punctuation">,</span> lowerBound<span class="token punctuation">,</span> upperBound<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Truncated normalize distribution function: omitted.</span>    <span class="token comment" spellcheck="true">// main function.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> total <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">,</span> remain <span class="token operator">=</span> total<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">double</span> curr <span class="token operator">=</span> <span class="token function">nextMoney</span><span class="token punctuation">(</span>remain<span class="token punctuation">,</span> total<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            remain <span class="token operator">-=</span> curr<span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>（网传）微信红包算法实现及分析<ul><li>实时分配金额，最小值为0.01，最大值为当前剩余平均值的两倍</li><li>使用红包类，思路清晰；避免了正态计算，时间效率较好。</li><li>当然，这里没有涉及最大红包的数值限制。</li></ul></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getRandomMoney</span><span class="token punctuation">(</span>LeftMoneyPackage _leftMoneyPackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// remainSize 剩余的红包数量</span>    <span class="token comment" spellcheck="true">// remainMoney 剩余的钱</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>_leftMoneyPackage<span class="token punctuation">.</span>remainSize <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        _leftMoneyPackage<span class="token punctuation">.</span>remainSize<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>_leftMoneyPackage<span class="token punctuation">.</span>remainMoney <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Random r     <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> min   <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">double</span> max   <span class="token operator">=</span> _leftMoneyPackage<span class="token punctuation">.</span>remainMoney <span class="token operator">/</span> _leftMoneyPackage<span class="token punctuation">.</span>remainSize <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> money <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> max<span class="token punctuation">;</span>    money <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>money<span class="token punctuation">,</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>    money <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>money <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>    _leftMoneyPackage<span class="token punctuation">.</span>remainSize<span class="token operator">--</span><span class="token punctuation">;</span>    _leftMoneyPackage<span class="token punctuation">.</span>remainMoney <span class="token operator">-=</span> money<span class="token punctuation">;</span>    <span class="token keyword">return</span> money<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浮点数精度问题"><a href="#浮点数精度问题" class="headerlink" title="浮点数精度问题"></a>浮点数精度问题</h3><ul><li>使用<code>BigDecimal</code>确保精度，商业运算常规做法。具体用法同<code>BigInteger</code>。</li></ul><h3 id="多人抢红包实例"><a href="#多人抢红包实例" class="headerlink" title="多人抢红包实例"></a>多人抢红包实例</h3><ul><li>注意<code>synchronized</code>关键字的使用。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LuckyMoney</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> totalSize<span class="token punctuation">,</span> remainSize<span class="token punctuation">;</span>    <span class="token keyword">double</span> totalMoney<span class="token punctuation">,</span> remainMoney<span class="token punctuation">,</span> minMoney <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">,</span> maxRate <span class="token operator">=</span> <span class="token number">0.9</span><span class="token punctuation">,</span> maxMoney<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LuckyMoney</span><span class="token punctuation">(</span><span class="token keyword">double</span> money<span class="token punctuation">,</span> <span class="token keyword">int</span> people<span class="token punctuation">)</span> <span class="token punctuation">{</span>        totalSize <span class="token operator">=</span> remainSize <span class="token operator">=</span> people<span class="token punctuation">;</span>        totalMoney <span class="token operator">=</span> remainMoney <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>money <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>        maxMoney <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>totalMoney <span class="token operator">*</span> maxRate <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetLuckyMoney</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> LuckyMoney money<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> index<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GetLuckyMoney</span><span class="token punctuation">(</span>LuckyMoney _money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        money <span class="token operator">=</span> _money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">++</span>index<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Man "</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">" get "</span> <span class="token operator">+</span> <span class="token function">getMoney</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">getMoney</span><span class="token punctuation">(</span>LuckyMoney money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> res<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>money<span class="token punctuation">.</span>remainSize <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            money<span class="token punctuation">.</span>remainSize<span class="token operator">--</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>money<span class="token punctuation">.</span>remainMoney <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">double</span> lowerBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>money<span class="token punctuation">.</span>minMoney<span class="token punctuation">,</span> money<span class="token punctuation">.</span>remainMoney <span class="token operator">-</span> <span class="token punctuation">(</span>money<span class="token punctuation">.</span>remainSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> money<span class="token punctuation">.</span>maxMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> upperBound <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>money<span class="token punctuation">.</span>maxMoney<span class="token punctuation">,</span> money<span class="token punctuation">.</span>remainMoney <span class="token operator">-</span> <span class="token punctuation">(</span>money<span class="token punctuation">.</span>remainSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> money<span class="token punctuation">.</span>minMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> mean <span class="token operator">=</span> money<span class="token punctuation">.</span>remainMoney <span class="token operator">/</span> money<span class="token punctuation">.</span>remainSize<span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token function">truncatedNorm</span><span class="token punctuation">(</span>mean<span class="token punctuation">,</span> mean<span class="token punctuation">,</span> lowerBound<span class="token punctuation">,</span> upperBound<span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>res <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>        money<span class="token punctuation">.</span>remainSize<span class="token operator">--</span><span class="token punctuation">;</span>        money<span class="token punctuation">.</span>remainMoney <span class="token operator">-=</span> res<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">truncatedNorm</span><span class="token punctuation">(</span><span class="token keyword">double</span> m<span class="token punctuation">,</span> <span class="token keyword">double</span> sqrtV<span class="token punctuation">,</span> <span class="token keyword">double</span> lo<span class="token punctuation">,</span> <span class="token keyword">double</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lo <span class="token operator">==</span> hi<span class="token punctuation">)</span>            <span class="token keyword">return</span> lo<span class="token punctuation">;</span>        <span class="token keyword">double</span> res<span class="token punctuation">;</span>        Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">nextGaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> sqrtV <span class="token operator">+</span> m<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> lo <span class="token operator">||</span> res <span class="token operator">></span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LuckyMoney money <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LuckyMoney</span><span class="token punctuation">(</span><span class="token number">100.0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Start to distribute "</span> <span class="token operator">+</span> money<span class="token punctuation">.</span>totalMoney <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> money<span class="token punctuation">.</span>totalSize <span class="token operator">+</span> <span class="token string">" people."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        GetLuckyMoney test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetLuckyMoney</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-java"><code class="language-java">Start to distribute <span class="token number">100.0</span> to <span class="token number">10</span> people<span class="token punctuation">.</span>Man <span class="token number">1</span> get <span class="token number">7.58</span>Man <span class="token number">2</span> get <span class="token number">3.19</span>Man <span class="token number">3</span> get <span class="token number">16.73</span>Man <span class="token number">4</span> get <span class="token number">11.79</span>Man <span class="token number">5</span> get <span class="token number">6.53</span>Man <span class="token number">6</span> get <span class="token number">7.53</span>Man <span class="token number">7</span> get <span class="token number">13.45</span>Man <span class="token number">8</span> get <span class="token number">1.92</span>Man <span class="token number">9</span> get <span class="token number">3.62</span>Man <span class="token number">10</span> get <span class="token number">27.66</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于提高代码可读性的建议"><a href="#关于提高代码可读性的建议" class="headerlink" title="关于提高代码可读性的建议"></a>关于提高代码可读性的建议</h3><ul><li>避免一行一注释，减少注释冗余。</li><li>命名方案一致。</li><li>不重复写相同代码。</li><li>避免层数过深的逻辑。</li><li>限制每行长度。</li><li>一致的临时变量命名。比如都用<code>i</code>。</li><li>加入块注释，例如：</li></ul><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Return a truncated normal distribution N(m, v) between [lo, hi].     * @param m:            mean of normal distribution     * @param sqrtV:    square of variance of normal distribution     * @param lo:            lower bound of truncation     * @param hi:         upper bound of truncation     * @return round value of truncated normal distribution.     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">truncatedNorm</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> sqrtV<span class="token punctuation">,</span> <span class="token keyword">int</span> lo<span class="token punctuation">,</span> <span class="token keyword">int</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lo <span class="token operator">==</span> hi<span class="token punctuation">)</span>            <span class="token keyword">return</span> lo<span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token punctuation">;</span>        Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">nextGaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> sqrtV<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;</span> lo <span class="token operator">||</span> res <span class="token operator">></span> hi<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;面试被问到这题，记录一下思路～从一开始的复杂算法到后面的简化和优化过程。&lt;/p&gt;
&lt;h3 id=&quot;要点&quot;&gt;&lt;a href=&quot;#要点&quot; class=&quot;headerlink&quot; title=&quot;要点&quot;&gt;&lt;/a&gt;要点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;保证每人有一个金额下限（0.01），以及
      
    
    </summary>
    
      <category term="interview" scheme="http://riroaki.github.io/categories/interview/"/>
    
    
      <category term="array" scheme="http://riroaki.github.io/tags/array/"/>
    
      <category term="random" scheme="http://riroaki.github.io/tags/random/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序开发技巧汇总</title>
    <link href="http://riroaki.github.io/2019/04/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E6%B1%87%E6%80%BB/"/>
    <id>http://riroaki.github.io/2019/04/15/微信小程序开发技巧汇总/</id>
    <published>2019-04-14T20:05:33.000Z</published>
    <updated>2019-04-14T20:06:12.650Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="front end" scheme="http://riroaki.github.io/categories/front-end/"/>
    
    
      <category term="weapp" scheme="http://riroaki.github.io/tags/weapp/"/>
    
  </entry>
  
  <entry>
    <title>19届图森杯划水经历</title>
    <link href="http://riroaki.github.io/2019/04/15/19%E5%B1%8A%E5%9B%BE%E6%A3%AE%E6%9D%AF%E5%88%92%E6%B0%B4%E7%BB%8F%E5%8E%86/"/>
    <id>http://riroaki.github.io/2019/04/15/19届图森杯划水经历/</id>
    <published>2019-04-14T19:11:54.000Z</published>
    <updated>2019-04-15T17:48:55.791Z</updated>
    
    <content type="html"><![CDATA[<p>⚠️流水账警告⚠️</p><p>因为大三时间比较自由，我和两个关系比较好的同学报了图森杯（acm校赛选拔），然后因为没有准备所以变成了丢人现场……另外两个同学不想去，最后变成我一个人单刷(´･ω･`)喵喵喵？</p><p>不过单刷也有单刷的好处嘛，至少我划水不用有心里负担。体验体验这种感觉也是不错滴。</p><p>于是我愉快地睡过了上午的签到……（其实是前一天<s>打铁</s>只狼太晚了，唉破罐子破摔）好在让一个学长帮忙签到了，除了没有试机以外问题不大。</p><p>于是下午我佛系地到考场，结果还遇到些麻烦——平时刷oj用的都是java，intelliJ美滋滋，但是在这里只有eclipse能用，机房的intellij竟然连java环境都没有配好。想了想写c++还要用dev-c++那种手感，还是拿eclipse凑活。</p><p>（事实证明c++才是刷oj的王道啊）</p><h3 id="以下正式开始做题："><a href="#以下正式开始做题：" class="headerlink" title="以下正式开始做题："></a>以下正式开始做题：</h3><p>我慢悠悠地调试了一会，感觉ok了，于是看了一下提交界面，找了一下最简单的题——怎么看呢，就是提交人数最多的题——然后看了下是题E：portion（<a href="http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5973），嗯没什么好说的，正经签到题，写完就ac。其实我更好奇一些单词的意思，奈何机房的win7没法像mac一样查字典。" target="_blank" rel="noopener">http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5973），嗯没什么好说的，正经签到题，写完就ac。其实我更好奇一些单词的意思，奈何机房的win7没法像mac一样查字典。</a></p><p>接下来嘛，继续看大家做什么，我就跟着做什么。接下来的题也没啥意思，甚至很迷：</p><p>J题：Extended Twin Composite Number（<a href="http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5977），讲的是给定整数n，要求两个合数x和y，x+n=y。第一反应，让x=2*n就行了呗，一看x和y范围是1e18，n范围是1e9，这么做应该没问题。半信半疑地提交了，这么简单？？" target="_blank" rel="noopener">http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5977），讲的是给定整数n，要求两个合数x和y，x+n=y。第一反应，让x=2*n就行了呗，一看x和y范围是1e18，n范围是1e9，这么做应该没问题。半信半疑地提交了，这么简单？？</a></p><p>结果wa。我就纳闷了，什么？这难道不对嘛？立刻回去找答案看是不是我忽略了什么要求，看了一下sample，难道x要比n小？也没说呀。</p><p>emmm想了一会之后，决定先不管它，去做另一个热度很高的题：</p><p>G题：Postman（<a href="http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5975）。这题讲的是邮差在数轴上走，从邮局（坐标0）出发，到指定n个目的地送信的最短距离。每次最多携带k封信。" target="_blank" rel="noopener">http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5975）。这题讲的是邮差在数轴上走，从邮局（坐标0）出发，到指定n个目的地送信的最短距离。每次最多携带k封信。</a></p><p>这题真心不难。看了一下样例就心里有数，首先排序目的地，把正负分开算，然后从每一极向0分割出送信个数为k的区间，算作一次送信（即从绝对值大的一侧往里数k个而不是反过来），每个块最大的距离乘2就是这一个块送信的距离。</p><p>然后最后结果减去最大的那一极的绝对值，因为最后不需要回到邮局所以走到最远的地方就不用回来了，把刚才考虑的来回去掉一半。</p><p>满心欢喜地提交想着这下也差不多算不亏了，结果TLE。(´･ω･`)喵喵喵？</p><p>不会吧？排个序就超时？难道目标算法是线性的？可我看那么多人都过了这题呀……</p><h3 id="可达鸭眉头一皱发现事情并不简单。"><a href="#可达鸭眉头一皱发现事情并不简单。" class="headerlink" title="可达鸭眉头一皱发现事情并不简单。"></a>可达鸭眉头一皱发现事情并不简单。</h3><p>苦思冥想没有线性方案，我开始慌了。周围环境十分吵闹，开场已经一个多小时，我一度有退场的打算——太丢人了，我现在也才一个气球。</p><p>对面的小哥也是单刷，拿到一个气球之后默默地离开了。可能也是来体验一下的吧……</p><p>我又刷新了一下排行榜，没怎么变，做A题的人稍有增加。粗粗一看是二分图匹配，打扰了打扰了。匈牙利算法没背过呀，况且也不知道怎么套求权函数，不然大概要用dp？我只想到dfs+回溯的方法，怕是和八皇后一样复杂。害怕TLE就没做下去……也许这是本场比赛最大的失误吧。</p><p>转了一圈还是想从这两个简单题入手。</p><p>回到J题，我心里想的是可能真的有限制吧，虽然说是1e18但是限制1e9这样子，所以wa了？</p><p>那我不妨优化一下。</p><p>其实，如果n是偶数，那么我只要也取偶数，很容易就能达到目标。所以取x=4，y=n+4。</p><p>那么……奇数？</p><p>奇数不妨凑3的倍数？对三取余，剩下0那我就用6加，剩下1我就用8加，剩下2我就用4加，这样y肯定是三的倍数。</p><p>这样一写一提交，竟然ac了！这个是个振奋的信号，让我恢复精神继续怼G题了。</p><p>这个时候大概两个小时过去了。</p><p>然而，我接下来不管怎么怼G，始终发现：</p><h3 id="它就是没法改进了。"><a href="#它就是没法改进了。" class="headerlink" title="它就是没法改进了。"></a>它就是没法改进了。</h3><p>然而始终是TLE，心态又不好了。这个时候，周围有人的讨论、欢呼，此起彼伏的键盘声，以及换座位的响动，无一不在干扰心神。我佛了。。只好转战其他题目。</p><p>转了半天，发现这个B题：Even Number Theory（<a href="http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5970）还有点思路，于是开始写数字找规律。" target="_blank" rel="noopener">http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5970）还有点思路，于是开始写数字找规律。</a></p><p>问题是求偶数n的双阶乘的偶质数分解——偶质数分解是我自己口胡的词，就是一个由2和某奇数相乘的到的数——这样的最大分解有几个。n可达1e1000，看来肯定是数学优化问题，估计有公式。</p><p>双阶乘进行质因数分解，自然就是所有不大于它的偶数的偶质数因子个数相加咯。</p><p>我写了一下，找到初步规律：</p><p>偶数序列：2，4，6，8，10，12，14，16，18，20，22，24，26，28，30，……</p><p>分解个数：1，2，1，3，1，2，1，4，1，2，1，3，1，2，1，……</p><p>我立刻看到一个循环节，12131214……没多想就写了一个简单公式，每16就增加（1+2+1+3+1+2+1+4）个数，而不足16再加单独的和。</p><p>然后因为是1e1000，所以用BigInteger类来操作。幸运的是在code jam早就接触了这个类所以遇到的时候自然而然就想到了。</p><p>一切都看起来很完美，于是提交，wa！</p><p>我有些困惑，于是继续写数字——哇，32对应的不是4而是5诶（16对应的是4，而32=2*16，对所以应5），那就不是循环了。有些挫败的我安慰自己说，没关系反正提交次数不太重要，做出来就可以了。</p><p>于是我开始找规律。结果这个规律还真不明显……循环又不是，但是说它增长有规律我也是不信的。</p><p>干脆采取O(n)递推？可以，但是这么做……你确定不会爆栈？？时间复杂度肯定也会超的吧……</p><p>绝望……</p><p>后来又切了几道，然并卵。</p><p>就这样僵持到了结束也没有A出下一题……</p><h3 id="我好菜呀……"><a href="#我好菜呀……" class="headerlink" title="我好菜呀……"></a>我好菜呀……</h3><p>事后和咕咕的队友讨论了一下，队友拿着逻辑完全一致，但是用cpp写的代码一次就ac了，啥玩意……</p><p>有人说，java读输入要用这个：</p><p><code>Scanner sc = new Scanner (new BufferedInputStream(System.in));</code></p><p>然而当我想起要测试一下的时候，已经out of contest time了，于是TLE变成了永远的谜……</p><p>啥都别说了，我也太菜了……这样下去怎么打code jam呀……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;⚠️流水账警告⚠️&lt;/p&gt;
&lt;p&gt;因为大三时间比较自由，我和两个关系比较好的同学报了图森杯（acm校赛选拔），然后因为没有准备所以变成了丢人现场……另外两个同学不想去，最后变成我一个人单刷(´･ω･`)喵喵喵？&lt;/p&gt;
&lt;p&gt;不过单刷也有单刷的好处嘛，至少我划水不用有心里负
      
    
    </summary>
    
      <category term="competition" scheme="http://riroaki.github.io/categories/competition/"/>
    
    
  </entry>
  
  <entry>
    <title>bash自动化部署脚本</title>
    <link href="http://riroaki.github.io/2019/04/11/bash%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"/>
    <id>http://riroaki.github.io/2019/04/11/bash自动化部署脚本/</id>
    <published>2019-04-11T07:33:43.000Z</published>
    <updated>2019-04-13T09:17:48.359Z</updated>
    
    <content type="html"><![CDATA[<p>这是18年部署战争游戏时，写自动化部署脚本的一点经验。</p><p>感觉<code>shell</code>写起来和<code>python</code>有点像……</p><h3 id="登录服务器"><a href="#登录服务器" class="headerlink" title="登录服务器"></a>登录服务器</h3><p>开头需要指明使用<code>expect</code>执行脚本，因为这些指令不是<code>bash</code>自带的；</p><p>使用的是<code>spawn</code>指令发送<code>ssh</code>连接请求，然后用<code>expect</code>表示等待对方输出后再做反馈，是一个灵活的指令；</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#! /usr/bin/expect</span><span class="token comment" spellcheck="true"># 如果不想明文写在脚本里，可以设置为命令行参数</span><span class="token keyword">set</span> ipaddr <span class="token punctuation">[</span>lindex <span class="token variable">$argv</span> 0<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">set</span> username <span class="token punctuation">[</span>lindex <span class="token variable">$argv</span> 1<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">set</span> password <span class="token punctuation">[</span>lindex <span class="token variable">$argv</span> 2<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token function">timeout</span> 30 <span class="token comment" spellcheck="true"># 超时等待时间</span><span class="token keyword">set</span> prompt <span class="token string">"#"</span> <span class="token comment" spellcheck="true"># 这里是登陆成功的输出，linux简单用#匹配最后一个字符就可以</span>spawn <span class="token function">ssh</span> <span class="token variable">$username@</span><span class="token variable">$ipaddr</span><span class="token function">expect</span> <span class="token punctuation">{</span>    <span class="token string">"yes/no"</span> <span class="token punctuation">{</span> send <span class="token string">"yes\r"</span><span class="token punctuation">;</span> exp_continue <span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 继续执行expect语句</span>    <span class="token string">"*assword"</span> <span class="token punctuation">{</span> send <span class="token string">"<span class="token variable">$password</span>\r"</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 密码输入提示，忽略p大小写</span>    <span class="token string">"Permission denied*"</span> <span class="token punctuation">{</span> <span class="token keyword">exit</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 密码错误</span>    <span class="token function">timeout</span> <span class="token punctuation">{</span> puts <span class="token string">"Timed out during login"</span><span class="token punctuation">;</span> <span class="token keyword">exit</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">expect</span> <span class="token string">"<span class="token variable">$prompt</span>"</span>interact <span class="token comment" spellcheck="true"># 交还控制权</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入服务器后执行指令要用<code>send</code>指令。</p><p>结束时，如果把权限交还用户则需要用<code>interact</code>。</p><pre class="line-numbers language-shell"><code class="language-shell"># ...# 结束连接send "exit\r"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="文件指令"><a href="#文件指令" class="headerlink" title="文件指令"></a>文件指令</h3><p>文件主要使用<code>scp</code>指令进行本地和远程的传输。它是<code>seccure copy</code>的缩写，和<code>cp</code>比较区别在于，前者可以远程传输，而且是加密的；后者只能本机移动。</p><p>以文件上传到远程服务器为例，展示具体使用格式（下一步要输入密码）：</p><pre class="line-numbers language-shell"><code class="language-shell"># 复制单个文件scp $file $username@$ipaddr:$remote_folder# 递归复制整个目录scp -r $folder $username@$ipaddr:$remote_folder<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在脚本中，我们使用<code>expect</code>模块执行<code>scp</code>指令：</p><pre class="line-numbers language-shell"><code class="language-shell">#! /usr/bin/expect# 复制文件spawn scp $file $username@$ipaddr:$remote_folderexpect {  "yes/no" { send "yes\r"; exp_continue }  "*assword" { send "$password\r" }  timeout { exit }}# 等待传输结束expect "100%"expect eof<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对文件夹，只需要把上面<code>spawn scp $file $username…</code>改成<code>spawn scp -r $folder $username…</code>即可。</p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>需要提前在服务器修改nginx配置，并配置好本地python环境（gunicorn+flask等等）。</p><p>这个没什么好说的，常规启动服务即可。</p><pre class="line-numbers language-shell"><code class="language-shell">send "kill -9 $(pidof gunicorn)"send "nginx -s restart && nohup gunicorn -w 1 -b 127.0.0.1:8080 main:app -D"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有关部署的细节，详见<a href="https://riroaki.github.io/2019/03/28/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%EF%BC%9AFlask-gunicorn-nginx/">另一篇文章</a>。</p><p>总体代码：</p><pre class="line-numbers language-shell"><code class="language-shell">#! /usr/bin/expect# 如果不想明文写在脚本里，可以设置为命令行参数set ipaddr [lindex $argv 0];set username [lindex $argv 1];set password [lindex $argv 2];set folder "./war"set remote_folder "~/war"set timeout 30# 复制文件spawn scp $file $username@$ipaddr:$remote_folderexpect {  "yes/no" { send "yes\r"; exp_continue }  "*assword" { send "$password\r" }  timeout { exit }}# 等待传输结束expect "100%"expect eofspawn ssh $username@$ipaddrexpect {    "yes/no" { send "yes\r"; exp_continue } # 继续执行expect语句    "*assword" { send "$password\r" } # 密码输入提示，忽略p大小写    "Permission denied*" { exit } # 密码错误    timeout { puts "Timed out during login"; exit }}expect "#"# 运行send "kill -9 $(pidof gunicorn)\r"send "nginx -s restart && cd ~/war/ && nohup gunicorn -w 1 -b 127.0.0.1:8080 main:app -D\r"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是18年部署战争游戏时，写自动化部署脚本的一点经验。&lt;/p&gt;
&lt;p&gt;感觉&lt;code&gt;shell&lt;/code&gt;写起来和&lt;code&gt;python&lt;/code&gt;有点像……&lt;/p&gt;
&lt;h3 id=&quot;登录服务器&quot;&gt;&lt;a href=&quot;#登录服务器&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="back end" scheme="http://riroaki.github.io/categories/back-end/"/>
    
    
      <category term="shell" scheme="http://riroaki.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>简易知乎爬虫——Scrapy学习</title>
    <link href="http://riroaki.github.io/2019/04/11/ZhihuCrawler/"/>
    <id>http://riroaki.github.io/2019/04/11/ZhihuCrawler/</id>
    <published>2019-04-10T19:52:18.000Z</published>
    <updated>2019-04-17T22:28:10.533Z</updated>
    
    <content type="html"><![CDATA[<p>这一次是一个简单的课堂作业，爬取知乎用户的信息以及回答。</p><p>顺带地入门了一下Scrapy（和一点点的Selenium）框架。</p><p>首先列一下代码地址：<a href="https://github.com/Riroaki/ZhihuCrawler" target="_blank" rel="noopener">https://github.com/Riroaki/ZhihuCrawler</a></p><p>项目来自掘金一个大佬代码的魔改@崔庆才，本文的主要内容也是参考大大的教程写出来的。</p><p>具体介绍和实现结合scrapy的各个模块讲解。</p><p>首先贴出scrapy的总体结构：</p><p><img src="/2019/04/11/ZhihuCrawler/structure.png" alt></p><p>首先介绍一下Scrapy这一个框架。它就像一个分工明确、协调合作的团队，所有人各司其职：</p><ul><li><strong>Engine</strong>。引擎，框架的控制核心，处理整个流程。</li><li><strong>Item</strong>。项目，它定义了爬取结果的数据结构，爬取的数据会被赋值成该Item对象。</li><li><strong>Scheduler</strong>。调度器，接受引擎发过来的请求并将其加入队列中，在引擎再次请求（这个时候是分配任务要实作了）的时候将请求提供给引擎。</li><li><strong>Downloader</strong>。下载器，下载网页内容，并将网页内容返回给Spider。</li><li><strong>Spiders</strong>。蜘蛛，定义了爬取的逻辑和网页的解析规则，它主要负责解析响应并生成提取结果，交给Item pipeline保存到Item对象，并声称新的请求。</li><li><strong>Item Pipeline</strong>。项目管道，负责处理由Spider从网页中抽取的项目，它的主要任务是清洗、验证和存储数据。</li><li><strong>Downloader Middlewares</strong>。下载器中间件，位于引擎和下载器之间的钩子框架，主要处理引擎与下载器之间的请求及响应。</li><li><strong>Spider Middlewares</strong>。蜘蛛中间件，位于引擎和蜘蛛之间的钩子框架，主要处理蜘蛛输入的响应和输出的结果及新的请求。</li></ul><h3 id="Downloader-Middleware"><a href="#Downloader-Middleware" class="headerlink" title="Downloader Middleware"></a>Downloader Middleware</h3><p>冲锋陷阵的小兵～直接面向页面，处理User-Agent，重定向，代理，Cookies，处理失败状态，简言之就是所有在具体爬取网页遇到的各种鸡毛蒜皮但是又十分重要的问题都是由它全权负责～</p><p>核心方法有三：</p><ul><li><code>process_request(request, spider)</code><ul><li>请求被执行前调用的方法，可以在里面修改User-Agent和</li></ul></li><li><code>process_response(request, reesponse, spider)</code><ul><li>请求结果返回后调用的方法。</li></ul></li><li><code>process_exception(request, exception, spider)</code><ul><li>处理异常使用的方法。</li></ul></li></ul><p>像其他组件一样，如果不自定义，则会使用默认配置；如果需要自定义，实现一个方法即可，不必三个都修改。</p><h3 id="Spiders"><a href="#Spiders" class="headerlink" title="Spiders"></a>Spiders</h3><p>爬虫的核心逻辑，相当于</p><p>做的事情主要是：</p><ul><li>向网页发出请求内容，并设置回调函数</li><li>在回调函数里面处理页面内容，形成Item对象</li></ul><hr><p>（待更新）</p><h3 id="Item-Pipeline"><a href="#Item-Pipeline" class="headerlink" title="Item Pipeline"></a>Item Pipeline</h3><h3 id="Downloader"><a href="#Downloader" class="headerlink" title="Downloader"></a>Downloader</h3><h3 id="Downloader-Middlewares"><a href="#Downloader-Middlewares" class="headerlink" title="Downloader Middlewares"></a>Downloader Middlewares</h3><h3 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这一次是一个简单的课堂作业，爬取知乎用户的信息以及回答。&lt;/p&gt;
&lt;p&gt;顺带地入门了一下Scrapy（和一点点的Selenium）框架。&lt;/p&gt;
&lt;p&gt;首先列一下代码地址：&lt;a href=&quot;https://github.com/Riroaki/ZhihuCrawler&quot; t
      
    
    </summary>
    
      <category term="front end" scheme="http://riroaki.github.io/categories/front-end/"/>
    
    
      <category term="web crawler" scheme="http://riroaki.github.io/tags/web-crawler/"/>
    
      <category term="scrapy" scheme="http://riroaki.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>Easy Painter-iOS绘图实例</title>
    <link href="http://riroaki.github.io/2019/04/11/EasyPainter-iOS%E7%BB%98%E5%9B%BE%E5%AE%9E%E4%BE%8B/"/>
    <id>http://riroaki.github.io/2019/04/11/EasyPainter-iOS绘图实例/</id>
    <published>2019-04-10T19:46:41.000Z</published>
    <updated>2019-04-14T19:10:06.046Z</updated>
    
    <content type="html"><![CDATA[<p>这是去年刚接触iOS编程的时候，入门做的一点小项目——第一个是一个支持多种颜色的画板，第二个是玩纪念碑谷2之后，模仿每一关最后的部分实现的画画功能。</p><a id="more"></a><p>先看一下效果图：</p><h3 id="画板"><a href="#画板" class="headerlink" title="画板"></a>画板</h3><p>可以实现多种颜色和阴影，清空画版、分享绘画等等。</p><p><img src="/2019/04/11/EasyPainter-iOS绘图实例/board.JPG" alt></p><h3 id="纪念碑谷"><a href="#纪念碑谷" class="headerlink" title="纪念碑谷"></a>纪念碑谷</h3><p>很直观的效果，画笔有多种样式：</p><ul><li>直接绘制，表现为对称的白色线条（这是纪念碑谷中的效果——除了没有发光以外）</li></ul><p><img src="/2019/04/11/EasyPainter-iOS绘图实例/white.png" alt></p><ul><li>后来觉得线条太单调，于是增加了绘制树叶</li></ul><p><img src="/2019/04/11/EasyPainter-iOS绘图实例/tree.png" alt></p><ul><li>我又加入了多种颜色～</li></ul><p><img src="/2019/04/11/EasyPainter-iOS绘图实例/colorful.png" alt></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>占坑，待补充。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是去年刚接触iOS编程的时候，入门做的一点小项目——第一个是一个支持多种颜色的画板，第二个是玩纪念碑谷2之后，模仿每一关最后的部分实现的画画功能。&lt;/p&gt;
    
    </summary>
    
      <category term="front end" scheme="http://riroaki.github.io/categories/front-end/"/>
    
    
      <category term="iOS" scheme="http://riroaki.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>NLP学习日记1——Set Expan</title>
    <link href="http://riroaki.github.io/2019/04/11/NLP-1-Set-Expan/"/>
    <id>http://riroaki.github.io/2019/04/11/NLP-1-Set-Expan/</id>
    <published>2019-04-10T19:02:10.000Z</published>
    <updated>2019-04-15T12:34:32.428Z</updated>
    
    <content type="html"><![CDATA[<p>说来惭愧，其实这是上个学期初实验室的老师布置下来的任务，直到今天才开始认真接触。</p><p>NLP应当是未来大势之一——在视觉、语音等方面已经能够做到炉火纯青的ML和DL，在NLP领域进展却比较慢，可以说是在日渐饱和的AI领域为数不多的未被探索完全的领域了。</p><p>词集拓展的概念和做法来自一篇论文：《SetExpan- Corpus-Based Set Expansion via Context Feature Selection and Rank Ensemble》，指的是根据一些词集种子，从语料库中摘取同一类的词语。作者采用的是英文词语，源代码在<a href="https://github.com/mickeystroller/SetExpan" target="_blank" rel="noopener">这里</a>。</p><p>这个方法说来简单，但是实际做起来并不容易。简单的上下文提取和匹配如果做不好，很容易出现语义漂移的现象，即同一个上下文抽取的词却不一样。</p><p>此外，中文本身的分词难度也为项目带来困难。</p><p>而且分类是重要的一步，为之后建立知识图谱、挖掘联系等等都具有基础性意义。</p><p>那么首先我们来分析一下论文讲的方法。</p><h2 id="理论部分"><a href="#理论部分" class="headerlink" title="理论部分"></a>理论部分</h2><p>占坑，待补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说来惭愧，其实这是上个学期初实验室的老师布置下来的任务，直到今天才开始认真接触。&lt;/p&gt;
&lt;p&gt;NLP应当是未来大势之一——在视觉、语音等方面已经能够做到炉火纯青的ML和DL，在NLP领域进展却比较慢，可以说是在日渐饱和的AI领域为数不多的未被探索完全的领域了。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="machine learning" scheme="http://riroaki.github.io/categories/machine-learning/"/>
    
    
      <category term="NLP" scheme="http://riroaki.github.io/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>41.First Missing Positive</title>
    <link href="http://riroaki.github.io/2019/04/11/41-First-Missing-Positive/"/>
    <id>http://riroaki.github.io/2019/04/11/41-First-Missing-Positive/</id>
    <published>2019-04-10T18:36:26.000Z</published>
    <updated>2019-04-10T18:46:37.921Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an unsorted integer array, find the smallest missing positive integer.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: [1,2,0]Output: 3</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: [3,4,-1,1]Output: 2</code></pre><p><strong>Example 3:</strong></p><pre><code>Input: [7,8,9,11,12]Output: 1</code></pre><p><strong>Note:</strong></p><p>Your algorithm should run in <em>O</em>(<em>n</em>) time and uses constant extra space.</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="联想merge-interval"><a href="#联想merge-interval" class="headerlink" title="联想merge interval"></a>联想merge interval</h4><p>虽然不是常数空间的算法，但是时间复杂度是线性的。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">Interval</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>        <span class="token function">Interval</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            left <span class="token operator">=</span> l<span class="token punctuation">;</span>            right <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">firstMissingPositive</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Interval<span class="token operator">></span> intervalList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>intervalList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                intervalList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Interval</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                Interval tmp <span class="token operator">=</span> intervalList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>intervalList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    tmp<span class="token punctuation">.</span>right<span class="token operator">++</span><span class="token punctuation">;</span>                    intervalList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>intervalList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> num<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>intervalList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> intervalList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> intervalList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>intervalList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(n)$</li></ul><h4 id="常数空间的做法：待补充"><a href="#常数空间的做法：待补充" class="headerlink" title="常数空间的做法：待补充"></a>常数空间的做法：待补充</h4>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given an unsorted integer array, find the smallest missing positive integer.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://riroaki.github.io/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://riroaki.github.io/tags/array/"/>
    
      <category term="interval" scheme="http://riroaki.github.io/tags/interval/"/>
    
  </entry>
  
  <entry>
    <title>40.Combination Sum II</title>
    <link href="http://riroaki.github.io/2019/04/11/40-Combination-Sum-II/"/>
    <id>http://riroaki.github.io/2019/04/11/40-Combination-Sum-II/</id>
    <published>2019-04-10T18:28:44.000Z</published>
    <updated>2019-04-10T18:35:46.336Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p><p>Each number in <code>candidates</code> may only be used <strong>once</strong> in the combination.</p><p><strong>Note:</strong></p><ul><li>All numbers (including <code>target</code>) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: candidates = [10,1,2,7,6,1,5], target = 8,A solution set is:[  [1, 7],  [1, 2, 5],  [2, 6],  [1, 1, 6]]</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: candidates = [2,5,2,1,2], target = 5,A solution set is:[  [1,2,2],  [5]]</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="回溯-dfs"><a href="#回溯-dfs" class="headerlink" title="回溯+dfs"></a>回溯+dfs</h4><p>和上题类似但是允许重复元素使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res<span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">backTrack</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">backTrack</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> curr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> index <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            curr<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">backTrack</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            curr<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^{m/avg(n)})$</li><li>空间复杂度：$O(mn^{m/avg(n)})$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a collection of candidate numbers (&lt;code&gt;candidates&lt;/code&gt;) and a target number (&lt;code&gt;target&lt;/code&gt;), find all unique combinations in &lt;code&gt;candidates&lt;/code&gt; where the candidate numbers sums to &lt;code&gt;target&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each number in &lt;code&gt;candidates&lt;/code&gt; may only be used &lt;strong&gt;once&lt;/strong&gt; in the combination.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All numbers (including &lt;code&gt;target&lt;/code&gt;) will be positive integers.&lt;/li&gt;
&lt;li&gt;The solution set must not contain duplicate combinations.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://riroaki.github.io/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://riroaki.github.io/tags/array/"/>
    
      <category term="backtracking" scheme="http://riroaki.github.io/tags/backtracking/"/>
    
      <category term="dfs" scheme="http://riroaki.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>39.Combination Sum</title>
    <link href="http://riroaki.github.io/2019/04/11/39-Combination-Sum/"/>
    <id>http://riroaki.github.io/2019/04/11/39-Combination-Sum/</id>
    <published>2019-04-10T18:23:04.000Z</published>
    <updated>2019-04-10T18:28:14.727Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a <strong>set</strong> of candidate numbers (<code>candidates</code>) <strong>(without duplicates)</strong> and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p><p>The <strong>same</strong> repeated number may be chosen from <code>candidates</code> unlimited number of times.</p><p><strong>Note:</strong></p><ul><li>All numbers (including <code>target</code>) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: candidates = [2,3,6,7], target = 7,A solution set is:[  [7],  [2,2,3]]</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: candidates = [2,3,5], target = 8,A solution set is:[  [2,2,2,2],  [2,3,3],  [3,5]]</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="回溯-dfs"><a href="#回溯-dfs" class="headerlink" title="回溯+dfs"></a>回溯+dfs</h4><p>理论上有2的n种可能；</p><p>排序保证unique。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">combinationSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>candidates <span class="token operator">==</span> null <span class="token operator">||</span> candidates<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> tmp <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> target <span class="token operator">-</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> vec <span class="token operator">:</span> tmp<span class="token punctuation">)</span>                      vec<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(2^n)$</li><li>空间复杂度：$O(2^n)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a &lt;strong&gt;set&lt;/strong&gt; of candidate numbers (&lt;code&gt;candidates&lt;/code&gt;) &lt;strong&gt;(without duplicates)&lt;/strong&gt; and a target number (&lt;code&gt;target&lt;/code&gt;), find all unique combinations in &lt;code&gt;candidates&lt;/code&gt; where the candidate numbers sums to &lt;code&gt;target&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;same&lt;/strong&gt; repeated number may be chosen from &lt;code&gt;candidates&lt;/code&gt; unlimited number of times.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All numbers (including &lt;code&gt;target&lt;/code&gt;) will be positive integers.&lt;/li&gt;
&lt;li&gt;The solution set must not contain duplicate combinations.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://riroaki.github.io/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://riroaki.github.io/tags/array/"/>
    
      <category term="backtracking" scheme="http://riroaki.github.io/tags/backtracking/"/>
    
      <category term="dfs" scheme="http://riroaki.github.io/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>38.Count and Say</title>
    <link href="http://riroaki.github.io/2019/04/11/38-Count-and-Say/"/>
    <id>http://riroaki.github.io/2019/04/11/38-Count-and-Say/</id>
    <published>2019-04-10T18:18:58.000Z</published>
    <updated>2019-04-10T18:22:06.002Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>The count-and-say sequence is the sequence of integers with the first five terms as following:</p><pre><code>1.     12.     113.     214.     12115.     111221</code></pre><p><code>1</code> is read off as <code>&quot;one 1&quot;</code> or <code>11</code>.<br><code>11</code> is read off as <code>&quot;two 1s&quot;</code> or <code>21</code>.<br><code>21</code> is read off as <code>&quot;one 2</code>, then <code>one 1&quot;</code> or <code>1211</code>.</p><p>Given an integer <em>n</em> where 1 ≤ <em>n</em> ≤ 30, generate the <em>n</em>th term of the count-and-say sequence.</p><p>Note: Each term of the sequence of integers will be represented as a string.</p> <a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: 1Output: &quot;1&quot;</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: 4Output: &quot;1211&quot;</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="常规做法"><a href="#常规做法" class="headerlink" title="常规做法"></a>常规做法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">countAndSay</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String s <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> count <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        s <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// System.out.println(s);</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(n)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;The count-and-say sequence is the sequence of integers with the first five terms as following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.     1
2.     11
3.     21
4.     1211
5.     111221
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;1&lt;/code&gt; is read off as &lt;code&gt;&amp;quot;one 1&amp;quot;&lt;/code&gt; or &lt;code&gt;11&lt;/code&gt;.&lt;br&gt;&lt;code&gt;11&lt;/code&gt; is read off as &lt;code&gt;&amp;quot;two 1s&amp;quot;&lt;/code&gt; or &lt;code&gt;21&lt;/code&gt;.&lt;br&gt;&lt;code&gt;21&lt;/code&gt; is read off as &lt;code&gt;&amp;quot;one 2&lt;/code&gt;, then &lt;code&gt;one 1&amp;quot;&lt;/code&gt; or &lt;code&gt;1211&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Given an integer &lt;em&gt;n&lt;/em&gt; where 1 ≤ &lt;em&gt;n&lt;/em&gt; ≤ 30, generate the &lt;em&gt;n&lt;/em&gt;th term of the count-and-say sequence.&lt;/p&gt;
&lt;p&gt;Note: Each term of the sequence of integers will be represented as a string.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://riroaki.github.io/categories/leetcode/"/>
    
    
      <category term="easy" scheme="http://riroaki.github.io/tags/easy/"/>
    
      <category term="string" scheme="http://riroaki.github.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>36.Valid Sudoku</title>
    <link href="http://riroaki.github.io/2019/04/11/36-Valid-Sudoku/"/>
    <id>http://riroaki.github.io/2019/04/11/36-Valid-Sudoku/</id>
    <published>2019-04-10T18:13:34.000Z</published>
    <updated>2019-04-10T18:17:32.351Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated <strong>according to the following rules</strong>:</p><ol><li>Each row must contain the digits <code>1-9</code> without repetition.</li><li>Each column must contain the digits <code>1-9</code> without repetition.</li><li>Each of the 9 <code>3x3</code> sub-boxes of the grid must contain the digits <code>1-9</code> without repetition.</li></ol><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="img"><br>A partially filled sudoku which is valid.</p><p>The Sudoku board could be partially filled, where empty cells are filled with the character <code>&#39;.&#39;</code>.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input:[  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]Output: true</code></pre><p><strong>Example 2:</strong></p><pre><code>Input:[  [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]Output: falseExplanation: Same as Example 1, except with the 5 in the top left corner being     modified to 8. Since there are two 8&#39;s in the top left 3x3 sub-box, it is invalid.</code></pre><p><strong>Note:</strong></p><ul><li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li><li>Only the filled cells need to be validated according to the mentioned rules.</li><li>The given board contain only digits <code>1-9</code> and the character <code>&#39;.&#39;</code>.</li><li>The given board size is always <code>9x9</code>.</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="分批验证"><a href="#分批验证" class="headerlink" title="分批验证"></a>分批验证</h4><p>按行、列、九宫格验证1～9有且仅有一个即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidSudoku</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> grid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 分批验证9行，9列以及九宫格块</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmpRowStart <span class="token operator">=</span> i <span class="token operator">-</span> i <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmpColStart <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">[</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                row<span class="token punctuation">[</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>col<span class="token punctuation">[</span>board<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                col<span class="token punctuation">[</span>board<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>tmpRowStart <span class="token operator">+</span> j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tmpColStart <span class="token operator">+</span> j <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>board<span class="token punctuation">[</span>tmpRowStart <span class="token operator">+</span> j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tmpColStart <span class="token operator">+</span> j <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                grid<span class="token punctuation">[</span>board<span class="token punctuation">[</span>tmpRowStart <span class="token operator">+</span> j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tmpColStart <span class="token operator">+</span> j <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(n)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated &lt;strong&gt;according to the following rules&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Each row must contain the digits &lt;code&gt;1-9&lt;/code&gt; without repetition.&lt;/li&gt;
&lt;li&gt;Each column must contain the digits &lt;code&gt;1-9&lt;/code&gt; without repetition.&lt;/li&gt;
&lt;li&gt;Each of the 9 &lt;code&gt;3x3&lt;/code&gt; sub-boxes of the grid must contain the digits &lt;code&gt;1-9&lt;/code&gt; without repetition.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png&quot; alt=&quot;img&quot;&gt;&lt;br&gt;A partially filled sudoku which is valid.&lt;/p&gt;
&lt;p&gt;The Sudoku board could be partially filled, where empty cells are filled with the character &lt;code&gt;&amp;#39;.&amp;#39;&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://riroaki.github.io/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://riroaki.github.io/tags/array/"/>
    
      <category term="medium" scheme="http://riroaki.github.io/tags/medium/"/>
    
  </entry>
  
  <entry>
    <title>35.Search Insert Position</title>
    <link href="http://riroaki.github.io/2019/04/11/35-Search-Insert-Position/"/>
    <id>http://riroaki.github.io/2019/04/11/35-Search-Insert-Position/</id>
    <published>2019-04-10T18:10:39.000Z</published>
    <updated>2019-04-10T18:12:59.539Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><p>You may assume no duplicates in the array.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: [1,3,5,6], 5Output: 2</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: [1,3,5,6], 2Output: 1</code></pre><p><strong>Example 3:</strong></p><pre><code>Input: [1,3,5,6], 7Output: 4</code></pre><p><strong>Example 4:</strong></p><pre><code>Input: [1,3,5,6], 0Output: 0</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><p>啥也别说了，就这样。</p><pre class="line-numbers language-python"><code class="language-python">public int searchInsert<span class="token punctuation">(</span>int<span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> int target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    int lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        int mi <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mi<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>            lo <span class="token operator">=</span> mi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            hi <span class="token operator">=</span> mi<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lo<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(log(n))​$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.&lt;/p&gt;
&lt;p&gt;You may assume no duplicates in the array.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://riroaki.github.io/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://riroaki.github.io/tags/array/"/>
    
      <category term="easy" scheme="http://riroaki.github.io/tags/easy/"/>
    
      <category term="binary search" scheme="http://riroaki.github.io/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>34.Find First and Last Position of Element in Sorted Array</title>
    <link href="http://riroaki.github.io/2019/04/11/34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/"/>
    <id>http://riroaki.github.io/2019/04/11/34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/</id>
    <published>2019-04-10T18:03:56.000Z</published>
    <updated>2019-04-10T18:09:47.409Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p><p>Your algorithm’s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p><p>If the target is not found in the array, return <code>[-1, -1]</code>.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: nums = [5,7,7,8,8,10], target = 8Output: [3,4]</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: nums = [5,7,7,8,8,10], target = 6Output: [-1,-1]</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>找<code>target + 1</code>的下标，再减1即为<code>target</code>的最后一个下标。</p><ol><li>元素可能不存在。</li><li>找到的元素可能和<code>target</code>相等。</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">searchRange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token function">bs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">bs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> second <span class="token operator">=</span> <span class="token function">bs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token operator">?</span> second <span class="token operator">:</span> second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">bs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mi <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mi<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>            lo <span class="token operator">=</span> mi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            hi <span class="token operator">=</span> mi<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lo<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(log(n))$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given an array of integers &lt;code&gt;nums&lt;/code&gt; sorted in ascending order, find the starting and ending position of a given &lt;code&gt;target&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;Your algorithm’s runtime complexity must be in the order of &lt;em&gt;O&lt;/em&gt;(log &lt;em&gt;n&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;If the target is not found in the array, return &lt;code&gt;[-1, -1]&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://riroaki.github.io/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://riroaki.github.io/tags/array/"/>
    
      <category term="medium" scheme="http://riroaki.github.io/tags/medium/"/>
    
      <category term="binary serch" scheme="http://riroaki.github.io/tags/binary-serch/"/>
    
  </entry>
  
  <entry>
    <title>ML学习日记6——深度学习入门</title>
    <link href="http://riroaki.github.io/2019/04/09/ML-6-Intro-to-Deep-Learning/"/>
    <id>http://riroaki.github.io/2019/04/09/ML-6-Intro-to-Deep-Learning/</id>
    <published>2019-04-09T09:09:50.000Z</published>
    <updated>2019-04-10T17:51:59.440Z</updated>
    
    <content type="html"><![CDATA[<p>这一课前半部分是在吹水……</p><a id="more"></a><h2 id="DL的前世今生"><a href="#DL的前世今生" class="headerlink" title="DL的前世今生"></a>DL的前世今生</h2><p>1958到1980年dl的发展。1980年的多层网络其实和现在的DNN已经差不多了。区别在于RBM initialization。</p><p>然而过去的研究表示dl并没有很好的效果……层数多的时候可能效果反而差。</p><p>这个模型，当时看来只是石头汤的石头罢了——其实并无大用，甚至还炒作出来许多虚假人工智能的搞笑的故事（和现在似曾相识？哈哈）。</p><p>2009年GPU是一个关键突破，因为加速了deep learning的过程。</p><p>11年语音辨识使用了这项技术，得到了比较好的结果；12年用在图像识别。这项技术终于火了起来。</p><h2 id="正片开始"><a href="#正片开始" class="headerlink" title="正片开始"></a>正片开始</h2><p>回到上一次的内容，DL其实是把许多小的神经通过sigmoid、softmax等等方法连接起来。</p><p>每一层都有自己的bias和weight。</p><p>最简单的连接方式是全连接前向传播神经网络（<em>Fully Connected FeedForward Network</em>）。</p><p>给定了一个网络结构，而没有确定具体参数，那么就是一个<em>function set</em>；假如参数和结构都确定了，那它就是一个函数。</p><p>我们在一般机器学习过程中，所做的事情也是先确定结构——<em>function set</em>，然后通过梯度下降找到最好的参数。</p><p>神经网络结构：</p><p>input layer、deep layer（指的是中间的许多隐层）、output layer</p><p>network具体做的事情其实就是矩阵运算，如图：</p><p><img src="/2019/04/09/ML-6-Intro-to-Deep-Learning/matrix.png" alt></p><p>写成矩阵运算的形式，这样就可以可以使用GPU执行并行计算加速计算过程。</p><p><img src="/2019/04/09/ML-6-Intro-to-Deep-Learning/matrix2.png" alt></p><h3 id="mnist——手写数字辨识"><a href="#mnist——手写数字辨识" class="headerlink" title="mnist——手写数字辨识"></a>mnist——手写数字辨识</h3><p>input：每个图片的矩阵</p><p>output：10维的one-hot向量</p><ol><li><p>首先，需要决定一个好的<em>function set</em>，即神经网络的结构：</p><ul><li>这一步需要trial&amp;error+intuition</li><li>有一些技巧可以让机器自己确定层数，但是应用暂时不广泛。</li></ul></li><li><p>接下来，找到好的<em>feature</em>，即<em>feature engineering</em>：</p><ul><li>有很多特征不是那么直觉，所以也很难。</li></ul></li><li><p>评估：计算交叉熵</p></li><li>调整：使用梯度下降</li></ol><h3 id="backpropagation反向传播（参数更新过程）"><a href="#backpropagation反向传播（参数更新过程）" class="headerlink" title="backpropagation反向传播（参数更新过程）"></a>backpropagation反向传播（参数更新过程）</h3><p>原理：微分的链式法则。</p><ul><li>每一个神经元更新参数的时候，需要计算<em>loss</em>函数对它的偏微分；</li><li>计算的时候，根据链式法则，继续向下一层寻找与本神经元输出有关的变量的偏微分；</li><li>每一项都依赖下一层，所以计算时从最后向前进行，相当于建立了反向的神经网络进行计算。</li></ul><p><img src="/2019/04/09/ML-6-Intro-to-Deep-Learning/backpropagation.png" alt></p><p>总结图如下：</p><p><img src="/2019/04/09/ML-6-Intro-to-Deep-Learning/summary.png" alt></p><h2 id="Keras实战——mnist"><a href="#Keras实战——mnist" class="headerlink" title="Keras实战——mnist"></a>Keras实战——mnist</h2><p>Keras集成了tensorflow和theano的库，是在这两个基础库上的更好用的接口。</p><p>在希腊语里面，Keras意味着horn——牛角～</p><p>而mnist作为深度学习界的hello world，自然在这里要写一下：</p><p>记住，深度学习和机器学习一样，分成三个步骤：</p><ul><li>确定模型（网络结构）、评估模型（损失函数）、改进模型（挑出最优）</li></ul><p>需要注意的是，tensorflow和keras经过这两年的时间已经有所变化，视频里面的api已经不能用了。</p><p>现在的2.0版本tf和keras竟然会有冲突（<code>AttributeError: module &#39;tensorflow&#39; has no attribute &#39;get_default_graph&#39;</code>），让人很是无语。</p><h3 id="处理输入"><a href="#处理输入" class="headerlink" title="处理输入"></a>处理输入</h3><p>这里需要注意，首先x的data是60000个28*28的0/1矩阵，表示这个格子有没有上色；y的data是60000个0～9的数字，训练前需要变动：</p><ul><li>把x的每个case展平成一个vector（因为特征是一维的）</li><li>把y变成one-hot格式，每个case用一个10维向量表示，原来值对应位置的那一维是1，其余为0。这在NLP中也很常见，主要是用来区分不同的类 ，而原来的数值表示类会有不好的影响（之前在讨论分类器时有涉及到）</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras <span class="token keyword">import</span> Sequential<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> mnist<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Dense<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>utils <span class="token keyword">import</span> to_categorical<span class="token comment" spellcheck="true"># Load data</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token operator">=</span> mnist<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Flatten input 28 * 28 matrix into a 784 vector</span>x_train <span class="token operator">=</span> x_train<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span>x_test<span class="token operator">=</span> x_test<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Make y into one-hot encoding</span>y_train <span class="token operator">=</span> to_categorical<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>y_test <span class="token operator">=</span> to_categorical<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设计模型"><a href="#设计模型" class="headerlink" title="设计模型"></a>设计模型</h3><p>这里模型是参考视频中的定义，用了最基本的<em>Sequential</em>模型。</p><p><em>units</em>表示输出的尺寸，和<em>input_dim</em>对应；除了第一层需要定义输入尺寸以外，后面都不需要声明（和上一层的输出尺寸是一样的）。</p><p>使用了<em>sigmoid</em>和<em>softmax</em>用来做层间整合，交叉熵作为<em>loss</em>函数，梯度下降方法的学习率调整使用<em>adam</em>方法，<em>accuracy</em>表示度量方式——一般都会使用这一个选项。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Build model</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>input_dim<span class="token operator">=</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span> units<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Activation function could also be:</span><span class="token comment" spellcheck="true"># softplus, softsign, relu, tanhm hard_sigmoid, linear</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Config loss function and gradient descent method</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'categorical_crossentropy'</span><span class="token punctuation">,</span>             optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span>             metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p><code>batch-size</code>表示每次随机选取用于梯度下降的样本数，<code>epochs</code>表示所有样本的迭代次数。</p><h4 id="为什么不计算全部的样本进行迭代？"><a href="#为什么不计算全部的样本进行迭代？" class="headerlink" title="为什么不计算全部的样本进行迭代？"></a>为什么不计算全部的样本进行迭代？</h4><p>这个和之前讨论的BGD与SGD之争如出一辙，其实还是效率和质量的考虑。</p><p>“天下武功，唯快不破”，虽然BGD更为稳定，但是架不住SGD快呀！但是SGD每次只选一个case，随机性太大；所以就使用折衷方案，把所有case分成几个小批量（<em>mini-batch</em>），每次进行一个<em>batch</em>的<em>loss</em>计算，进行一次update。</p><p>另一方面，小批量的梯度下降能够保证一定的随机性，比批量的方法更容易跳出局部极小值。</p><p>而当所有的<em>mini-batch</em>都被计算完，就叫做一个<em>epoch</em>。</p><blockquote><p>虽然一个<em>epoch</em>里面计算<em>loss</em>的次数是一样的，但是可以实现并行计算的加速（也就是说可以同时计算多个case的loss），所以选择适中的<code>batch-size</code>实际效果比<code>batch-size</code>等于1的情况要好。</p><p>具体并行计算加速其实并没有那么复杂：把多个x的向量合并成一个matrix再一起运算，在GPU中矩阵运算得到较好的优化，所以得到了加速。</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Train model</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="预测结果"><a href="#预测结果" class="headerlink" title="预测结果"></a>预测结果</h3><p>可以直接计算准确率：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Loss and accuraty</span>score <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Total loss on testing set:'</span><span class="token punctuation">,</span> score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Accuracy of testing set:'</span><span class="token punctuation">,</span> score<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>10000/10000 [==============================] - 0s 40us/sample - loss: 0.1367 - accuracy: 0.9589Total loss on testing set: 0.13666086520701648Accuracy of testing set: 0.9589</code></pre><p>也可以选择导出结果（不知道正确答案是多少的场景）：</p><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>因为采取的小批量梯度下降具有一定的随机性，所以准确率和结果每次都会有一点差别。</li></ul><p>～本文完～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一课前半部分是在吹水……&lt;/p&gt;
    
    </summary>
    
      <category term="machine learning" scheme="http://riroaki.github.io/categories/machine-learning/"/>
    
    
      <category term="deep learning" scheme="http://riroaki.github.io/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>ML学习日记5——从贝叶斯到逻辑回归</title>
    <link href="http://riroaki.github.io/2019/04/09/ML-5-Logistic-Regression/"/>
    <id>http://riroaki.github.io/2019/04/09/ML-5-Logistic-Regression/</id>
    <published>2019-04-09T05:15:51.000Z</published>
    <updated>2019-04-09T09:07:54.083Z</updated>
    
    <content type="html"><![CDATA[<p>继续上一部分讲解贝叶斯算法的内容，这一次研究一下逻辑回归的分类算法。</p><p>虽然是叫做回归，但是本质是分类，只不过这里的分类方法和线性回归非常相似。</p><p>⚠️前方多图杀猫⚠️    ⚠️前方数学警告⚠️</p><a id="more"></a><h3 id="从二元贝叶斯模型说起"><a href="#从二元贝叶斯模型说起" class="headerlink" title="从二元贝叶斯模型说起"></a>从二元贝叶斯模型说起</h3><p>我们首先看一下如果是<strong>二分类问题</strong>，使用贝叶斯模型的做法：</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/1.PNG" alt></p><p>可以顺着途中的公式变形，得到$P(C1|x)=\sigma(z)$，z是一个比较复杂的变量，而这个函数又叫<em>sigmoid</em>函数，特点是对正的输入，返回的值在0.5到1之间，对负数返回的值在0到0.5之间，而且单调递增。</p><p>中间过程略去，我们可以用x和其他参数表示z（上面部分）：</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/2.PNG" alt></p><p>当我们让协方差矩阵相等的时候（为什么要这么做？一方面是效率的考虑，另一方面就是在某些地方测试得到的结果比原来的好（<strong>这又是为什么？</strong>那我就真的不知道了）），可以化简这个式子，从而得到$z=wx+b$这样一个简洁的形式。</p><p>是不是很眼熟？这不就是线性回归的模型嘛！</p><p>事实上，我们这么操作之后就会发现，之前我们所求的贝叶斯的各个参数其实不过是为了得到概率的线性拟合参数w和b——既然如此，为什么不直接求这些参数？那样做岂不是更加简洁。</p><p>既然如此，我们就顺着这条路探究下去。</p><h3 id="有了新模型，如何评价模型的好坏？"><a href="#有了新模型，如何评价模型的好坏？" class="headerlink" title="有了新模型，如何评价模型的好坏？"></a>有了新模型，如何评价模型的好坏？</h3><p>依然是对训练样本做最大似然估计，即选择使得现有数据的分类可能性最大的模型，如下图。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/3.PNG" alt></p><p>这里实现两个等价的变换：</p><ul><li><p>做符号的等价变化：当我们要求l的值最大，等价于求$-ln(l)$的值最小——取对数是一个技巧，用于将乘法转化为加法。</p></li><li><p>令$\hat{y}^n$表示分类结果，用1表示A类，用0表示B类</p><ul><li><p>这样做和<em>sigmoid</em>函数产生联系，使用A的函数估计A类产生x的概率密度，概率接近1的时候就是A类，概率接近0的时候就是B类</p></li><li><p>另外可以简化函数的形式，把条件改写成数学化的表达。我们原来的形式是这样的：</p><ul><li>如果x属于A类，那就加算A类产生它的概率的负对数；</li><li>否则加算B产生它的概率的负对数；</li></ul><p>当x属于A类的时候，第二项是0；否则第一项是0。所以原式改写成：$\hat{y}^nlnf_{w,b}(x^n)+(1-\hat{y}^nln(1-f_{w,b}(x^n)))$</p></li></ul></li></ul><p>如此一来，变换可得到：</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/4.PNG" alt></p><p>而根据信息论的表述，这一函数的形式就很像我们的估计函数和实际函数的交叉熵。</p><blockquote><p>交叉熵可以估计两个概率分布的相似情况，假如交叉熵越大，那么说明两个分布的值越接近。</p></blockquote><p>我们通过这一形式化的解释，侧面说明了这一个公式的正确性——我们需要求最小的函数值，那么就需要求最大的交叉熵（注意前面的负号），所以此时模型的概率分布和真实数据是最接近的！</p><h3 id="有了评估方法，如何找到最优模型参数？"><a href="#有了评估方法，如何找到最优模型参数？" class="headerlink" title="有了评估方法，如何找到最优模型参数？"></a>有了评估方法，如何找到最优模型参数？</h3><p>老办法，梯度下降。</p><p>不确定这个交叉熵函数L是不是凸函数，我们先对w和b各自求个微分。</p><p>对w求微分化简过程如下图，左右侧同理；</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/6.png" alt></p><p><img src="/2019/04/09/ML-5-Logistic-Regression/7.png" alt></p><p>最终化简结果相当简洁，也就是$\frac{\partial{L}}{\partial{w}}=-\sum_1^n(\hat{y}^i-f_{w,b}(x^i))x^i$，这个形式和线形回归的学习率其实是一样的！</p><ul><li>注意这里w和x都是向量。</li></ul><p><img src="/2019/04/09/ML-5-Logistic-Regression/8.png" alt></p><p>这里b的梯度下降可以并入w，多出一个$x0 = 1$的维度。</p><h2 id="线性回归与逻辑回归的联系与区别"><a href="#线性回归与逻辑回归的联系与区别" class="headerlink" title="线性回归与逻辑回归的联系与区别"></a>线性回归与逻辑回归的联系与区别</h2><p>看下图，模型三步走：选取模型、评估模型、调整模型过程中，两个模型都是十分相似的。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/compare.png" alt></p><h3 id="为什么不用平方损失（square-error）评估逻辑回归模型？"><a href="#为什么不用平方损失（square-error）评估逻辑回归模型？" class="headerlink" title="为什么不用平方损失（square error）评估逻辑回归模型？"></a>为什么不用平方损失（square error）评估逻辑回归模型？</h3><p>这个事情不是很直观，我们需要计算一下。</p><p>如果采用的是平方损失函数，那么得到的梯度是：</p><p>可以看出，采用平方差的时候，假如模型的估计概率很接近分类的一端（接近1，或者接近0），它的梯度都会接近0；这说明，在远离目标和接近目标的地方，梯度都很小，我们很难获得好的结果。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/whyNOTsquare.png" alt></p><p>更直观的图例在这里：</p><ul><li>在图片中可以看到，<em>cross entropy</em>作为损失函数，在离目标比较远的地方梯度较大；在接近目标的地方梯度比较小。</li><li>而使用<em>square error</em>作为损失函数的时候，在离目标比较远和比较近的地方梯度都很小。</li></ul><p><img src="/2019/04/09/ML-5-Logistic-Regression/squareANDCrossEntropy.png" alt></p><h2 id="Discriminative-VS-Generative"><a href="#Discriminative-VS-Generative" class="headerlink" title="Discriminative VS Generative"></a>Discriminative VS Generative</h2><p>现在回头看看，我们从贝叶斯的生成模型走了这么远，到了逻辑回归的判别模型，产生的结果参数是一样的嘛？</p><p>也就是说，我们在这里获得的w和b，和本文一开始把$\sum​$统一之后得到的模型是不是同一个？</p><p>答案是：<strong>不是同一个</strong>。</p><p>其实模型的最终表述形式是一样的（即，相同的<em>function set</em>），而最终得到的模型之所以不同，是因为我们一开始做出的假设不同。</p><p>我们在贝叶斯的生成模型的时候，做出了诸如”高斯分布”、”独立概率”等等假设。这些假设其实对模型进行了限制。但是在寻找逻辑回归模型的时候，我们只是直接去做了，其实会更贴近数据一点。</p><p>很多实践告诉我们，Generative的模型表现不如Discriminative的模型。</p><p>实际情况的结论要复杂一些：</p><ul><li>training data比较小的时候，Discriminative受data的影响比较大，很容易失控；而Generative模型主要依据还有自己的假设（自己的脑补），受到数据影响比较小，反而能够比较好地描述数据。<ul><li>在数据量越来越大的时候，贝叶斯渐渐失去优势。</li><li>当然，数据量的多少还是以情况论，没有什么绝对标准。</li></ul></li><li>和第一条相似的情况是noise比较多，label本身有错的时候。此时Generative模型占优。</li><li>另外，如果特征之间明显没有关联，那么还是Generative模型好一些。<ul><li>语音辨识为例。为了预测下一句话的内容，一般采用generative的内容。</li></ul></li></ul><p>所以说，当我们掌握信息比较少的时候，脑补和假设很重要；而信息比较多的时候，自然要尊重事实。嘿嘿，不失为人生哲理一条～</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="多类逻辑回归multi-class-classification"><a href="#多类逻辑回归multi-class-classification" class="headerlink" title="多类逻辑回归multi-class classification"></a>多类逻辑回归multi-class classification</h3><p>现在我们把二元的结果向多元拓展：</p><p>假设有C1、C2、C3的类，我们也可以使用逻辑回归，对每个类也有w和b。</p><p>我们需要使用<em>softmax</em>函数（可以通过最大熵理论推导，但是超出了本文的讨论范围）：</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/softmax.png" alt></p><p>这么一做之后，不单考虑到各个概率的大小，也保证各个概率之和为1。</p><p>这样之后，我们还是采用计算交叉熵的方式评估函数的好坏（下图的表达式缺少一个负号，即$-\sum…$）。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/multiCrossEntropy.png" alt="multiCrossEntropy"></p><h3 id="LR的限制：模型是有极限的，我不做LR啦！JOJO！"><a href="#LR的限制：模型是有极限的，我不做LR啦！JOJO！" class="headerlink" title="LR的限制：模型是有极限的，我不做LR啦！JOJO！"></a>LR的限制：<s>模型是有极限的，我不做LR啦！JOJO！</s></h3><p>逻辑回归的模型形式和线性回归是一样的，所以其本质是在高维平面上的直线（平面），不能够把一些复杂的分类表现出来。</p><p>比如图中例子，左上和右下是一类，左下和右上是一类，但是logistic分类只能画出一条直线，无法分割。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/limit.png" alt></p><p>但是，我们可以通过Feature Transformation进行修正：</p><h4 id="Feature-Transformation"><a href="#Feature-Transformation" class="headerlink" title="Feature Transformation"></a>Feature Transformation</h4><p>我们把原有的特征进行变换，得到新的feature，而这个feature可以用直线分类。</p><p>例如在上面这个例子中，可以采用新的feature：$x3=x1^2+x2^2,x4=(1-x1)^2+(1-x2)^2$，即到点<code>(0, 0),(1,1)</code>之间的距离作为新的两个feature。这样一来，我们就可以用直线分割这两组点（图略）。</p><p>但是问题在于，我们往往无法描述属性的特征，不知道如何找到一个好的transformation。如果都是手动修改feature，那就不是人工智能啦！</p><p>我们需要的是让机器自己产生新的feature transformation！所以我们需要：</p><h4 id="Cascading-LR"><a href="#Cascading-LR" class="headerlink" title="Cascading LR"></a>Cascading LR</h4><p>将许多个逻辑回归模型接起来。</p><p>我们做了许多种方式的特征转换之后，再用softmax逻辑回归将他们进行分类。</p><p>是不是有点神经网络的样子？这么一看，其实神经网络就是无数个小的逻辑回归等单元的组合。</p><p>激动，终于学到Deep Learning的内容了。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/cascading.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续上一部分讲解贝叶斯算法的内容，这一次研究一下逻辑回归的分类算法。&lt;/p&gt;
&lt;p&gt;虽然是叫做回归，但是本质是分类，只不过这里的分类方法和线性回归非常相似。&lt;/p&gt;
&lt;p&gt;⚠️前方多图杀猫⚠️    ⚠️前方数学警告⚠️&lt;/p&gt;
    
    </summary>
    
      <category term="machine learning" scheme="http://riroaki.github.io/categories/machine-learning/"/>
    
    
      <category term="logistic regression" scheme="http://riroaki.github.io/tags/logistic-regression/"/>
    
      <category term="classification" scheme="http://riroaki.github.io/tags/classification/"/>
    
  </entry>
  
  <entry>
    <title>33.Search in Rotated Sorted Array</title>
    <link href="http://riroaki.github.io/2019/04/09/33-Search-in-Rotated-Sorted-Array/"/>
    <id>http://riroaki.github.io/2019/04/09/33-Search-in-Rotated-Sorted-Array/</id>
    <published>2019-04-08T19:02:49.000Z</published>
    <updated>2019-04-10T18:10:02.060Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p><p>You are given a target value to search. If found in the array return its index, otherwise return <code>-1</code>.</p><p>You may assume no duplicate exists in the array.</p><p>Your algorithm’s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-java"><code class="language-java">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">0</span>Output<span class="token operator">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-java"><code class="language-java">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>首先，通过二分找到旋转点（第一个比<code>nums[0]</code>小的元素）；</p><p>然后，确认是否旋转，并确定查找范围；</p><p>最后二分查找元素。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cut <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// find rotate point</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mi <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mi<span class="token punctuation">]</span> <span class="token operator">>=</span> cut<span class="token punctuation">)</span>            lo <span class="token operator">=</span> mi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            hi <span class="token operator">=</span> mi<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// check if truly rotate</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span> <span class="token operator">></span> cut<span class="token punctuation">)</span>        lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// if target is on the left side</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">>=</span> cut<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        hi<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// if target is on the right side</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>        hi <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// binary search</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mi <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mi<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>            lo <span class="token operator">=</span> mi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            hi <span class="token operator">=</span> mi<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token operator">?</span> lo <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(log(n))$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.&lt;/p&gt;
&lt;p&gt;(i.e., &lt;code&gt;[0,1,2,4,5,6,7]&lt;/code&gt; might become &lt;code&gt;[4,5,6,7,0,1,2]&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;You are given a target value to search. If found in the array return its index, otherwise return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You may assume no duplicate exists in the array.&lt;/p&gt;
&lt;p&gt;Your algorithm’s runtime complexity must be in the order of &lt;em&gt;O&lt;/em&gt;(log &lt;em&gt;n&lt;/em&gt;).&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://riroaki.github.io/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://riroaki.github.io/tags/array/"/>
    
      <category term="medium" scheme="http://riroaki.github.io/tags/medium/"/>
    
      <category term="binary search" scheme="http://riroaki.github.io/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>Code Jam 2019 Qualification Round</title>
    <link href="http://riroaki.github.io/2019/04/08/Code-Jam-2019-Qualification-Round/"/>
    <id>http://riroaki.github.io/2019/04/08/Code-Jam-2019-Qualification-Round/</id>
    <published>2019-04-08T04:48:25.000Z</published>
    <updated>2019-04-10T15:34:30.199Z</updated>
    
    <content type="html"><![CDATA[<p>准备打一下今年的code jam和kick start，看了一下code jam是采取连续比赛的机制，kick start是每一轮独立。</p><p>今天写一下关于code jam的资格赛的事情。</p><p>QR在4月5日早上七点开始，持续27小时，只要在难度不大的四题（总分100）里面做出30分就可以。</p><p>贴一下战绩：55分，其实挺低的……还需要加油</p><a id="more"></a><h3 id="Foregone-Solution"><a href="#Foregone-Solution" class="headerlink" title="Foregone Solution"></a>Foregone Solution</h3><blockquote><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Someone just won the Code Jam lottery, and we owe them <strong>N</strong> jamcoins! However, when we tried to print out an oversized check, we encountered a problem. The value of <strong>N</strong>, which is an integer, includes at least one digit that is a <code>4</code>… and the <code>4</code>key on the keyboard of our oversized check printer is broken.</p><p>Fortunately, we have a workaround: we will send our winner two checks for positive integer amounts A and B, such that neither A nor B contains any digit that is a <code>4</code>, and A + B = <strong>N</strong>. Please help us find any pair of values A and B that satisfy these conditions.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line of the input gives the number of test cases, <strong>T</strong>. <strong>T</strong> test cases follow; each consists of one line with an integer <strong>N</strong>.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each test case, output one line containing <code>Case #x: A B</code>, where <code>x</code> is the test case number (starting from 1), and <code>A</code> and <code>B</code> are positive integers as described above.</p><p>It is guaranteed that at least one solution exists. If there are multiple solutions, you may output any one of them. (See “What if a test case has multiple correct solutions?” in the Competing section of the <a href="https://codingcompetitions.withgoogle.com/codejam/faq" target="_blank" rel="noopener">FAQ</a>. This information about multiple solutions will not be explicitly stated in the remainder of the 2019 contest.)</p><h3 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h3><p>1 ≤ <strong>T</strong> ≤ 100.<br>Time limit: 10 seconds per test set.<br>Memory limit: 1GB.<br>At least one of the digits of <strong>N</strong> is a 4.</p><h4 id="Test-set-1-Visible"><a href="#Test-set-1-Visible" class="headerlink" title="Test set 1 (Visible)"></a>Test set 1 (Visible)</h4><p>1 &lt; <strong>N</strong> &lt; 105.</p><h4 id="Test-set-2-Visible"><a href="#Test-set-2-Visible" class="headerlink" title="Test set 2 (Visible)"></a>Test set 2 (Visible)</h4><p>1 &lt; <strong>N</strong> &lt; 109.</p><p>Solving the first two test sets for this problem should get you a long way toward advancing. The third test set is worth only 1 extra point, for extra fun and bragging rights!</p><h4 id="Test-set-3-Hidden"><a href="#Test-set-3-Hidden" class="headerlink" title="Test set 3 (Hidden)"></a>Test set 3 (Hidden)</h4><p>1 &lt; <strong>N</strong> &lt; 10100.</p><h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><table><thead><tr><th>Input</th><th>Output</th></tr></thead><tbody><tr><td><code>3 4 940 4444</code></td><td><code>Case #1: 2 2 Case #2: 852 88 Case #3: 667 3777</code></td></tr></tbody></table><p>In Sample Case #1, notice that A and B can be the same. The only other possible answers are <code>1 3</code> and <code>3 1</code>.</p></blockquote><p>这题是米斯达保护协会出的（迫真）</p><p>其实就是把一个包含<code>4</code>的数拆分成两个不同的数，但是这两个数不能包含<code>4</code>。</p><p>只要有一个固定的拆分方法就可以：</p><ul><li>对每一个位上的数字<code>a</code>，如果不是<code>4</code>，就拆分成<code>a</code>和<code>0</code>；</li><li>否则拆出两个<code>2</code></li></ul><p>想着很简单就不管了，结果比赛结束一看，竟然没过hidden case……</p><p>想了一会恍然大悟：位数不够！</p><p>那就该用<code>BigInteger</code>库了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigInteger<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BigInteger sum <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token function">splitWithout4</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Case #"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> sum<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> BigInteger <span class="token function">splitWithout4</span><span class="token punctuation">(</span>BigInteger sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigInteger res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            ten <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>ten<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'4'</span><span class="token punctuation">)</span>                  res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(log(n))$</li><li>空间复杂度：$O(1)$</li></ul><hr><p>这里插播一下<code>java.math.BigInteger</code>库，好像是1.7版本的jdk开始支持的。</p><p>因为java最大的整数使用<code>long</code>存的，数位最大不过64bit，也就是说最大表示不到2的63次方，最小自然是负的2的63次方。这样计算起来不过就是1e20左右嘛，根本不够看的。</p><p>所以java使用大整数库来操作比较长的数，方法是将数存在<code>String</code>里面，然后对加减乘除模，位运算等等都单独内置了支持（还支持了gcd，好评！）</p><p>因为是使用字符串表示，字符串长度是一个<code>int</code>值，最长就是<code>Integer.MAX_VALUE</code>，一般够用了</p><hr><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigInteger<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BigInteger sum <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token function">splitWithout4</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Case #"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> sum<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> BigInteger <span class="token function">splitWithout4</span><span class="token punctuation">(</span>BigInteger sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigInteger res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigInteger three <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            ten <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>ten<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'4'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'6'</span><span class="token punctuation">)</span>                    res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>three<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="You-Can-Go-Your-Own-Way"><a href="#You-Can-Go-Your-Own-Way" class="headerlink" title="You Can Go Your Own Way"></a>You Can Go Your Own Way</h3><blockquote><h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h3><p>You have just entered the world’s easiest maze. You start in the northwest cell of an <strong>N</strong> by <strong>N</strong> grid of unit cells, and you must reach the southeast cell. You have only two types of moves available: a unit move to the east, and a unit move to the south. You can move into any cell, but you may not make a move that would cause you to leave the grid.</p><p>You are excited to be the first in the world to solve the maze, but then you see footprints. Your rival, Labyrinth Lydia, has already solved the maze before you, using the same rules described above!</p><p>As an original thinker, you do not want to reuse any of Lydia’s moves. Specifically, if her path includes a unit move from some cell A to some adjacent cell B, your path cannot also include a move from A to B. (However, in that case, it is OK for your path to visit A or visit B, as long as you do not go from A to B.) Please find such a path.</p><p>In the following picture, Lydia’s path is indicated in blue, and one possible valid path for you is indicated in orange:</p><p><img src="/2019/04/08/Code-Jam-2019-Qualification-Round/path.svg" alt></p><h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h3><p>The first line of the input gives the number of test cases, <strong>T</strong>. <strong>T</strong> test cases follow; each case consists of two lines. The first line contains one integer <strong>N</strong>, giving the dimensions of the maze, as described above. The second line contains a string <strong>P</strong>of 2<strong>N</strong> - 2 characters, each of which is either uppercase <code>E</code> (for east) or uppercase <code>S</code>(for south), representing Lydia’s valid path through the maze.</p><h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><p>For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is a string of 2<strong>N</strong> - 2 characters each of which is either uppercase <code>E</code> (for east) or uppercase <code>S</code> (for south), representing your valid path through the maze that does not conflict with Lydia’s path, as described above. It is guaranteed that at least one answer exists.</p><h3 id="Limits-1"><a href="#Limits-1" class="headerlink" title="Limits"></a>Limits</h3><p>1 ≤ <strong>T</strong> ≤ 100.<br>Time limit: 15 seconds per test set.<br>Memory limit: 1GB.<br><strong>P</strong> contains exactly <strong>N</strong> - 1 <code>E</code> characters and exactly <strong>N</strong> - 1 <code>S</code> characters.</p><h4 id="Test-set-1-Visible-1"><a href="#Test-set-1-Visible-1" class="headerlink" title="Test set 1 (Visible)"></a>Test set 1 (Visible)</h4><p>2 ≤ <strong>N</strong> ≤ 10.</p><h4 id="Test-set-2-Visible-1"><a href="#Test-set-2-Visible-1" class="headerlink" title="Test set 2 (Visible)"></a>Test set 2 (Visible)</h4><p>2 ≤ <strong>N</strong> ≤ 1000.</p><h4 id="Test-set-3-Hidden-1"><a href="#Test-set-3-Hidden-1" class="headerlink" title="Test set 3 (Hidden)"></a>Test set 3 (Hidden)</h4><p>For at most 10 cases, 2 ≤ <strong>N</strong> ≤ 50000.<br>For all other cases, 2 ≤ <strong>N</strong> ≤ 10000.</p><h3 id="Sample-1"><a href="#Sample-1" class="headerlink" title="Sample"></a>Sample</h3><table><thead><tr><th>Input</th><th>Output</th></tr></thead><tbody><tr><td><code>2 2 SE 5 EESSSESE</code></td><td><code>Case #1: ES Case #2: SEEESSES</code></td></tr></tbody></table><p>In Sample Case #1, the maze is so small that there is only one valid solution left for us.</p><p>Sample Case #2 corresponds to the picture above. Notice that it is acceptable for the paths to cross.</p></blockquote><p>一开始我想的很复杂，回溯法解决：首先在<code>n*n</code>的格子上标记每个格子走的路线，如果遇到同路那就返回上一步换个方向继续做。时间和空间复杂度是$O(n^2)$，代码也很长：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ti <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> ti <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> ti<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String path <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> path<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'E'</span><span class="token punctuation">)</span>                    y<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    x<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">findAnotherPath</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Case #"</span> <span class="token operator">+</span> ti <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">findAnotherPath</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> StringBuilder curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> map<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> goEast <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> goSouth <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'S'</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">!=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            curr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'S'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            goEast <span class="token operator">=</span> <span class="token function">findAnotherPath</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>            curr<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>goEast <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'E'</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            curr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'E'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            goSouth <span class="token operator">=</span> <span class="token function">findAnotherPath</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>            curr<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> goEast <span class="token operator">||</span> goSouth<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后顺利通过了两个visible case。</p><p>比赛结束之后，发现还有hidden case没过。看了一下analysis，才知道有一种更简洁的方法：</p><p>那就是始终走对称路线！</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ti <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> ti <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> ti<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String path <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Case #"</span> <span class="token operator">+</span> ti <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">inversePath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">inversePath</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> path<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'S'</span> <span class="token operator">?</span> <span class="token string">'E'</span> <span class="token operator">:</span> <span class="token string">'S'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Cryptopangrams"><a href="#Cryptopangrams" class="headerlink" title="Cryptopangrams"></a>Cryptopangrams</h3><blockquote><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem"></a>Problem</h3><p>On the Code Jam team, we enjoy sending each other <em>pangrams</em>, which are phrases that use each letter of the English alphabet at least once. One common example of a pangram is “the quick brown fox jumps over the lazy dog”. Sometimes our pangrams contain confidential information — for example, <code>CJ QUIZ: KNOW BEVY OF DP FLUX ALGORITHMS</code> — so we need to keep them secure.</p><p>We looked through a cryptography textbook for a few minutes, and we learned that it is very hard to factor products of two large prime numbers, so we devised an encryption scheme based on that fact. First, we made some preparations:</p><ul><li>We chose 26 different prime numbers, none of which is larger than some integer <strong>N</strong>.</li><li>We sorted those primes in increasing order. Then, we assigned the smallest prime to the letter <code>A</code>, the second smallest prime to the letter <code>B</code>, and so on.</li><li>Everyone on the team memorized this list.</li></ul><p>Now, whenever we want to send a pangram as a message, we first remove all spacing to form a plaintext message. Then we write down the product of the prime for the first letter of the plaintext and the prime for the second letter of the plaintext. Then we write down the product of the primes for the second and third plaintext letters, and so on, ending with the product of the primes for the next-to-last and last plaintext letters. This new list of values is our ciphertext. The number of values is one smaller than the number of characters in the plaintext message.</p><p>For example, suppose that <strong>N</strong> = 103 and we chose to use the first 26 odd prime numbers, because we worry that it is too easy to factor even numbers. Then <code>A</code> = 3, <code>B</code> = 5, <code>C</code> = 7, <code>D</code> = 11, and so on, up to <code>Z</code> = 103. Also suppose that we want to encrypt the <code>CJ QUIZ</code>… pangram above, so our plaintext is <code>CJQUIZKNOWBEVYOFDPFLUXALGORITHMS</code>. Then the first value in our ciphertext is 7 (the prime for <code>C</code>) times 31 (the prime for <code>J</code>) = <code>217</code>; the next value is <code>1891</code>, and so on, ending with <code>3053</code>.</p><p>We will give you a ciphertext message and the value of <strong>N</strong> that we used. We will not tell you which primes we used, or how to decrypt the ciphertext. Do you think you can recover the plaintext anyway?</p><h3 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h3><p>The first line of the input gives the number of test cases, <strong>T</strong>. <strong>T</strong> test cases follow; each test case consists of two lines. The first line contains two integers: <strong>N</strong>, as described above, and <strong>L</strong>, the length of the list of values in the ciphertext. The second line contains <strong>L</strong> integers: the list of values in the ciphertext.</p><h3 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h3><p>For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is a string of <strong>L</strong> + 1 uppercase English alphabet letters: the plaintext.</p><h3 id="Limits-2"><a href="#Limits-2" class="headerlink" title="Limits"></a>Limits</h3><p>1 ≤ <strong>T</strong> ≤ 100.<br>Time limit: 20 seconds per test set.<br>Memory limit: 1 GB.<br>25 ≤ <strong>L</strong> ≤ 100.<br>The plaintext contains each English alphabet letter at least once.</p><h4 id="Test-set-1-Visible-2"><a href="#Test-set-1-Visible-2" class="headerlink" title="Test set 1 (Visible)"></a>Test set 1 (Visible)</h4><p>101 ≤ <strong>N</strong> ≤ 10000.</p><h4 id="Test-set-2-Hidden"><a href="#Test-set-2-Hidden" class="headerlink" title="Test set 2 (Hidden)"></a>Test set 2 (Hidden)</h4><p>101 ≤ <strong>N</strong> ≤ 10100.</p><h3 id="Sample-2"><a href="#Sample-2" class="headerlink" title="Sample"></a>Sample</h3><table><thead><tr><th>Input</th><th></th></tr></thead><tbody><tr><td><code>2 103 31 217 1891 4819 2291 2987 3811 1739 2491 4717 445 65 1079 8383 5353 901 187 649 1003 697 3239 7663 291 123 779 1007 3551 1943 2117 1679 989 3053 10000 25 3292937 175597 18779 50429 375469 1651121 2102 3722 2376497 611683 489059 2328901 3150061 829981 421301 76409 38477 291931 730241 959821 1664197 3057407 4267589 4729181 5335543</code></td><td></td></tr><tr><td></td><td></td></tr><tr><td>Output</td><td></td></tr><tr><td><code>Case #1: CJQUIZKNOWBEVYOFDPFLUXALGORITHMS Case #2: SUBDERMATOGLYPHICFJKNQVWXZ</code></td></tr></tbody></table></blockquote><p>思路很简单，找到两个相邻的数的最大公因数，例如相邻两个数是<code>a * b</code>和<code>b*c</code>，那么最大公因数就是<code>b</code></p><p>后面hidden case比较大，1e100的数据量，一开始想的是先别考虑了</p><p>然后我就掉入了巨坑……</p><p>简单写了一下使用<code>Integer</code>存保存数组的代码，gcd用的是欧几里得算法的加强版，对较大的数提高了一点效率。</p><p>运行了一下sample，ok</p><p>结果在visible case上面<code>re(runtime error)</code>了。</p><p>冥思苦想，可能是数据太大溢出了？我寻思这也不是什么大的数据啊？？</p><p>索性上<code>BigInteger</code>库改写了一下代码，正好可以解决hidden case的问题：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigInteger<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BigInteger up <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                product<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Case #"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> product<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> factor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        StringBuilder res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>BigInteger<span class="token operator">></span> primes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">gcd</span><span class="token punctuation">(</span>product<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> factor<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>BigInteger<span class="token operator">></span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>primes<span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>BigInteger<span class="token punctuation">,</span> Character<span class="token operator">></span> dict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            dict<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自我感觉良好～sample ok之后就立马去attempt了。</p><p>结果：<code>RE</code></p><p>心态略崩，那说明不是刚才说的问题咯？</p><p>于是去查了一下<code>RE</code>都有哪些错误——除了数组越界（这个不会吧，sample都过了），最可能的就是算数除0错误？</p><h3 id="喵喵喵？哪里有0啊？"><a href="#喵喵喵？哪里有0啊？" class="headerlink" title="喵喵喵？哪里有0啊？"></a>喵喵喵？哪里有0啊？</h3><p>苦恼地改进了一下代码，把原来两行的数组改成一行了。话说本来就该用一行做的……</p><p>虽然很奇怪，但是我还是顺着这个想法，在代码中除的部分用了一次catch，捕捉之后返回错误的结果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> factor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    StringBuilder res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>BigInteger<span class="token operator">></span> primes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        factor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>product<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">gcd</span><span class="token punctuation">(</span>product<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"ERROR"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果出现除0错误，那么提交结果就会变成WA</span>    <span class="token punctuation">}</span>    primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            factor<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"ERROR"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果出现除0错误，那么提交结果就会变成WA</span>        <span class="token punctuation">}</span>        primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>BigInteger<span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>primes<span class="token punctuation">)</span><span class="token punctuation">;</span>    Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>BigInteger<span class="token punctuation">,</span> Character<span class="token operator">></span> dict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        dict<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>BigInteger num <span class="token operator">:</span> factor<span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次提交果然变成了<code>WA</code>，真的是除0的结果……</p><p>然而还是百思不得其解。</p><p>心态崩了一会，只好上ide了。</p><p>在intellij里面写了一下用0～1000的质数生成case的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">211</span><span class="token punctuation">,</span> <span class="token number">239</span><span class="token punctuation">,</span> <span class="token number">353</span><span class="token punctuation">,</span> <span class="token number">479</span><span class="token punctuation">,</span> <span class="token number">601</span><span class="token punctuation">,</span> <span class="token number">701</span><span class="token punctuation">,</span> <span class="token number">827</span><span class="token punctuation">,</span> <span class="token number">883</span><span class="token punctuation">,</span> <span class="token number">1021</span><span class="token punctuation">,</span> <span class="token number">1051</span><span class="token punctuation">,</span> <span class="token number">1087</span><span class="token punctuation">,</span> <span class="token number">1277</span><span class="token punctuation">,</span> <span class="token number">1381</span><span class="token punctuation">,</span> <span class="token number">1531</span><span class="token punctuation">,</span> <span class="token number">1571</span><span class="token punctuation">,</span> <span class="token number">1669</span><span class="token punctuation">,</span> <span class="token number">1861</span><span class="token punctuation">,</span> <span class="token number">1973</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2137</span><span class="token punctuation">,</span> <span class="token number">2213</span><span class="token punctuation">,</span> <span class="token number">2281</span><span class="token punctuation">,</span> <span class="token number">2411</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> dict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        dict<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ti <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ti <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> ti<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dict<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            product<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> res<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10000 "</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>product<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果做了几次实验，还真撞到一个error的case！</p><p>这还不赶紧保存下来，一看生成的case……</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">10000</span> <span class="token number">100</span><span class="token number">4419361</span> <span class="token number">4419361</span> <span class="token number">2325863</span> <span class="token number">1073071</span> <span class="token number">2181877</span> <span class="token number">4566769</span> <span class="token number">4874497</span> <span class="token number">4562</span> <span class="token number">3994</span> <span class="token number">2098847</span> <span class="token number">371003</span> <span class="token number">311699</span> <span class="token number">618983</span> <span class="token number">1498037</span> <span class="token number">3566653</span> <span class="token number">3338</span> <span class="token number">4</span> <span class="token number">706</span> <span class="token number">704941</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第一个数和第二个数是相等的！这样一来它们的公因数就是本身——意味着我会认为第一个数对应的质数是1，第二个数的质数是它本身，第三个数的质数就是它除以第二个数，而如果它还比第二个数小，那么除法就会返回0！</p><p>终于想明白这一点之后，我开始思考解决方案：</p><ul><li>遇到这种情况，排列肯定出现了<code>aba</code>型的序列，导致前后两个乘积是相等的，得出的公因数就无效了。</li><li>每个字母在每段明文都出现至少一次，那么明文肯定出现了至少三个字母，那么肯定在某一处会有<code>abc</code>型的序列，他们保证乘积不相等。</li><li>那么就在找到不同的数之后，从他们入手解出公因数，然后向两侧【传播】。</li></ul><p>做到这点，终于做出了。比赛结束后一看，hidden case也搞定了，真不错。</p><p>最终完整代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigInteger<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BigInteger up <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                product<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Case #"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> product<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> factor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        StringBuilder res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>BigInteger<span class="token operator">></span> primes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> product<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>product<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            mid<span class="token operator">++</span><span class="token punctuation">;</span>        factor<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>product<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">gcd</span><span class="token punctuation">(</span>product<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 向右计算</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> mid<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            factor<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 向左计算</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> mid<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            factor<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// set中质数排序后和对应字母构成字典</span>        List<span class="token operator">&lt;</span>BigInteger<span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>primes<span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>BigInteger<span class="token punctuation">,</span> Character<span class="token operator">></span> dict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            dict<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 这里以防万一嘛，虽然题目要求肯定不会出现get不到的字母</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BigInteger num <span class="token operator">:</span> factor<span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O( n)$</li></ul><h3 id="Dat-Bae"><a href="#Dat-Bae" class="headerlink" title="Dat Bae"></a>Dat Bae</h3><blockquote><h3 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem"></a>Problem</h3><p>A research consortium has built a new database system for their new data center. The database is made up of one master computer and <strong>N</strong> worker computers, which are given IDs from 0 to <strong>N</strong>-1. Each worker stores exactly one bit of information… which seems rather wasteful, but this is very important data!</p><p>You have been hired to evaluate the following instruction for the database:</p><ul><li><code>TEST_STORE</code> <bits>: The master reads in <bits>, which is a string of <strong>N</strong> bits, and sends the i-th bit to the i-th worker for storage. The master will then read the bits back from the workers and return them to the user, in the same order in which they were read in.</bits></bits></li></ul><p>During normal operation, <code>TEST_STORE</code> should return the same string of bits that it read in, but unfortunately, <strong>B</strong> of the workers are broken!</p><p>The broken workers are correctly able to store the bits given to them, but whenever the master tries to read from a broken worker, no bit is returned. This causes the <code>TEST_STORE</code> operation to return only <strong>N</strong>-<strong>B</strong> bits, which are the bits stored on the non-broken workers (in ascending order of their IDs). For example, suppose <strong>N</strong> = 5 and the 0th and 3rd workers are broken (so <strong>B</strong> = 2). Then:</p><ul><li><code>TEST_STORE 01101</code> returns <code>111</code>.</li><li><code>TEST_STORE 00110</code> returns <code>010</code>.</li><li><code>TEST_STORE 01010</code> returns <code>100</code>.</li><li><code>TEST_STORE 11010</code> also returns <code>100</code>.</li></ul><p>For security reasons, the database is hidden in an underground mountain vault, so calls to <code>TEST_STORE</code> take a very long time. You have been tasked with working out which workers are broken using at most <strong>F</strong> calls to <code>TEST_STORE</code>.</p><h3 id="Input-and-output"><a href="#Input-and-output" class="headerlink" title="Input and output"></a>Input and output</h3><p>This is an interactive problem. You should make sure you have read the information in the Interactive Problems section of our <a href="https://codingcompetitions.withgoogle.com/codejam/faq" target="_blank" rel="noopener">FAQ</a>.</p><p>Initially, your program should read a single line containing a single integer <strong>T</strong>indicating the number of test cases. Then, you need to process <strong>T</strong> test cases.</p><p>For each test case, your program will first read a single line containing three integers <strong>N</strong>, <strong>B</strong>, and <strong>F</strong>, indicating the number of workers, the number of broken workers, and the number of lines you may send (as described below).</p><p>Then you may send the judge up to <strong>F</strong> lines, each containing a string of exactly <strong>N</strong>characters, each either <code>0</code> or <code>1</code>. Each time you send a line, the judge will check that you have not made more than <strong>F</strong> calls. If you have, the judge will send you a single line containing a single <code>-1</code>, and then finish all communication and wait for your program to finish. Otherwise, the judge will send a string of length <strong>N</strong>-<strong>B</strong>: the string returned by <code>TEST_STORE</code>, as described above.</p><p>Once your program knows the index of the <strong>B</strong> broken workers, it can finish the test case by sending <strong>B</strong> space-separated integers: the IDs of the broken workers, in sorted order. This does not count as one of your <strong>F</strong> calls.</p><p>If the <strong>B</strong> integers are not exactly the IDs of the <strong>B</strong> broken workers, you will receive a Wrong Answer verdict, and the judge will send a single line containing <code>-1</code>, and then no additional communication. If your answer was correct, the judge will send a single line with <code>1</code>, followed by the line that begins the next test case (or exit, if that was the last test case).</p><h3 id="Limits-3"><a href="#Limits-3" class="headerlink" title="Limits"></a>Limits</h3><p>Time limit: 20 seconds per test set.<br>Memory limit: 1GB.<br>1 ≤ <strong>T</strong> ≤ 100.<br>2 ≤ <strong>N</strong> ≤ 1024.<br>1 ≤ <strong>B</strong> ≤ min(15, <strong>N</strong>-1).</p><h4 id="Test-set-1-Visible-3"><a href="#Test-set-1-Visible-3" class="headerlink" title="Test set 1 (Visible)"></a>Test set 1 (Visible)</h4><p><strong>F</strong> = 10.</p><h4 id="Test-set-2-Hidden-1"><a href="#Test-set-2-Hidden-1" class="headerlink" title="Test set 2 (Hidden)"></a>Test set 2 (Hidden)</h4><p><strong>F</strong> = 5.</p><h3 id="Testing-Tool"><a href="#Testing-Tool" class="headerlink" title="Testing Tool"></a>Testing Tool</h3><p>You can use this testing tool to test locally or on our servers. To test locally, you will need to run the tool in parallel with your code; you can use our <a href="https://storage.googleapis.com/coding-competitions.appspot.com/interactive_runner.py" target="_blank" rel="noopener">interactive runner</a> for that. For more information, read the Interactive Problems section of the <a href="https://codingcompetitions.withgoogle.com/codejam/faq" target="_blank" rel="noopener">FAQ</a>.</p><h3 id="Local-Testing-Tool"><a href="#Local-Testing-Tool" class="headerlink" title="Local Testing Tool"></a>Local Testing Tool</h3><p>To better facilitate local testing, we provide you the following script. Instructions are included inside. You are encouraged to add more test cases for better testing. Please be advised that although the testing tool is intended to simulate the judging system, it is <strong>NOT</strong> the real judging system and might behave differently.</p><p>If your code passes the testing tool but fails the real judge, please check <a href="https://code.google.com/codejam/resources/faq#language-details" target="_blank" rel="noopener">here</a> to make sure that you are using the same compiler as us.</p><p><a href="https://codingcompetitions.withgoogle.com/codejam/round/0000000000051705/00000000000881de#" target="_blank" rel="noopener"><em>file_download</em>Download testing_tool.py</a></p><h3 id="Sample-Interaction"><a href="#Sample-Interaction" class="headerlink" title="Sample Interaction"></a>Sample Interaction</h3><p>The following interaction meets the limits for Test set 1.</p><pre class="line-numbers language-python"><code class="language-python">  t <span class="token operator">=</span> readline_int<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token operator">//</span> Reads <span class="token number">2</span> into t  n<span class="token punctuation">,</span> b<span class="token punctuation">,</span> f <span class="token operator">=</span> readline_int_list<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">//</span> Reads <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span> into n<span class="token punctuation">,</span> b<span class="token punctuation">,</span> f  printline <span class="token number">01101</span> to stdout    <span class="token operator">//</span> The next four outputs match the example <span class="token keyword">in</span>                               <span class="token operator">//</span> the problem statement<span class="token punctuation">.</span>  flush stdout  response <span class="token operator">=</span> readline_str<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">//</span> Reads <span class="token number">111</span> into response<span class="token punctuation">.</span> <span class="token punctuation">(</span>At this point<span class="token punctuation">,</span> we                               <span class="token operator">//</span> could determine the answer<span class="token punctuation">;</span> the remaining                               <span class="token operator">//</span> queries are just examples!<span class="token punctuation">)</span>  printline <span class="token number">00110</span> to stdout  flush stdout  response <span class="token operator">=</span> readline_str<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">//</span> Reads <span class="token number">010</span> into response  printline <span class="token number">01010</span> to stdout  flush stdout  response <span class="token operator">=</span> readline_str<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">//</span> Reads <span class="token number">100</span> into response  printline <span class="token number">11010</span> to stdout  flush stdout  response <span class="token operator">=</span> readline_str<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">//</span> Reads <span class="token number">100</span> into response  printline <span class="token number">0</span> <span class="token number">3</span> to stdout      <span class="token operator">//</span> Guesses the answer<span class="token punctuation">.</span> Notice that we were                               <span class="token operator">//</span> <span class="token operator">not</span> required to use all <span class="token number">10</span> of our allowed                               <span class="token operator">//</span> queries<span class="token punctuation">.</span>  flush stdout  verdict <span class="token operator">=</span> readline_int<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token operator">//</span> Reads <span class="token number">1</span> into verdict<span class="token punctuation">.</span> We got that test case                               <span class="token operator">//</span> right!  n<span class="token punctuation">,</span> b<span class="token punctuation">,</span> f <span class="token operator">=</span> readline_int_list<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">//</span> Reads <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span> into n<span class="token punctuation">,</span> b<span class="token punctuation">,</span> f<span class="token punctuation">.</span>  printline <span class="token number">01</span> to stdout       <span class="token operator">//</span> <span class="token number">01</span> <span class="token keyword">is</span> a query<span class="token punctuation">,</span> <span class="token operator">not</span> a guess at the final                               <span class="token operator">//</span> answer <span class="token punctuation">(</span><span class="token keyword">if</span> we wanted to guess that just                               <span class="token operator">//</span> worker <span class="token number">1</span> were broken<span class="token punctuation">,</span> we would have to                               <span class="token operator">//</span> send <span class="token number">1</span> <span class="token keyword">as</span> we do below<span class="token punctuation">)</span>  flush stdout  response <span class="token operator">=</span> readline_str<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">//</span> Reads <span class="token number">1</span> into response<span class="token punctuation">.</span>  printline <span class="token number">1</span> to stdout        <span class="token operator">//</span> Makes a <span class="token punctuation">(</span>bad<span class="token punctuation">)</span> wild guess<span class="token punctuation">.</span>  verdict <span class="token operator">=</span> readline_str<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token operator">//</span> Reads <span class="token operator">-</span><span class="token number">1</span> into verdict<span class="token punctuation">.</span>  exit                         <span class="token operator">//</span> exits to avoid an ambiguous TLE error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>这题比赛的时候没有做，现在研究一下。</p><p>少见的交互题，其实就是和控制台输入输出的交互。</p><p>说的是如何在有限次收发信息中确定缺失的机子有哪些。</p><p>这题可以说是四道题里面最难的一道了，也是做的人最少的。以下思路和代码来自分析：</p><ol><li><p>首先，介绍一下这题的交互方式：</p><ul><li>开头输入和其他题目一样，先输入次数，然后每轮输入N，B和F；</li><li>程序需要输出F行，每行是测试数据（也就是长度为N的0和1的字符串）</li><li>此时交互端读取程序输出，并依次返回测试结果到输出。</li><li>程序需要读入结果，分析出出错的序号，中间用空格分开。</li><li>交互端会根据读入的结果，返回-1或者1，前者表示错误而后者表示正确。</li></ul></li><li><p>思路？</p><ul><li><p>首先，如果一台机器坏了，那么它接下来的反馈不论如何都会缺失，所以导致整列数据缺失；</p></li><li><p>在case1中，长度是1024，允许猜测10次；那么我们需要构造出一个序列，使得每一列都具有一个独特的标示，而我们读出缺少的列就可以判断缺少的数。幸运的是，1024是2的10次方，所以我们能够如此构造：</p><ul><li>由01重复构成的串</li><li>由0011节重复构成的串</li><li>由00001111节重复构成的串</li><li>……</li><li>由16个0和16个1组成的节重复构成的串</li></ul><p>为什么要这么构造呢？那是因为我们可以惊奇的发现，这样做之后，从左到右的列，它们从下往上排列的串——比如，第一列是0000000000，第二列是0000000001——刚好是列的序号的二进制表示。最后一个串是1111111111，即1023。如此一来，我们可以通过判断某个数字是否存在来判断列是否缺失。</p></li><li><p>在case2中，我们最多只能请求5次，这就不像第一部分一样直接，但是思路是类似的。由于我们只能够使用5次，那么我们只能表示从0到2的5次，也就是0～15的范围。我们无法直接用列的数字和列关联起来，但是我们可以把所有的列分为16个一组，通过组号和组内缺失的数字来确定丢失的数字。</p><ul><li>注意，因为坏掉的机器最多只有15台，所以不会出现整个组都坏掉，或者本来在两组的部分被当作一组来看待——举个例子，如果最坏情况出现，那就是连续的15台机器坏掉，从某组的1号开始一直坏到15号，那么它和下一组将会有2个0，我们依然能够将它们区分成两组（因为没有一组会包含两个相同的数字）。</li></ul></li></ul></li></ol><p>代码来源：<a href="https://github.com/arthtyagi/Google-Code-Jam" target="_blank" rel="noopener">https://github.com/arthtyagi/Google-Code-Jam</a></p><p>遗憾的是，这段代码测试是re。目前没有找到简洁的代码。</p><p>有时间我自己写一份吧😠</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    N<span class="token punctuation">,</span> B<span class="token punctuation">,</span> F <span class="token operator">=</span> map<span class="token punctuation">(</span>int<span class="token punctuation">,</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> F<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">:</span>        send <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">>></span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>send<span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    recv <span class="token operator">=</span> <span class="token punctuation">[</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">]</span>      ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> N <span class="token operator">-</span> B<span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        xx <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">:</span>            xx <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span>recv<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> j        <span class="token keyword">if</span> xx <span class="token operator">==</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    T <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> solve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;准备打一下今年的code jam和kick start，看了一下code jam是采取连续比赛的机制，kick start是每一轮独立。&lt;/p&gt;
&lt;p&gt;今天写一下关于code jam的资格赛的事情。&lt;/p&gt;
&lt;p&gt;QR在4月5日早上七点开始，持续27小时，只要在难度不大的四题（总分100）里面做出30分就可以。&lt;/p&gt;
&lt;p&gt;贴一下战绩：55分，其实挺低的……还需要加油&lt;/p&gt;
    
    </summary>
    
      <category term="competition" scheme="http://riroaki.github.io/categories/competition/"/>
    
    
      <category term="code jam" scheme="http://riroaki.github.io/tags/code-jam/"/>
    
  </entry>
  
  <entry>
    <title>ML学习日记4——以少女前线为例讲解贝叶斯分类算法</title>
    <link href="http://riroaki.github.io/2019/04/07/ML-4-Bayesian/"/>
    <id>http://riroaki.github.io/2019/04/07/ML-4-Bayesian/</id>
    <published>2019-04-07T08:29:08.000Z</published>
    <updated>2019-04-10T19:06:07.672Z</updated>
    
    <content type="html"><![CDATA[<p>看了李宏毅老师讲解classification的视频，决定以少女前线的枪种分类为例，试做一个贝叶斯分类器。</p><p>前半段理论主要来自李宏毅老师的视频，后半段是自己实现的贝叶斯分类器代码。</p><p><img src="/2019/04/07/ML-4-Bayesian/head.jpg" alt></p><p><s>找这张配图的时间比码字时间还长</s></p><p>我永远喜欢忤逆小队！</p><a id="more"></a><h2 id="理论部分"><a href="#理论部分" class="headerlink" title="理论部分"></a>理论部分</h2><h3 id="话题引入"><a href="#话题引入" class="headerlink" title="话题引入"></a>话题引入</h3><p>首先做一个题。</p><p>我有两个抽屉A和B，里面放着白球和红球；</p><p>A中红球和白球的个数比为1:3，B中红球和白球的个数比为2:3；</p><p>现在要从两个抽屉中抽一个球，从A抽屉和B抽屉中选择的概率比为1:2；</p><p>如果抽中红球，问：求抽到的球来自A抽屉的概率？</p><p>答案很简单，$P(A|red)=\frac{P(A)P(red|A)}{P(A)P(red|A)+P(B)P(red|B)}$</p><h3 id="分类思想"><a href="#分类思想" class="headerlink" title="分类思想"></a>分类思想</h3><p>首先，我们知道类和类之间是有联系的，我们不能完全确定x是否属于A或者B类，而是只能把归属可能性最大的类作为我们对x的分类。</p><p>现在我们不妨脑洞大开一下，把一个抽屉当作一个类别，把球当做一个需要分类的对象，我们需要找到这个球是哪一类的，其实就是找到这个球最有可能来自哪个抽屉，这样就和上面的公式是一回事了。</p><p>换言之，对某一个待归类的x，我们把它当作是已经取出的”球”，通过计算某个类别（抽屉）产生出case（从这一抽屉中抽球）的概率，以及各个类别（抽屉）产生出这一个x的概率，就可以计算出x属于每一类的概率。</p><p>当它属于某一类A的概率最大的时候，我们就将它分类为A类。</p><p>这一模型又被称为<em>generative model</em>——生成模型，也就是说这个模型其实不单可以归类，也可以用于产生case。</p><h3 id="具体分析产生的模型是什么样的？"><a href="#具体分析产生的模型是什么样的？" class="headerlink" title="具体分析产生的模型是什么样的？"></a>具体分析产生的模型是什么样的？</h3><p>根据刚才的模型，我们需要两类参数才能计算分类概率：</p><ol><li>某个类生产case的概率（从这个抽屉抽球的概率）</li><li>这个类产生出的case是x的概率（抽到的球是红球的概率）</li></ol><p>对1，使用训练集中该类的数据量占总数据量的个数作为这个类生产case的概率。</p><p>比较复杂的是2：</p><h4 id="生成的数据是x的概率如何计算？"><a href="#生成的数据是x的概率如何计算？" class="headerlink" title="生成的数据是x的概率如何计算？"></a>生成的数据是x的概率如何计算？</h4><p>我们以少前各个枪种为例：每一把枪具有血量、伤害、命中、回避、射速等等数值属性，它们都是一定范围内的整数，可以看作连续变量，而且同一类枪种的某一属性值都比较接近（比如，rf狙击枪的满级伤害普遍在120+，而射速普遍在40以下），可以认为是一个多维的正态分布生成的。</p><p>这样一来，我们可以以x属性在这一正态分布下的概率密度（注意，离散变量谈概率而连续变量谈概率密度）作为生成数据是x的概率。</p><h4 id="那么，怎样求出这一个正态分布的参数？"><a href="#那么，怎样求出这一个正态分布的参数？" class="headerlink" title="那么，怎样求出这一个正态分布的参数？"></a>那么，<strong>怎样求出这一个正态分布的参数</strong>？</h4><p>方法是极大似然估计：选取让过去发生的事情可能性最大的参数。</p><p>对一个正态分布$f_{\mu,\sum}$，它得出之前的case的概率越大，它就越好。</p><p>所以把最大似然作为目标函数，取微分为0的参数为最好的参数（过程略）：</p><ul><li><p>对一类train data，取它们的平均值作为$\mu$即$\mu=\frac{\sum_{i=1}^nx^i}{n}$，而$\sum=\frac{\sum^n_{i=1}(x^i-\mu)(x^i-\mu)^T}{n}​$。</p></li><li><p>注意这里的$\mu$是维度等于属性个数的向量，$\sum$是属性的协方差矩阵。</p></li></ul><h4 id="有了参数，如何评估产生x的可能性？"><a href="#有了参数，如何评估产生x的可能性？" class="headerlink" title="有了参数，如何评估产生x的可能性？"></a>有了参数，<strong>如何评估产生x的可能性</strong>？</h4><p>套公式呗。高斯分布的概率密度公式：</p><p>$P(C_i) * P(x | C_i) = \frac{1}{(2\pi)^{D/2}}\frac{1}{|\sum^i|^{1/2}}exp({-\frac{1}{2}(x-\mu^i)(\sum^i)^{-1}(x-\mu^i)})$</p><blockquote><p>【补充】多元正态分布的参数：</p><p>先从各维度不相关的多元正态分布入手，数据点通过d维的列向量描述$x=\left[ x_1,x_2,\cdots,x_d \right]^T$，各个维度的均值方差分别为$[\mu_1,\mu_2,\cdots,\mu_d]$ , $[\sigma_1,\sigma_2,\cdots,\sigma_d]$ 来描述，高斯概率密度函数可以表示为：</p><p>$f(x)=\frac{1}{(\sqrt{2\pi})^d\sigma_1\sigma_2\cdots\sigma_d}e^{-\frac{1}{2}[(\frac{x_1-\mu_1}{\sigma_1})^2+(\frac{x_2-\mu_2}{\sigma_2})^2+\cdots+(\frac{x_d-\mu_1}{\sigma_d})^2]}​$</p><p>前面多出的项是为了让概率之和为1，其实这个方程可以这样子去解读：</p><p>$f(x)=\frac{1}{(\sqrt{2\pi})\sigma_1}e^{-\frac{1}{2}(\frac{x_1-\mu_1}{\sigma_1})^2}\frac{1}{(\sqrt{2\pi})\sigma_2}e^{-\frac{1}{2}(\frac{x_2-\mu_2}{\sigma_2})^2}\cdots\frac{1}{(\sqrt{2\pi})\sigma_d}e^{-\frac{1}{2}(\frac{x_d-\mu_d}{\sigma_d})^2}$</p><p>而当我们考虑变量之间的并不独立的情况，我们可以用$\sum$相关矩阵取代$\sigma$向量（其实原本的$\sigma$向量可以看作是一个主对角阵，而$\sum$是它的一般化，其他位置表示的是各个维度之间的关系）</p></blockquote><h2 id="实践部分"><a href="#实践部分" class="headerlink" title="实践部分"></a>实践部分</h2><p>多说无益，开始写代码。</p><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><ul><li>选取了数据的6-10列，即血量、伤害、命中、回避、射速属性。<a href="https://drive.google.com/file/d/1AKcKtE_YvYDCMFMOojWJ5I-z0KOiWVPh/view?usp=sharing" target="_blank" rel="noopener">数据在这里哦</a></li><li>切分成test和train两部分。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> random <span class="token keyword">import</span> randint<span class="token keyword">def</span> <span class="token function">loadData</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span>file<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>str<span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    types <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> content<span class="token punctuation">]</span>    attrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>float<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> content<span class="token punctuation">]</span>    <span class="token keyword">return</span> types<span class="token punctuation">,</span> attrs<span class="token keyword">def</span> <span class="token function">splitCases</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">!=</span> len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    trainX<span class="token punctuation">,</span> trainY<span class="token punctuation">,</span> testX<span class="token punctuation">,</span> testY <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">:</span>            testX<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            testY<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            trainX<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            trainY<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> trainX<span class="token punctuation">,</span> trainY<span class="token punctuation">,</span> testX<span class="token punctuation">,</span> testYtypes<span class="token punctuation">,</span> attrs <span class="token operator">=</span> loadData<span class="token punctuation">(</span><span class="token string">'./data/gf.csv'</span><span class="token punctuation">)</span>TrainX<span class="token punctuation">,</span> TrainY<span class="token punctuation">,</span> TestX<span class="token punctuation">,</span> TestY <span class="token operator">=</span> splitCases<span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> types<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求高斯分布参数"><a href="#求高斯分布参数" class="headerlink" title="求高斯分布参数"></a>求高斯分布参数</h3><ul><li>按照枪种分类形成字典，并且计算出每一类枪的高斯分布参数（协方差矩阵）：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">splitByType</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    _groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> _i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> y<span class="token punctuation">[</span>_i<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> _groups<span class="token punctuation">:</span>            _groups<span class="token punctuation">[</span>y<span class="token punctuation">[</span>_i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        _groups<span class="token punctuation">[</span>y<span class="token punctuation">[</span>_i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">[</span>_i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> _groups<span class="token keyword">def</span> <span class="token function">gaussianFit</span><span class="token punctuation">(</span>_attr<span class="token punctuation">)</span><span class="token punctuation">:</span>    _n<span class="token punctuation">,</span> _m <span class="token operator">=</span> len<span class="token punctuation">(</span>_attr<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>_attr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    _mean <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>_m<span class="token punctuation">)</span>    _sigma <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>_m<span class="token punctuation">,</span> _m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _j <span class="token keyword">in</span> range<span class="token punctuation">(</span>_m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> _i <span class="token keyword">in</span> range<span class="token punctuation">(</span>_n<span class="token punctuation">)</span><span class="token punctuation">:</span>            _mean<span class="token punctuation">[</span>_j<span class="token punctuation">]</span> <span class="token operator">+=</span> _attr<span class="token punctuation">[</span>_i<span class="token punctuation">]</span><span class="token punctuation">[</span>_j<span class="token punctuation">]</span>        _mean<span class="token punctuation">[</span>_j<span class="token punctuation">]</span> <span class="token operator">/=</span> _n    <span class="token keyword">for</span> _i <span class="token keyword">in</span> range<span class="token punctuation">(</span>_n<span class="token punctuation">)</span><span class="token punctuation">:</span>        _tmp <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token punctuation">[</span>_attr<span class="token punctuation">[</span>_i<span class="token punctuation">]</span><span class="token punctuation">[</span>_j<span class="token punctuation">]</span> <span class="token operator">-</span> _mean<span class="token punctuation">[</span>_j<span class="token punctuation">]</span> <span class="token keyword">for</span> _j <span class="token keyword">in</span> range<span class="token punctuation">(</span>_m<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        _sigma <span class="token operator">+=</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>_tmp<span class="token punctuation">)</span> <span class="token operator">*</span> _tmp    <span class="token keyword">return</span> _mean<span class="token punctuation">,</span> _sigmaGroup <span class="token operator">=</span> splitByType<span class="token punctuation">(</span>TrainX<span class="token punctuation">,</span> TrainY<span class="token punctuation">)</span>names<span class="token punctuation">,</span> pClass<span class="token punctuation">,</span> means<span class="token punctuation">,</span> sigmas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> attr <span class="token keyword">in</span> Group<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    names<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    pClass<span class="token punctuation">.</span>append<span class="token punctuation">(</span>len<span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span>    count <span class="token operator">+=</span> len<span class="token punctuation">(</span>attr<span class="token punctuation">)</span>    mean<span class="token punctuation">,</span> sigma <span class="token operator">=</span> gaussianFit<span class="token punctuation">(</span>attr<span class="token punctuation">)</span>    means<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mean<span class="token punctuation">)</span>    sigmas<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sigma<span class="token punctuation">)</span>pClass <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token operator">/</span> count <span class="token keyword">for</span> num <span class="token keyword">in</span> pClass<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 查看一下协方差矩阵：</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sigmas<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Covariance matrix for %s'</span> <span class="token operator">%</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sigmas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Covariance matrix for HG[[ 53742.96875   1333.28125  -4061.875   -11030.78125  -2615.46875] [  1333.28125    556.46875    327.875     -609.96875   -432.78125] [ -4061.875      327.875     2283.5       1339.125     -111.125  ] [-11030.78125   -609.96875   1339.125     4815.46875    176.28125] [ -2615.46875   -432.78125   -111.125      176.28125   1193.96875]]Covariance matrix for SMG[[ 2.20652679e+05  7.09821429e+02 -1.90000000e+02 -1.86701786e+04  -1.24607143e+03] [ 7.09821429e+02  1.52678571e+02 -2.90000000e+01 -1.96321429e+02  -1.50928571e+02] [-1.90000000e+02 -2.90000000e+01  5.20000000e+01  1.15000000e+02  -6.80000000e+01] [-1.86701786e+04 -1.96321429e+02  1.15000000e+02  2.51867857e+03   3.66071429e+02] [-1.24607143e+03 -1.50928571e+02 -6.80000000e+01  3.66071429e+02   1.58042857e+03]]Covariance matrix for RF[[15886.95652174  -578.26086957  -984.13043478 -1459.13043478   -256.73913043] [ -578.26086957  7262.43478261   811.2173913   -451.7826087   -885.43478261] [ -984.13043478   811.2173913   1592.60869565   257.60869565    -75.2173913 ] [-1459.13043478  -451.7826087    257.60869565   586.60869565    -42.2173913 ] [ -256.73913043  -885.43478261   -75.2173913    -42.2173913    250.43478261]]Covariance matrix for AR[[ 5.72460e+04 -1.57880e+03 -3.07180e+03 -1.26440e+03  9.71200e+02] [-1.57880e+03  1.36664e+03  7.20400e+01 -2.80680e+02 -1.31936e+03] [-3.07180e+03  7.20400e+01  1.00344e+03  5.11520e+02 -2.59600e+01] [-1.26440e+03 -2.80680e+02  5.11520e+02  5.10160e+02  2.51320e+02] [ 9.71200e+02 -1.31936e+03 -2.59600e+01  2.51320e+02  1.81864e+03]]Covariance matrix for MG[[189016.66666667   4573.33333333  -6338.33333333  -9428.33333333  -14030.        ] [  4573.33333333    811.80952381   -404.80952381   -442.52380952   -1365.42857143] [ -6338.33333333   -404.80952381    533.80952381    589.52380952    1174.42857143] [ -9428.33333333   -442.52380952    589.52380952    777.80952381    1376.57142857] [-14030.          -1365.42857143   1174.42857143   1376.57142857    5124.28571429]]Covariance matrix for SG[[ 4.89192308e+04  7.96153846e+02  1.40000000e+02 -9.53461538e+02   1.29230769e+02] [ 7.96153846e+02  1.32769231e+02 -1.00000000e+01 -3.43076923e+01  -1.13846154e+02] [ 1.40000000e+02 -1.00000000e+01  1.20000000e+01  1.40000000e+01   4.00000000e+00] [-9.53461538e+02 -3.43076923e+01  1.40000000e+01  7.09230769e+01  -5.46153846e+00] [ 1.29230769e+02 -1.13846154e+02  4.00000000e+00 -5.46153846e+00   1.59230769e+02]]</code></pre><h3 id="分类器核心代码"><a href="#分类器核心代码" class="headerlink" title="分类器核心代码"></a>分类器核心代码</h3><ul><li><p>这里的<code>calcPossibility</code>使用的公式：</p><p>$P(C_i) * P(x | C_i) = \frac{1}{(2\pi)^{D/2}}\frac{1}{|\sum^i|^{1/2}}exp({-\frac{1}{2}(x-\mu^i)(\sum^i)^{-1}(x-\mu^i)})​$</p><p>（省略和pi相关的第一项常数，以及分母部分）</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calcPossibility</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> i<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>    _tmp <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>x <span class="token operator">-</span> means<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    _inv <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>sigmas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    _exp <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5</span> <span class="token operator">*</span> _tmp <span class="token operator">*</span> _inv <span class="token operator">*</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>_tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> pClass<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> _exp <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>det<span class="token punctuation">(</span>sigmas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">classifier</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    _maxId<span class="token punctuation">,</span> _maxP <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> _i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        _currP <span class="token operator">=</span> calcPossibility<span class="token punctuation">(</span>x<span class="token punctuation">,</span> _i<span class="token punctuation">)</span>        <span class="token keyword">if</span> _maxP <span class="token operator">&lt;</span> _currP <span class="token punctuation">:</span>            _maxId<span class="token punctuation">,</span> _maxP <span class="token operator">=</span> _i<span class="token punctuation">,</span> _currP    <span class="token keyword">return</span> names<span class="token punctuation">[</span>_maxId<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试数据："><a href="#测试数据：" class="headerlink" title="测试数据："></a>测试数据：</h3><pre class="line-numbers language-python"><code class="language-python">correct <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>TestX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    guess <span class="token operator">=</span> classifier<span class="token punctuation">(</span>TestX<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'predict: %s, answer: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>guess<span class="token punctuation">,</span> TestY<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> guess <span class="token operator">==</span> TestY<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>        correct <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Rate of correct predictions: %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>correct <span class="token operator">/</span> len<span class="token punctuation">(</span>TestX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>predict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: SMG, answer: SMGpredict: SMG, answer: SMGpredict: RF, answer: RFpredict: RF, answer: RFpredict: RF, answer: RFpredict: RF, answer: RFpredict: RF, answer: RFpredict: RF, answer: RFpredict: AR, answer: ARpredict: AR, answer: ARpredict: AR, answer: ARpredict: AR, answer: ARpredict: AR, answer: ARpredict: AR, answer: ARpredict: AR, answer: ARpredict: MG, answer: MGpredict: MG, answer: MGpredict: MG, answer: MGpredict: MG, answer: MGpredict: MG, answer: MGpredict: HG, answer: HGpredict: HG, answer: HGpredict: SMG, answer: SMGpredict: AR, answer: ARpredict: MG, answer: MGpredict: MG, answer: MGpredict: MG, answer: MGpredict: HG, answer: HGpredict: HG, answer: HGpredict: SMG, answer: SMGpredict: HG, answer: HGpredict: RF, answer: RFpredict: SMG, answer: SMGpredict: SG, answer: SGpredict: SG, answer: SGpredict: SG, answer: SGpredict: HG, answer: HGpredict: MG, answer: MGpredict: SMG, answer: SMGpredict: AR, answer: ARpredict: HG, answer: HGpredict: RF, answer: RFpredict: AR, answer: ARpredict: SG, answer: SGpredict: AR, answer: ARpredict: SG, answer: SGpredict: RF, answer: RFRate of correct predictions: 1.000000</code></pre><p>竟然是100%？？这么高的准确率，我佛了。。。</p><p>大概是因为少前里面每一种枪的特征太好区分了吧。</p><p>这里用sklearn库的朴素贝叶斯再试试：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> GaussianNBmodel <span class="token operator">=</span> GaussianNB<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>TrainX<span class="token punctuation">,</span> TrainY<span class="token punctuation">)</span>res <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>TestX<span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'predict: %s, answer: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> TestY<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> TestY<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Rate of correct predictions: %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>count <span class="token operator">/</span> len<span class="token punctuation">(</span>TestY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>predict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: SMG, answer: SMGpredict: SMG, answer: SMGpredict: RF, answer: RFpredict: RF, answer: RFpredict: RF, answer: RF...Rate of correct predictions: 1.000000</code></pre><ul><li>毫无悬念的100%……好吧这说明少前的数据确实特征很明显=。=</li></ul><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="什么是朴素贝叶斯分类？"><a href="#什么是朴素贝叶斯分类？" class="headerlink" title="什么是朴素贝叶斯分类？"></a>什么是朴素贝叶斯分类？</h3><p>假设所有特征是比较独立的情况下，上面的$\sum$矩阵退化为对角阵，可以用$\sigma$向量表示；</p><p>这个时候就是朴素贝叶斯分类，也就是上面sklearn库所做的事情。</p><p>但是在属性特征相关性比较好的时候，NB的分类效果就比较差。</p><p>上面的方法使用的是多个特征的联合概率密度，在维度较高的时候模型就会比较复杂，同时也会造成稀疏的情况。</p><h3 id="可不可以用回归的方法直接做分类？"><a href="#可不可以用回归的方法直接做分类？" class="headerlink" title="可不可以用回归的方法直接做分类？"></a>可不可以用回归的方法直接做分类？</h3><p>一般这么做不好。</p><p>举个例子，用一个回归函数的值和分类对应，函数值接近1就是A类，接近2就是B类，以此类推。</p><p>这样固然可以训练出拟合train data的模型，但是数值上的接近关系不一定就能反映出分类之间的关系（比如，1和2比起1和3更接近，但是A和B不一定就能够比A和C的关系更接近），这样的拟合是不符合分类规律的。</p><h3 id="贝叶斯算法一定是用高斯（正态）分布嘛？"><a href="#贝叶斯算法一定是用高斯（正态）分布嘛？" class="headerlink" title="贝叶斯算法一定是用高斯（正态）分布嘛？"></a>贝叶斯算法一定是用高斯（正态）分布嘛？</h3><p>不一定。这里是根据变量的分布特征决定的，其他还有如多项式模型和伯努利模型都是常见的分布模型。</p><p>特征是离散的时候，一般使用多项式模型；</p><p>特征是离散而且只有0和1两种分布的时候，一般采用伯努利模型。</p><p>特征是连续的时候，一般使用高斯分布模型；</p><h3 id="其他分类器有哪些？"><a href="#其他分类器有哪些？" class="headerlink" title="其他分类器有哪些？"></a>其他分类器有哪些？</h3><p>逻辑回归，SVM，和决策树等等。</p><p>逻辑回归适合线性数据（什么是线性数据？）。</p><p>SVM非常耗时间，工业上不推荐。</p><p>决策树适合用在特征是离散型的变量上。</p><p>贝叶斯通常是用在NLP里面用来做文本分类等等的事情（用在这里也只是因为李宏毅老师讲了这个）</p><p>我暂时说不清楚它们的具体优劣，可以参考<a href="https://blog.csdn.net/July_sun/article/details/53088673" target="_blank" rel="noopener">这里</a>。</p><hr><p>其实个人有几个问题：</p><ul><li><p>混合参数如何建模？比如又有数值型，又有离散型，应该用什么模型？</p></li><li><p>协方差矩阵对比朴素贝叶斯的方差向量效果会提高多少？</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了李宏毅老师讲解classification的视频，决定以少女前线的枪种分类为例，试做一个贝叶斯分类器。&lt;/p&gt;
&lt;p&gt;前半段理论主要来自李宏毅老师的视频，后半段是自己实现的贝叶斯分类器代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/04/07/ML-4-Bayesian/head.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;找这张配图的时间比码字时间还长&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;我永远喜欢忤逆小队！&lt;/p&gt;
    
    </summary>
    
      <category term="machine learning" scheme="http://riroaki.github.io/categories/machine-learning/"/>
    
    
      <category term="classification" scheme="http://riroaki.github.io/tags/classification/"/>
    
      <category term="naive bayesian" scheme="http://riroaki.github.io/tags/naive-bayesian/"/>
    
  </entry>
  
  <entry>
    <title>32.Longest Valid Partheses</title>
    <link href="http://riroaki.github.io/2019/04/07/32-Longest-Valid-Partheses/"/>
    <id>http://riroaki.github.io/2019/04/07/32-Longest-Valid-Partheses/</id>
    <published>2019-04-06T18:23:15.000Z</published>
    <updated>2019-04-10T14:26:59.460Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-java"><code class="language-java">Input<span class="token operator">:</span> <span class="token string">"(()"</span>Output<span class="token operator">:</span> <span class="token number">2</span>Explanation<span class="token operator">:</span> The longest valid parentheses substring is <span class="token string">"()"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-java"><code class="language-java">Input<span class="token operator">:</span> <span class="token string">")()())"</span>Output<span class="token operator">:</span> <span class="token number">4</span>Explanation<span class="token operator">:</span> The longest valid parentheses substring is <span class="token string">"()()"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="暴力求解全部序列找最长"><a href="#暴力求解全部序列找最长" class="headerlink" title="暴力求解全部序列找最长"></a>暴力求解全部序列找最长</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> start <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> start<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">int</span> balance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> end <span class="token operator">=</span> start<span class="token punctuation">;</span> end <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> end<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              balance <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span>  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                  res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(1)​$</li></ul><h4 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h4><p>公式理解起来有点困难，下面是解释。</p><ul><li>dp数组记录从0开始，以i位结尾的最长的合法序列长度。</li><li>只有右括号才能形成合法的括号对，所以左括号的dp值为0，在遇到右括号的时候检查：<ul><li>如果前一个括号是左括号，那么长度就是往前找的一位（假如有）+2</li><li>如果前一个括号是右括号，而且往前的一个完整序列之前那一位是左括号（如果没有或者是右括号，那么也不能匹配当前位置），那么长度等于从这个左括号开始到当前位的长度。<ul><li>额外注意⚠️如果在这个左括号之前还存在匹配，那么需要加上这一段的长度！</li></ul></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">?</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(n)$</li></ul><h4 id="使用栈"><a href="#使用栈" class="headerlink" title="使用栈"></a>使用栈</h4><p>这个做法旨在通过栈维护平衡，把所有不平衡的下标压栈。</p><ul><li>遇到左括号就压栈；</li><li>遇到右括号，如果栈内记录了待匹配的左括号，则出栈；否则（待匹配的是右括号，或者栈是空的情况下）压栈。</li></ul><p>这样一来，栈中所有的下标就是不平衡处的位置，而相邻的下标之间（包括头和尾的-1和n）的字符串就是平衡的，我们只要依次出栈并计算，找到最大值就可以。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里的-1是为计算方便</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token keyword">int</span> last <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span>                  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 计算包括-1和n在内所有非平衡下标之间的长度</span>      <span class="token keyword">int</span> right <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          right <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(n)​$</li></ul><h4 id="双扫描，无额外空间"><a href="#双扫描，无额外空间" class="headerlink" title="双扫描，无额外空间"></a>双扫描，无额外空间</h4><p>这一做法受到最大子序列和的启发——最大子序列和的做法是，累加遇到负数就重置当前的和为0，扫描一遍数组即可得出答案——贪心的思路。</p><p>在这里，我们需要扫描两次：</p><ul><li>从左向右，左括号为1、右括号为-1，和为0时则平衡，和为负时归零；</li><li>从右向左，左括号为-1、右括号为1，其余同上。</li></ul><p>这样得出的最大的长度就是答案。</p><p>那么，如何解释？</p><ul><li>考虑从左向右的情况，在遇到右括号多于左括号的时候归零是合理的。因为不论从那一位开始，以这一位结尾的字符串肯定是不平衡的。而我们无法顾及的情况在于左括号偏多的情形：很有可能开头的几个左括号一直到最后都没有匹配的右括号，而中间潜在的合法匹配被我们忽略（因为和一直是正数）。</li><li>上面描述的这个情形，从右向左的扫描能够帮我们解决。相应的，从右到左的扫描无法解决的右括号偏多的情形，这在左括号里面得以解决。</li><li>两次扫描分别解决了两种情形，比较得出长度最大的是哪一种，就是答案。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            sum <span class="token operator">=</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            len<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    sum <span class="token operator">=</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            sum <span class="token operator">=</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            len<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;, find the length of the longest valid (well-formed) parentheses substring.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://riroaki.github.io/categories/leetcode/"/>
    
    
      <category term="hard" scheme="http://riroaki.github.io/tags/hard/"/>
    
      <category term="dp" scheme="http://riroaki.github.io/tags/dp/"/>
    
      <category term="string" scheme="http://riroaki.github.io/tags/string/"/>
    
      <category term="stack" scheme="http://riroaki.github.io/tags/stack/"/>
    
  </entry>
  
</feed>
