<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Riroaki&#39;s home</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-27T18:17:50.628Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Riroaki</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记Google实习面试经历</title>
    <link href="http://yoursite.com/2019/03/28/%E8%AE%B0Google%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/"/>
    <id>http://yoursite.com/2019/03/28/记Google实习面试经历/</id>
    <published>2019-03-27T17:55:55.000Z</published>
    <updated>2019-03-27T18:17:50.628Z</updated>
    
    <content type="html"><![CDATA[<p>如果有人想看的话，我准备的<a href="https://drive.google.com/open?id=1NrEsBBuBsL-8jmfkVNUvnK_YwpPPlW_g" target="_blank" rel="noopener">英文简历</a>（google drive）</p><p>今天发邮件催了一下hr，对面表示面试成绩不够好被挂着，然而也没有直接刷……学长说其实基本就是算凉了，我也不抱希望。总体来说二面发挥较好，一面比较失败。等有空再补一下这两次面试的经历。</p><p>还是希望有加面的机会啊……毕竟准备了两个月刷leetcode，也做了快三百题来着（虽然还是不太够</p><a id="more"></a><p>to be continued…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果有人想看的话，我准备的&lt;a href=&quot;https://drive.google.com/open?id=1NrEsBBuBsL-8jmfkVNUvnK_YwpPPlW_g&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;英文简历&lt;/a&gt;（google drive）&lt;/p&gt;
&lt;p&gt;今天发邮件催了一下hr，对面表示面试成绩不够好被挂着，然而也没有直接刷……学长说其实基本就是算凉了，我也不抱希望。总体来说二面发挥较好，一面比较失败。等有空再补一下这两次面试的经历。&lt;/p&gt;
&lt;p&gt;还是希望有加面的机会啊……毕竟准备了两个月刷leetcode，也做了快三百题来着（虽然还是不太够&lt;/p&gt;
    
    </summary>
    
      <category term="interview" scheme="http://yoursite.com/categories/interview/"/>
    
    
      <category term="intern" scheme="http://yoursite.com/tags/intern/"/>
    
      <category term="google" scheme="http://yoursite.com/tags/google/"/>
    
  </entry>
  
  <entry>
    <title>重置系统和ssh连接</title>
    <link href="http://yoursite.com/2019/03/28/%E9%87%8D%E7%BD%AE%E7%B3%BB%E7%BB%9F%E5%92%8Cssh%E8%BF%9E%E6%8E%A5/"/>
    <id>http://yoursite.com/2019/03/28/重置系统和ssh连接/</id>
    <published>2019-03-27T17:51:45.000Z</published>
    <updated>2019-03-27T20:08:09.146Z</updated>
    
    <content type="html"><![CDATA[<p>之前不小心更新了Ubuntu18.0，结果没法ssh连接了。。。</p><p>无奈之下重置了系统，知乎查了一下Ubuntu和其他Linux系统，感觉相对于服务器来说Debian更加稳定些，Ubuntu太倒腾了。重置完了之后，再ssh连接，咦？为啥还是不能连。。。</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br><span class="line">The fingerprint for the ECDSA key sent by the remote host is</span><br><span class="line">SHA256:2R1nMbHLVDbkj8Q564B1ZwsBkDMm92bJtL4hhb5FSr4.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key in /Users/Aki/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending ECDSA key in /Users/Aki/.ssh/known_hosts:2</span><br><span class="line">ECDSA host key for 120.79.161.245 has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br></pre></td></tr></table></figure><p>这应该是我自己电脑对对面系统做了检测，发现ecdsa的验证码不一样了（因为重置了系统啊，感觉不安全就不让我连接了（这个@@@……是我乔鲁诺哒！</p><p>于是谷歌了一下，发现可以通过这个指令移除：<code>ssh-keygen -R [ip]</code></p><p>系统回复：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Host 120.79.161.245 found: line 2</span><br><span class="line">/Users/Aki/.ssh/known_hosts updated.</span><br><span class="line">Original contents retained as /Users/Aki/.ssh/known_hosts.old</span><br></pre></td></tr></table></figure><p>ok了。现在可以重新连接。</p><p>重新连接后会询问你是否信任，yes之后就会重新将域名加入列表。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前不小心更新了Ubuntu18.0，结果没法ssh连接了。。。&lt;/p&gt;
&lt;p&gt;无奈之下重置了系统，知乎查了一下Ubuntu和其他Linux系统，感觉相对于服务器来说Debian更加稳定些，Ubuntu太倒腾了。重置完了之后，再ssh连接，咦？为啥还是不能连。。。&lt;/p&gt;
    
    </summary>
    
      <category term="back end" scheme="http://yoursite.com/categories/back-end/"/>
    
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>收报名表过程出现的bug以及解决方案</title>
    <link href="http://yoursite.com/2019/03/28/%E6%94%B6%E6%8A%A5%E5%90%8D%E8%A1%A8%E8%BF%87%E7%A8%8B%E5%87%BA%E7%8E%B0%E7%9A%84bug%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2019/03/28/收报名表过程出现的bug以及解决方案/</id>
    <published>2019-03-27T17:48:30.000Z</published>
    <updated>2019-03-27T18:04:06.977Z</updated>
    
    <content type="html"><![CDATA[<ul><li>校友文件名太长的问题</li><li>文件太大的问题（60m出错，姓名未填写错误）</li><li>校友文件名过长（因命名规则：账号+下划线+账号的md5值）</li><li>文件传不了，未知原因</li><li>文件无法覆盖，未知原因</li></ul><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>无法覆盖<ul><li>数据库里已经有相应文件名，只需要在文件目录<code>/var/www/File/applyfile</code>中替换文件即可。</li></ul></li><li>无法上传<ul><li>数据库中修改对应学号的<code>profile</code>属性为文件名。</li><li>在文件目录中加入文件。 </li></ul></li><li>备注：文件名默认为<code>账户名+下划线+账户名的哈希值</code>，其中账户名可能是学号（本科生）、邮箱（研究生、校友）</li></ul><h3 id="mysql远程连接"><a href="#mysql远程连接" class="headerlink" title="mysql远程连接"></a>mysql远程连接</h3><p>直接在终端建立ssh和mysql连接不安全，而且服务器不支持中文输入，有时候操作不便。</p><h4 id="更新配置"><a href="#更新配置" class="headerlink" title="更新配置"></a>更新配置</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'password'</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><ul><li><code>*. *</code>：表示所有数据库（第一个 <em>）和表（第二个 </em>）。</li><li><code>root</code>：表示允许访问时登陆用的用户名。</li><li><code>%</code>：表示允许来自任何地址的访问。如果要指定一个ip，那么把%换成相应ip。</li><li><code>password</code>：表示设定密码。</li><li><code>flush privileges</code>：表示立即刷新使权限生效。</li></ul><p>这一步之后可以在表中查看结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; use mysql</span><br><span class="line">&gt; select * from user;</span><br><span class="line"><span class="comment">-- 可以看到密码是经过md5加密之后的值。</span></span><br></pre></td></tr></table></figure><h4 id="修改cnf文件"><a href="#修改cnf文件" class="headerlink" title="修改cnf文件"></a>修改cnf文件</h4><ul><li>mysql的配置文件在目录<code>/etc/mysql/</code>下，需要编辑其开放的端口。</li><li>将<code>bind-address = 127.0.0.1</code>注释掉，因为它的意思是默认本地端口访问。</li></ul><h4 id="重启mysql服务"><a href="#重启mysql服务" class="headerlink" title="重启mysql服务"></a>重启mysql服务</h4><p><code>service mysql restart</code></p><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><ul><li>打开mysqlworkbench，建立新的连接，输入用户名和密码、服务器ip。端口号默认3306即可。</li><li>进行连接之后就可以远程操作了。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;校友文件名太长的问题&lt;/li&gt;
&lt;li&gt;文件太大的问题（60m出错，姓名未填写错误）&lt;/li&gt;
&lt;li&gt;校友文件名过长（因命名规则：账号+下划线+账号的md5值）&lt;/li&gt;
&lt;li&gt;文件传不了，未知原因&lt;/li&gt;
&lt;li&gt;文件无法覆盖，未知原因&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="back end" scheme="http://yoursite.com/categories/back-end/"/>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>27.Remove Element</title>
    <link href="http://yoursite.com/2019/03/28/27-Remove-Element/"/>
    <id>http://yoursite.com/2019/03/28/27-Remove-Element/</id>
    <published>2019-03-27T17:31:06.000Z</published>
    <updated>2019-03-27T18:11:45.164Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an array <em>nums</em> and a value <em>val</em>, remove all instances of that value <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> and return the new length.</p><p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array in-place</strong> with O(1) extra memory.</p><p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p><a id="more"></a><p><strong>Example 1:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>], val = <span class="number">3</span>,</span><br><span class="line"></span><br><span class="line">Your function should <span class="keyword">return</span> length = <span class="number">2</span>, with the first two elements of nums being <span class="number">2</span>.</span><br><span class="line"></span><br><span class="line">It doesn<span class="string">'t matter what you leave beyond the returned length.</span></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">2</span>], val = <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">Your function should <span class="keyword">return</span> length = <span class="number">5</span>, with the first five elements of nums containing <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">0</span>, and <span class="number">4</span>.</span><br><span class="line"></span><br><span class="line">Note that the order of those five elements can be arbitrary.</span><br><span class="line"></span><br><span class="line">It doesn<span class="string">'t matter what values are set beyond the returned length.</span></span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="双指针，快慢操作"><a href="#双指针，快慢操作" class="headerlink" title="双指针，快慢操作"></a>双指针，快慢操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> slow = <span class="number">0</span>, fast = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; fast &lt; nums.length; fast++)</span><br><span class="line">      <span class="keyword">if</span> (nums[fast] != val) nums[slow++] = nums[fast];</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul><h4 id="双指针——改进"><a href="#双指针——改进" class="headerlink" title="双指针——改进"></a>双指针——改进</h4><ul><li>在val元素较少的时候，为了避免过多的移动，采用交换机制；</li><li>这里的交换十分巧妙：将末尾的数替换当前的i，同时下一轮又会检查i位置的数；而n也会随交换缩小。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, n = nums.length;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] == val) &#123;</span><br><span class="line">            nums[i] = nums[n - <span class="number">1</span>];</span><br><span class="line">          n--;</span><br><span class="line">            <span class="comment">// reduce array size by one</span></span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given an array &lt;em&gt;nums&lt;/em&gt; and a value &lt;em&gt;val&lt;/em&gt;, remove all instances of that value &lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;in-place&lt;/strong&gt;&lt;/a&gt; and return the new length.&lt;/p&gt;
&lt;p&gt;Do not allocate extra space for another array, you must do this by &lt;strong&gt;modifying the input array in-place&lt;/strong&gt; with O(1) extra memory.&lt;/p&gt;
&lt;p&gt;The order of elements can be changed. It doesn’t matter what you leave beyond the new length.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://yoursite.com/tags/array/"/>
    
      <category term="two pointers" scheme="http://yoursite.com/tags/two-pointers/"/>
    
      <category term="easy" scheme="http://yoursite.com/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>26.Remove Duplicates from Sorted Array</title>
    <link href="http://yoursite.com/2019/03/28/26-Remove-Duplicates-from-Sorted-Array/"/>
    <id>http://yoursite.com/2019/03/28/26-Remove-Duplicates-from-Sorted-Array/</id>
    <published>2019-03-27T17:28:12.000Z</published>
    <updated>2019-03-27T18:11:35.708Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a sorted array <em>nums</em>, remove the duplicates <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> such that each element appear only <em>once</em> and return the new length.</p><p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array in-place</strong> with O(1) extra memory.</p><a id="more"></a><p><strong>Example 1:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line"></span><br><span class="line">Your function should <span class="keyword">return</span> length = <span class="number">2</span>, with the first two elements of nums being <span class="number">1</span> and <span class="number">2</span> respectively.</span><br><span class="line"></span><br><span class="line">It doesn<span class="string">'t matter what you leave beyond the returned length.</span></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line"></span><br><span class="line">Your function should <span class="keyword">return</span> length = <span class="number">5</span>, with the first five elements of nums being modified to <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, and <span class="number">4</span> respectively.</span><br><span class="line"></span><br><span class="line">It doesn<span class="string">'t matter what values are set beyond the returned length.</span></span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="双指针，快慢操作。"><a href="#双指针，快慢操作。" class="headerlink" title="双指针，快慢操作。"></a>双指针，快慢操作。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> slow = <span class="number">0</span>, fast = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; fast &lt; nums.length; fast++)</span><br><span class="line">        <span class="keyword">if</span> (nums[fast] != nums[slow]) nums[++slow] = nums[fast];</span><br><span class="line">    <span class="keyword">return</span> slow + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a sorted array &lt;em&gt;nums&lt;/em&gt;, remove the duplicates &lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;in-place&lt;/strong&gt;&lt;/a&gt; such that each element appear only &lt;em&gt;once&lt;/em&gt; and return the new length.&lt;/p&gt;
&lt;p&gt;Do not allocate extra space for another array, you must do this by &lt;strong&gt;modifying the input array in-place&lt;/strong&gt; with O(1) extra memory.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://yoursite.com/tags/array/"/>
    
      <category term="two pointers" scheme="http://yoursite.com/tags/two-pointers/"/>
    
      <category term="easy" scheme="http://yoursite.com/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器部署：Flask + gunicorn + nginx</title>
    <link href="http://yoursite.com/2019/03/28/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%EF%BC%9AFlask-gunicorn-nginx/"/>
    <id>http://yoursite.com/2019/03/28/Linux服务器部署：Flask-gunicorn-nginx/</id>
    <published>2019-03-27T16:17:46.000Z</published>
    <updated>2019-03-27T18:00:03.830Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务器参数"><a href="#服务器参数" class="headerlink" title="服务器参数"></a>服务器参数</h3><ul><li>服务器ip：120.79.161.245（阿里云轻量级服务器，学生机）</li><li>阿里管理控制台：<a href="https://swas.console.aliyun.com/" target="_blank" rel="noopener">https://swas.console.aliyun.com/</a></li><li>os：Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-93-generic x86_64)</li></ul><a id="more"></a><h3 id="连接脚本："><a href="#连接脚本：" class="headerlink" title="连接脚本："></a>连接脚本：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/usr/bin/expect</span><br><span class="line"></span><br><span class="line">spawn ssh root@120.79.161.245</span><br><span class="line">expect "*password*" </span><br><span class="line">send "*****"</span><br><span class="line">expect "Welcome*"</span><br><span class="line">send "cd /data/www/\r"</span><br><span class="line">interact</span><br></pre></td></tr></table></figure><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br><span class="line">sudo apt-get install python3.6</span><br><span class="line">python3 -V  # --version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 导出自己电脑上安装的库</span><br><span class="line">pip3 freeze &gt; requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 把requirements.txt拷贝到服务器上</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 按照库列表依次安装库</span><br><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><ul><li>这个应该不用多说了吧。指定FLASK的app入口，之后run就可以了。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FLASK_APP=war.py</span><br><span class="line">flask run</span><br><span class="line"><span class="meta">#</span> 在war项目下目录结构是这样的：</span><br><span class="line">.</span><br><span class="line">|____app</span><br><span class="line">| |______init__.py</span><br><span class="line">| |______pycache__</span><br><span class="line">| | |____*.pyc</span><br><span class="line">| |____templates</span><br><span class="line">| | |____*.html</span><br><span class="line">| |____routes.py</span><br><span class="line">|______pycache__</span><br><span class="line">| |____*.pyc</span><br><span class="line">|____war.py</span><br></pre></td></tr></table></figure><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ul><li><code>nginx</code>配置文件：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/nginx/nginx./conf</span><br><span class="line"><span class="meta">#</span> 在http的大括号内加入如下内容：</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;  # 监听80号端口（默认访问端口）</span><br><span class="line">server_name _;  # 自身ip，下划线代替；和端口号组成外网监听地址</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:8080;  # 转接到本机地址和端口，挑一个没有被占用的端口</span><br><span class="line">proxy_redirect off;</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>gunicorn</code>操作指令：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nohup gunicorn -w 1 -b 127.0.0.1:8080 main:app -D</span><br><span class="line"><span class="meta">#</span> nohup表示不输出任何信息，并将log存到当前目录下nohup.out文件；</span><br><span class="line"><span class="meta">#</span> -w指定开启的进程数量，一般推荐：【核数】 * 2 + 1，全写是--workers=1；</span><br><span class="line"><span class="meta">#</span> -b指定转到本机的接口，必须和nginx配置文件的内容一致；</span><br><span class="line"><span class="meta">#</span> 127.0.0.1即localhost，本地端口；</span><br><span class="line"><span class="meta">#</span> main:app指定gunicorn要代理的app入口，表示main.py里面的app；</span><br><span class="line"><span class="meta">#</span> -D表示daemon，守护进程，也就是后台运行</span><br></pre></td></tr></table></figure><ul><li>常用指令：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 进程相关</span><br><span class="line">kill -s 9 [pid]</span><br><span class="line">ps aux# 查看所有进程</span><br><span class="line">grep [string]  # 查看所有包含[string]的文件</span><br><span class="line">ps aux | grep nginx  # 管道，将显示nginx相关进程信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 文件相关</span><br><span class="line">tree  # linux自带指令</span><br><span class="line"><span class="meta">  #</span> BTW，macOS如果想优雅地使用tree，需要如下操作：</span><br><span class="line"><span class="meta">  #</span> vi ～/.bash_profile  ## 在个人目录下创建/更改配置文件</span><br><span class="line"><span class="meta">  #</span> i  ## 插入模式</span><br><span class="line"><span class="meta">  #</span> alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"  ## 设置同义词组</span><br><span class="line"><span class="meta">  #</span> wq  ## 退出编辑</span><br><span class="line"><span class="meta">  #</span> source .bash_profile  ## 重新加载配置文件</span><br><span class="line">  </span><br><span class="line">cat [filename]</span><br><span class="line">vi [filename]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> nginx相关</span><br><span class="line">/etc/init.d/nginx start</span><br><span class="line">/etc/init.d/nginx stop</span><br><span class="line">/etc/init.d/nginx restart</span><br><span class="line"><span class="meta">#</span> 或者也可以 service nginx start.stop.restart</span><br><span class="line"><span class="meta">#</span> 再或者可以 nginx -s start.stop.restart</span><br><span class="line">vi /etc/nginx/nginx.conf  # 也可以选择 /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><ul><li><p>关于配置文件</p><ul><li>在配置nginx的时候，网上的资料告诉我配置文件位于<code>/etc/nginx/sites-available/default</code>，我改了半天却并无卯月……然后在zh的帮助下查看了配置文件的路径，我的路径不在参考范围内。</li><li>这个指令既可以测试配置文件的有效性，也可以看到当前运行的配置文件的位置：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/nginx -t</span><br><span class="line"></span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br><span class="line"><span class="meta">#</span> 于是我们看到/etc/nginx/nginx.conf就是配置文件（这应该是默认的配置文件）</span><br></pre></td></tr></table></figure><ul><li>接着，在这个nginx.conf里面还有一段文字表明nginx会参考的配置文件路径，如果不修改上面第一个文件，修改下面几个路径下的文件也是可以的：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>#</span><br><span class="line"><span class="meta">#</span> Virtual Host Configs</span><br><span class="line"><span class="meta">#</span>#</span><br><span class="line">  </span><br><span class="line">include /etc/nginx/conf.d/*.conf;</span><br><span class="line">include /etc/nginx/sites-enabled/*;</span><br></pre></td></tr></table></figure></li><li><p>记一次bug</p><ul><li>10月6日晚，这个ip发生了一次神秘的bug：刷新index页面的时候，游戏轮数时而显示第一轮，时而显示第二轮，但是总是和文件game.txt里面不一致。</li><li>调整了一晚上都没有找到问题的核心，终于在一次调试中偶然发现-w改成1之后就不会出错（后来知道不是这个原因），因此提出一个假说：是不是多个gunicorn进程引发的混乱？</li><li>可惜好景不长，第二天重新使用workers=1的参数测试的时候，发现问题依然存在。最终查看系统所有进程突然发现，关于gunicorn的进程数（每个的workers都是1）出现好几个，分别是不同的时间段开启的……等等，我好像明白了什么。</li><li>最终真相大白：是因为不同时间开启的gunicorn进程未能有效关闭（每一次我都是重启nginx再重新输入gunicorn指令），从而前几次的gunicorn维护的页面和这一次的页面产生了冲突……导致后来的每一次测试都是在几个不同时段的gunicorn进程中辗转，时而进入这个进程时而进入那一个……</li><li>至于昨晚的结果，则应该是因为那一次尝试恰好伴随着服务器的重启的缘故。</li><li>这一次的<strong>教训</strong>：以后，每次结束测试都要把所有gunicorn的进程关闭。nginx也不例外。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;服务器参数&quot;&gt;&lt;a href=&quot;#服务器参数&quot; class=&quot;headerlink&quot; title=&quot;服务器参数&quot;&gt;&lt;/a&gt;服务器参数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;服务器ip：120.79.161.245（阿里云轻量级服务器，学生机）&lt;/li&gt;
&lt;li&gt;阿里管理控制台：&lt;a href=&quot;https://swas.console.aliyun.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://swas.console.aliyun.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;os：Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-93-generic x86_64)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="back end" scheme="http://yoursite.com/categories/back-end/"/>
    
    
      <category term="gunicorn" scheme="http://yoursite.com/tags/gunicorn/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>25.Reverse Nodes in k-Group</title>
    <link href="http://yoursite.com/2019/03/27/25-Reverse-Nodes-in-k-Group/"/>
    <id>http://yoursite.com/2019/03/27/25-Reverse-Nodes-in-k-Group/</id>
    <published>2019-03-27T14:26:23.000Z</published>
    <updated>2019-03-27T18:11:26.716Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and return its modified list.</p><p><em>k</em> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <em>k</em> then left-out nodes in the end should remain as it is.</p><a id="more"></a><p><strong>Example:</strong></p><p>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p><p>For <em>k</em> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p><p>For <em>k</em> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p><p><strong>Note:</strong></p><ul><li>Only constant extra memory is allowed.</li><li>You may not alter the values in the list’s nodes, only nodes itself may be changed.</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="用k大小的数组存节点，并依次翻转"><a href="#用k大小的数组存节点，并依次翻转" class="headerlink" title="用k大小的数组存节点，并依次翻转"></a>用k大小的数组存节点，并依次翻转</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    ListNode[] group = <span class="keyword">new</span> ListNode[k + <span class="number">2</span>];<span class="comment">// 保存k集团的前一个，k集团，以及k集团的后一个</span></span><br><span class="line">    group[<span class="number">0</span>] = dummy;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; k + <span class="number">2</span> &amp;&amp; group[i - <span class="number">1</span>] != <span class="keyword">null</span>; i++)</span><br><span class="line">            group[i] = group[i - <span class="number">1</span>].next;</span><br><span class="line">        <span class="keyword">if</span> (group[i - <span class="number">1</span>] == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        group[<span class="number">0</span>].next = group[k];</span><br><span class="line">        group[<span class="number">1</span>].next = group[k + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; k + <span class="number">1</span>; j++)</span><br><span class="line">            group[j].next = group[j - <span class="number">1</span>];</span><br><span class="line">        group[<span class="number">0</span>] = group[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(k)​$</li><li>空间复杂度：$O(n)​$</li></ul><h4 id="只使用常数个节点的做法"><a href="#只使用常数个节点的做法" class="headerlink" title="只使用常数个节点的做法"></a>只使用常数个节点的做法</h4><ul><li>问题的关键在于如何反转一个k大小的链表；这里使用的是将每次的第一个插到末尾的做法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span> || k &lt; <span class="number">2</span>)</span><br><span class="line">      <span class="keyword">return</span> head;</span><br><span class="line">  ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">  dummy.next = head;</span><br><span class="line">  ListNode tail = dummy, prev = dummy, temp;</span><br><span class="line">  <span class="keyword">int</span> count;</span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        count = k;</span><br><span class="line">        <span class="keyword">while</span> (count &gt; <span class="number">0</span> &amp;&amp; tail != <span class="keyword">null</span>) &#123;</span><br><span class="line">            count--;</span><br><span class="line">            tail = tail.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tail == <span class="keyword">null</span>)<span class="comment">// 剩下来节点不够k个</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">// 此时tail指向k集团的最后一个节点</span></span><br><span class="line">        head = prev.next;<span class="comment">// head指向的是k集团的第一个节点，将会是翻转后最后一个节点，</span></span><br><span class="line">      <span class="comment">// 同时也是下一个k集团的前一个节点</span></span><br><span class="line">        <span class="comment">// prev--&gt;temp--&gt;...---&gt;....---&gt;tail--&gt;....</span></span><br><span class="line">        <span class="comment">// Delete @temp and insert to the next position of @tail</span></span><br><span class="line">        <span class="comment">// prev--&gt;...--&gt;...--&gt;tail--&gt;head--&gt;...</span></span><br><span class="line">        <span class="comment">// Assign @temp to the next node of @prev</span></span><br><span class="line">        <span class="comment">// prev--&gt;temp--&gt;...--&gt;tail--&gt;...--&gt;...</span></span><br><span class="line">        <span class="comment">// Keep doing until @tail is the next node of @prev</span></span><br><span class="line">        <span class="keyword">while</span> (prev.next != tail) &#123;</span><br><span class="line">            temp = prev.next;<span class="comment">//Assign</span></span><br><span class="line">            prev.next = temp.next;<span class="comment">//Delete，从左侧删除temp</span></span><br><span class="line">            temp.next = tail.next;</span><br><span class="line">            tail.next = temp;<span class="comment">//Insert，在右侧末尾插入temp</span></span><br><span class="line">        &#125;</span><br><span class="line">        tail = prev = head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)​$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a linked list, reverse the nodes of a linked list &lt;em&gt;k&lt;/em&gt; at a time and return its modified list.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;k&lt;/em&gt; is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of &lt;em&gt;k&lt;/em&gt; then left-out nodes in the end should remain as it is.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="hard" scheme="http://yoursite.com/tags/hard/"/>
    
      <category term="linked list" scheme="http://yoursite.com/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>24.Swap Nodes in Pairs</title>
    <link href="http://yoursite.com/2019/03/27/24-Swap-Nodes-in-Pairs/"/>
    <id>http://yoursite.com/2019/03/27/24-Swap-Nodes-in-Pairs/</id>
    <published>2019-03-27T14:22:31.000Z</published>
    <updated>2019-03-27T18:11:14.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a linked list, swap every two adjacent nodes and return its head.</p><p>You may <strong>not</strong> modify the values in the list’s nodes, only nodes itself may be changed.</p> <a id="more"></a><p><strong>Example:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>, you should <span class="keyword">return</span> the list as <span class="number">2</span>-&gt;<span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">3</span>.</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="直接做就可以了；小心边界情况"><a href="#直接做就可以了；小心边界情况" class="headerlink" title="直接做就可以了；小心边界情况"></a>直接做就可以了；小心边界情况</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">swapPairs</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>), pre = dummy, first = head;</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    <span class="keyword">while</span> (first != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ListNode tmp = first.next;</span><br><span class="line">        <span class="comment">// 无视没有配对的点</span></span><br><span class="line">        <span class="keyword">if</span> (tmp == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        pre.next = tmp;</span><br><span class="line">        first.next = tmp.next;</span><br><span class="line">        tmp.next = first;</span><br><span class="line">        <span class="comment">// 下一对节点</span></span><br><span class="line">        pre = first;</span><br><span class="line">        first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a linked list, swap every two adjacent nodes and return its head.&lt;/p&gt;
&lt;p&gt;You may &lt;strong&gt;not&lt;/strong&gt; modify the values in the list’s nodes, only nodes itself may be changed.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="medium" scheme="http://yoursite.com/tags/medium/"/>
    
      <category term="linked list" scheme="http://yoursite.com/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>23.Merge k Sorted Lists</title>
    <link href="http://yoursite.com/2019/03/27/23-Merge-k-Sorted-Lists/"/>
    <id>http://yoursite.com/2019/03/27/23-Merge-k-Sorted-Lists/</id>
    <published>2019-03-27T13:55:01.000Z</published>
    <updated>2019-03-27T18:10:55.662Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Merge <em>k</em> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p><a id="more"></a><p><strong>Example:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line">  <span class="number">1</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>,</span><br><span class="line">  <span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>,</span><br><span class="line">  <span class="number">2</span>-&gt;<span class="number">6</span></span><br><span class="line">]</span><br><span class="line">Output: <span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>-&gt;<span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="将全部元素加入list，排序后转回链表"><a href="#将全部元素加入list，排序后转回链表" class="headerlink" title="将全部元素加入list，排序后转回链表"></a>将全部元素加入list，排序后转回链表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</span><br><span class="line">  List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (ListNode curr : lists) &#123;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">        tmp.add(curr.val);</span><br><span class="line">          curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  Collections.sort(tmp);</span><br><span class="line">  ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>), curr = dummy;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> num : tmp) &#123;</span><br><span class="line">      curr.next = <span class="keyword">new</span> ListNode(num);</span><br><span class="line">      curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(nlog(n))$，其中n是总节点数</li><li>空间复杂度：$O(n)$</li></ul><h4 id="使用最小堆（优先队列）"><a href="#使用最小堆（优先队列）" class="headerlink" title="使用最小堆（优先队列）"></a>使用最小堆（优先队列）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</span><br><span class="line">    PriorityQueue&lt;ListNode&gt; nodeHeap = <span class="keyword">new</span> PriorityQueue&lt;&gt;((o1, o2) -&gt; o1.val - o2.val);</span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>), curr = dummy;</span><br><span class="line">    <span class="keyword">for</span> (ListNode head: lists)</span><br><span class="line">        <span class="keyword">if</span> (head != <span class="keyword">null</span>)</span><br><span class="line">          nodeHeap.offer(head);</span><br><span class="line">    <span class="keyword">while</span> (!nodeHeap.isEmpty()) &#123;</span><br><span class="line">        curr.next = nodeHeap.poll();</span><br><span class="line">        curr = curr.next;</span><br><span class="line">        <span class="keyword">if</span> (curr.next != <span class="keyword">null</span>)</span><br><span class="line">          nodeHeap.add(curr.next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(nlogk)$</li><li>空间复杂度：$O(n+k)​$</li></ul><h4 id="一个接一个合并"><a href="#一个接一个合并" class="headerlink" title="一个接一个合并"></a>一个接一个合并</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</span><br><span class="line">  ListNode res;</span><br><span class="line">  <span class="keyword">if</span> (lists == <span class="keyword">null</span> || lists.length == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  res = lists[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; lists.length; i++)</span><br><span class="line">      res = merge(res, lists[i]);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// code from 21.Merge two lists</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ListNode <span class="title">merge</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode l = <span class="keyword">new</span> ListNode(-<span class="number">1</span>), tmp = l;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1.val &gt; l2.val) &#123;</span><br><span class="line">            tmp.next = l2;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp.next = l1;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = tmp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp.next = l1 != <span class="keyword">null</span> ? l1 : l2;</span><br><span class="line">    <span class="keyword">return</span> l.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(kn)​$</li><li>空间复杂度：$O(n)$</li></ul><h4 id="分治法，两两合并，然后再合并……"><a href="#分治法，两两合并，然后再合并……" class="headerlink" title="分治法，两两合并，然后再合并……"></a>分治法，两两合并，然后再合并……</h4><ul><li><strong>这是实践效果最快的！</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (lists == <span class="keyword">null</span> || lists.length == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">return</span> helper(lists, <span class="number">0</span>, lists.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ListNode <span class="title">helper</span><span class="params">(ListNode list[], <span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (from == to)</span><br><span class="line">      <span class="keyword">return</span> list[from];</span><br><span class="line">  <span class="keyword">if</span> (from == to - <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> merge(list[from], list[to]);</span><br><span class="line">  <span class="keyword">int</span> mid = from + (to - from) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> merge(helper(list, from, mid), helper(list, mid + <span class="number">1</span>, to));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// code from 21.Merge two lists</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ListNode <span class="title">merge</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode l = <span class="keyword">new</span> ListNode(-<span class="number">1</span>), tmp = l;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1.val &gt; l2.val) &#123;</span><br><span class="line">            tmp.next = l2;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp.next = l1;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = tmp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp.next = l1 != <span class="keyword">null</span> ? l1 : l2;</span><br><span class="line">    <span class="keyword">return</span> l.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(nlogk)​$</li><li>空间复杂度：$O(n+log(k))$，其中$log(k)$为递归的栈深度</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Merge &lt;em&gt;k&lt;/em&gt; sorted linked lists and return it as one sorted list. Analyze and describe its complexity.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="hard" scheme="http://yoursite.com/tags/hard/"/>
    
      <category term="divide and conquer" scheme="http://yoursite.com/tags/divide-and-conquer/"/>
    
      <category term="linked list" scheme="http://yoursite.com/tags/linked-list/"/>
    
      <category term="priority queue" scheme="http://yoursite.com/tags/priority-queue/"/>
    
  </entry>
  
  <entry>
    <title>22.Generate Parentheses</title>
    <link href="http://yoursite.com/2019/03/27/22-Generate-Parentheses/"/>
    <id>http://yoursite.com/2019/03/27/22-Generate-Parentheses/</id>
    <published>2019-03-27T11:27:13.000Z</published>
    <updated>2019-03-27T18:10:32.932Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given <em>n</em> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p><a id="more"></a><p>For example, given <em>n</em> = 3, a solution set is:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">"((()))"</span>,</span><br><span class="line">  <span class="string">"(()())"</span>,</span><br><span class="line">  <span class="string">"(())()"</span>,</span><br><span class="line">  <span class="string">"()(())"</span>,</span><br><span class="line">  <span class="string">"()()()"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="递归-回溯，记录开闭括号数量保持平衡"><a href="#递归-回溯，记录开闭括号数量保持平衡" class="headerlink" title="递归+回溯，记录开闭括号数量保持平衡"></a>递归+回溯，记录开闭括号数量保持平衡</h4><ul><li>使用char数组，节约空间、提高效率。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;String&gt; res;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> bound;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">char</span>[] word;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left == bound &amp;&amp; right == bound) &#123;</span><br><span class="line">        res.add(String.valueOf(word));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; bound) &#123;</span><br><span class="line">        word[left + right] = <span class="string">'('</span>;</span><br><span class="line">        helper(left + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (right &lt; bound &amp;&amp; right &lt; left) &#123;</span><br><span class="line">        word[left + right] = <span class="string">')'</span>;</span><br><span class="line">        helper(left, right + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    bound = n;</span><br><span class="line">    word = <span class="keyword">new</span> <span class="keyword">char</span>[n + n];</span><br><span class="line">    helper(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(\dfrac{4^n}{\sqrt{n}})$，这个论证比较复杂，详见<a href="https://zh.wikipedia.org/wiki/%E5%8D%A1%E5%A1%94%E5%85%B0%E6%95%B0" target="_blank" rel="noopener">卡塔兰数</a></li><li>空间复杂度：$O(\dfrac{4^n}{\sqrt{n}})​$</li></ul><h4 id="递归的风骚写法！"><a href="#递归的风骚写法！" class="headerlink" title="递归的风骚写法！"></a>递归的风骚写法！</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; ans = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        ans.add(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; n; ++c)</span><br><span class="line">            <span class="keyword">for</span> (String left: generateParenthesis(c))</span><br><span class="line">                <span class="keyword">for</span> (String right: generateParenthesis(n-<span class="number">1</span>-c))</span><br><span class="line">                    ans.add(<span class="string">"("</span> + left + <span class="string">")"</span> + right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(\dfrac{4^n}{\sqrt{n}})$</li><li>空间复杂度：$O(\dfrac{4^n}{\sqrt{n}})$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given &lt;em&gt;n&lt;/em&gt; pairs of parentheses, write a function to generate all combinations of well-formed parentheses.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="string" scheme="http://yoursite.com/tags/string/"/>
    
      <category term="medium" scheme="http://yoursite.com/tags/medium/"/>
    
      <category term="permutation" scheme="http://yoursite.com/tags/permutation/"/>
    
      <category term="backtracking" scheme="http://yoursite.com/tags/backtracking/"/>
    
  </entry>
  
  <entry>
    <title>21.Merge Two Sorted Lists</title>
    <link href="http://yoursite.com/2019/03/27/21-Merge-Two-Sorted-Lists/"/>
    <id>http://yoursite.com/2019/03/27/21-Merge-Two-Sorted-Lists/</id>
    <published>2019-03-27T11:22:13.000Z</published>
    <updated>2019-03-27T18:10:19.076Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p><a id="more"></a><p><strong>Example:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">4</span>, <span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span></span><br><span class="line">Output: <span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="归并常规做法。"><a href="#归并常规做法。" class="headerlink" title="归并常规做法。"></a>归并常规做法。</h4><ul><li>这里如果不能指向原来的元素就不能这样写，需要重新创造node。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>), curr = dummy;</span><br><span class="line">    <span class="keyword">while</span> (l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1.val &gt; l2.val) &#123;</span><br><span class="line">            curr.next = l2;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            curr.next = l1;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = tmp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    curr.next = l1 != <span class="keyword">null</span> ? l1 : l2;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(n1 + n2)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="two pointers" scheme="http://yoursite.com/tags/two-pointers/"/>
    
      <category term="easy" scheme="http://yoursite.com/tags/easy/"/>
    
      <category term="linked list" scheme="http://yoursite.com/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>20.Valid Parentheses</title>
    <link href="http://yoursite.com/2019/03/27/20-Valid-Parentheses/"/>
    <id>http://yoursite.com/2019/03/27/20-Valid-Parentheses/</id>
    <published>2019-03-27T09:41:58.000Z</published>
    <updated>2019-03-27T18:09:45.909Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code>and <code>&#39;]&#39;</code>, determine if the input string is valid.</p><p>An input string is valid if:</p><ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li></ol><p>Note that an empty string is also considered valid.</p><a id="more"></a><p><strong>Example 1:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">"()"</span></span><br><span class="line">Output: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">"()[]&#123;&#125;"</span></span><br><span class="line">Output: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">"(]"</span></span><br><span class="line">Output: <span class="keyword">false</span></span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">"([)]"</span></span><br><span class="line">Output: <span class="keyword">false</span></span><br></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">"&#123;[]&#125;"</span></span><br><span class="line">Output: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="stack，使用栈保存未匹配的符号"><a href="#stack，使用栈保存未匹配的符号" class="headerlink" title="stack，使用栈保存未匹配的符号"></a>stack，使用栈保存未匹配的符号</h4><ul><li>遇到左括号就压入栈；</li><li>遇到右括号，如栈为空或者栈顶元素不是匹配的左括号，则返回false；否则将匹配的左括号弹出。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> n = s.length();</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>)<span class="comment">// 如果奇数个符号，显然不能匹配</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    HashMap&lt;Character, Integer&gt; symbolVal = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    symbolVal.put(<span class="string">'&#123;'</span>, <span class="number">3</span>);</span><br><span class="line">    symbolVal.put(<span class="string">'&#125;'</span>, -<span class="number">3</span>);</span><br><span class="line">    symbolVal.put(<span class="string">'['</span>, <span class="number">2</span>);</span><br><span class="line">    symbolVal.put(<span class="string">']'</span>, -<span class="number">2</span>);</span><br><span class="line">    symbolVal.put(<span class="string">'('</span>, <span class="number">1</span>);</span><br><span class="line">    symbolVal.put(<span class="string">')'</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = symbolVal.get(c);</span><br><span class="line">        <span class="keyword">if</span> (!stack.empty() &amp;&amp; stack.peek() + tmp == <span class="number">0</span>)</span><br><span class="line">          stack.pop();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          stack.push(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(n)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;{&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;}&amp;#39;&lt;/code&gt;, &lt;code&gt;&amp;#39;[&amp;#39;&lt;/code&gt;and &lt;code&gt;&amp;#39;]&amp;#39;&lt;/code&gt;, determine if the input string is valid.&lt;/p&gt;
&lt;p&gt;An input string is valid if:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open brackets must be closed by the same type of brackets.&lt;/li&gt;
&lt;li&gt;Open brackets must be closed in the correct order.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that an empty string is also considered valid.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="hash map" scheme="http://yoursite.com/tags/hash-map/"/>
    
      <category term="easy" scheme="http://yoursite.com/tags/easy/"/>
    
      <category term="string" scheme="http://yoursite.com/tags/string/"/>
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>19.Remove Nth Node From End of List</title>
    <link href="http://yoursite.com/2019/03/27/19-Remove-Nth-Node-From-End-of-List/"/>
    <id>http://yoursite.com/2019/03/27/19-Remove-Nth-Node-From-End-of-List/</id>
    <published>2019-03-27T09:33:39.000Z</published>
    <updated>2019-03-27T18:09:36.236Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p><a id="more"></a><p><strong>Example:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given linked list: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">5</span>, and n = <span class="number">2</span>.</span><br><span class="line"></span><br><span class="line">After removing the second node from the end, the linked list becomes <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">5</span>.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>Given <em>n</em> will always be valid.</p><p><strong>Follow up:</strong></p><p>Could you do this in one pass?</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="遍历获得节点个数，并直接计算出从head出发需要的步数，即可获得所求节点"><a href="#遍历获得节点个数，并直接计算出从head出发需要的步数，即可获得所求节点" class="headerlink" title="遍历获得节点个数，并直接计算出从head出发需要的步数，即可获得所求节点"></a>遍历获得节点个数，并直接计算出从head出发需要的步数，即可获得所求节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    <span class="keyword">int</span> length  = <span class="number">0</span>;</span><br><span class="line">    ListNode first = head;</span><br><span class="line">    <span class="keyword">while</span> (first != <span class="keyword">null</span>) &#123;</span><br><span class="line">        length++;</span><br><span class="line">        first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    length -= n;</span><br><span class="line">    first = dummy;</span><br><span class="line">    <span class="keyword">while</span> (length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        length--;</span><br><span class="line">        first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    first.next = first.next.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(L)​$，但是需要2 passes。</li><li>空间复杂度：$O(1)$</li></ul><h4 id="快慢指针，快的比慢的多走k步即可，当快节点到头，慢节点将指向正确的位置。"><a href="#快慢指针，快的比慢的多走k步即可，当快节点到头，慢节点将指向正确的位置。" class="headerlink" title="快慢指针，快的比慢的多走k步即可，当快节点到头，慢节点将指向正确的位置。"></a>快慢指针，快的比慢的多走k步即可，当快节点到头，慢节点将指向正确的位置。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    ListNode fast = dummy, slow = dummy;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        <span class="comment">// Invalid n</span></span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    slow.next = slow.next.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(L)$，1 pass</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a linked list, remove the &lt;em&gt;n&lt;/em&gt;-th node from the end of list and return its head.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="two pointers" scheme="http://yoursite.com/tags/two-pointers/"/>
    
      <category term="medium" scheme="http://yoursite.com/tags/medium/"/>
    
      <category term="linked list" scheme="http://yoursite.com/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>18.4Sum</title>
    <link href="http://yoursite.com/2019/03/27/18-4Sum/"/>
    <id>http://yoursite.com/2019/03/27/18-4Sum/</id>
    <published>2019-03-27T09:27:49.000Z</published>
    <updated>2019-03-27T18:08:56.829Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p><p><strong>Note:</strong></p><p>The solution set must not contain duplicate quadruplets.</p><a id="more"></a><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.</span><br><span class="line"></span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [-1,  0, 0, 1],</span><br><span class="line">  [-2, -1, 1, 2],</span><br><span class="line">  [-2,  0, 0, 2]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="暴力搜索"><a href="#暴力搜索" class="headerlink" title="暴力搜索"></a>暴力搜索</h4><ul><li>时间复杂度：$O(n^4)$</li><li>空间复杂度：$O(n^4)$</li></ul><h4 id="排序-递归-双指针"><a href="#排序-递归-双指针" class="headerlink" title="排序+递归+双指针"></a>排序+递归+双指针</h4><ul><li>这里给出n-sum版本</li><li>使用最小值和最大值进行剪枝可以避免无效计算</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; fourSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">return</span> nSum(nums, target, <span class="number">4</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">maxSum</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, len = nums.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        res += nums[len - i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">minSum</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> n, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        res += nums[i + index];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; nSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target, <span class="keyword">int</span> n, <span class="keyword">int</span> index) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length - index &lt; n || maxSum(nums, n) &lt; target || minSum(nums, n, index) &gt; target)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> len = nums.length;</span><br><span class="line">    <span class="comment">// 2 sum</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> lo = index, hi = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[lo] + nums[hi] &lt; target) &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    lo++;</span><br><span class="line">                &#125; <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[lo] == nums[lo - <span class="number">1</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// &gt;= target</span></span><br><span class="line">                <span class="keyword">if</span> (nums[lo] + nums[hi] == target) &#123;</span><br><span class="line">                    List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    tmp.add(nums[lo]);</span><br><span class="line">                    tmp.add(nums[hi]);</span><br><span class="line">                    res.add(tmp);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    hi--;</span><br><span class="line">                &#125; <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[hi] == nums[hi + <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">// n sum</span></span><br><span class="line">        <span class="keyword">int</span> start = index;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= len - n) &#123;</span><br><span class="line">            List&lt;List&lt;Integer&gt;&gt; tmp = nSum(nums, target - nums[start], n - <span class="number">1</span>, start + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (List&lt;Integer&gt; a : tmp) &#123;</span><br><span class="line">                a.add(nums[start]);</span><br><span class="line">                res.add(a);</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// remove duplicates</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                start++;</span><br><span class="line">            &#125; <span class="keyword">while</span> (start &lt;= len - n &amp;&amp; nums[start] == nums[start - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(n^3)$</li><li>空间复杂度：$O(n^3)$</li></ul><hr><p>事实上，双指针法可以将复杂度降一个n的幂次。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; of &lt;em&gt;n&lt;/em&gt; integers and an integer &lt;code&gt;target&lt;/code&gt;, are there elements &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, &lt;em&gt;c&lt;/em&gt;, and &lt;em&gt;d&lt;/em&gt; in &lt;code&gt;nums&lt;/code&gt; such that &lt;em&gt;a&lt;/em&gt; + &lt;em&gt;b&lt;/em&gt; + &lt;em&gt;c&lt;/em&gt; + &lt;em&gt;d&lt;/em&gt; = &lt;code&gt;target&lt;/code&gt;? Find all unique quadruplets in the array which gives the sum of &lt;code&gt;target&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The solution set must not contain duplicate quadruplets.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://yoursite.com/tags/array/"/>
    
      <category term="two pointers" scheme="http://yoursite.com/tags/two-pointers/"/>
    
      <category term="medium" scheme="http://yoursite.com/tags/medium/"/>
    
  </entry>
  
  <entry>
    <title>17.Letters Combinations of a Phone Number</title>
    <link href="http://yoursite.com/2019/03/27/17-Letters-Combinations-of-a-Phone-Number/"/>
    <id>http://yoursite.com/2019/03/27/17-Letters-Combinations-of-a-Phone-Number/</id>
    <published>2019-03-27T09:04:44.000Z</published>
    <updated>2019-03-27T18:08:43.598Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent.</p><p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p><a id="more"></a><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt="img"></p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;23&quot;</span><br><span class="line">Output: [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>Although the above answer is in lexicographical order, your answer could be in any order you want.</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="递归-回溯"><a href="#递归-回溯" class="headerlink" title="递归+回溯"></a>递归+回溯</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String[] keys = <span class="keyword">new</span> String[]&#123;<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"ghi"</span>, <span class="string">"jkl"</span>, <span class="string">"mno"</span>, <span class="string">"pqrs"</span>, <span class="string">"tuv"</span>, <span class="string">"wxyz"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">helper</span><span class="params">(List&lt;String&gt; res, String curr, String digits, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= digits.length()) &#123;</span><br><span class="line">    res.add(curr);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : keys[digits.charAt(index) - <span class="string">'2'</span>].toCharArray())</span><br><span class="line">    helper(res, curr + String.valueOf(c), digits, index + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line">  List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">if</span> (digits.length() == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">  helper(res, <span class="string">""</span>, digits, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(3^n4^m)​$，n和m分别是对应3个和4个字符的数字在原字符串出现的个数。</li><li>空间复杂度：$O(3^n4^m)$，解的大小；其中栈的深度为原字符串长度。</li></ul><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><ul><li>这里注意，不能直接在遍历时修改。一方面答案会出错，另一方面会遇到concurrentModification的异常。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">if</span> (digits.length() == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    res.add(<span class="string">""</span>);</span><br><span class="line">    String[] keys = <span class="keyword">new</span> String[]&#123;<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"ghi"</span>, <span class="string">"jkl"</span>, <span class="string">"mno"</span>, <span class="string">"pqrs"</span>, <span class="string">"tuv"</span>, <span class="string">"wxyz"</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : digits.toCharArray()) &#123;</span><br><span class="line">        List&lt;String&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : res) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> d : keys[c - <span class="string">'2'</span>].toCharArray())</span><br><span class="line">                tmp.add(s + String.valueOf(d));</span><br><span class="line">        &#125;</span><br><span class="line">        res = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(3^n4^m)$</li><li>空间复杂度：$O(3^n4^m)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a string containing digits from &lt;code&gt;2-9&lt;/code&gt; inclusive, return all possible letter combinations that the number could represent.&lt;/p&gt;
&lt;p&gt;A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="string" scheme="http://yoursite.com/tags/string/"/>
    
      <category term="medium" scheme="http://yoursite.com/tags/medium/"/>
    
      <category term="permutation" scheme="http://yoursite.com/tags/permutation/"/>
    
      <category term="backtracking" scheme="http://yoursite.com/tags/backtracking/"/>
    
  </entry>
  
  <entry>
    <title>16.3Sum Closest</title>
    <link href="http://yoursite.com/2019/03/27/16-3Sum-Closest/"/>
    <id>http://yoursite.com/2019/03/27/16-3Sum-Closest/</id>
    <published>2019-03-27T08:54:42.000Z</published>
    <updated>2019-03-27T18:08:31.815Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p><a id="more"></a><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Given array nums = [-1, 2, 1, -4], and target = 1.</span><br><span class="line"></span><br><span class="line">The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="暴力三重循环"><a href="#暴力三重循环" class="headerlink" title="暴力三重循环"></a>暴力三重循环</h4><ul><li>时间复杂度：$O(n^3)$</li><li>空间复杂度：$O(1)$</li></ul><h4 id="排序-双指针"><a href="#排序-双指针" class="headerlink" title="排序+双指针"></a>排序+双指针</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">threeSumClosest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, diff = Integer.MAX_VALUE, first;</span><br><span class="line">    <span class="keyword">for</span> (first = <span class="number">0</span>; first &lt; nums.length - <span class="number">2</span>; first++) &#123;</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>, left = first + <span class="number">1</span>, tmp = target - nums[first];</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> curr = nums[left] + nums[right];</span><br><span class="line">            <span class="keyword">if</span> (curr == tmp)</span><br><span class="line">                <span class="keyword">return</span> target;<span class="comment">// special case: diff = 0, just return.</span></span><br><span class="line">            <span class="keyword">if</span> (Math.abs(curr - tmp) &lt; diff) &#123;</span><br><span class="line">                diff = Math.abs(curr - tmp);</span><br><span class="line">                res = curr + nums[first];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (curr &lt; tmp)</span><br><span class="line">                left++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; of &lt;em&gt;n&lt;/em&gt; integers and an integer &lt;code&gt;target&lt;/code&gt;, find three integers in &lt;code&gt;nums&lt;/code&gt; such that the sum is closest to &lt;code&gt;target&lt;/code&gt;. Return the sum of the three integers. You may assume that each input would have exactly one solution.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://yoursite.com/tags/array/"/>
    
      <category term="two pointers" scheme="http://yoursite.com/tags/two-pointers/"/>
    
  </entry>
  
  <entry>
    <title>15.3Sum</title>
    <link href="http://yoursite.com/2019/03/27/15-3Sum/"/>
    <id>http://yoursite.com/2019/03/27/15-3Sum/</id>
    <published>2019-03-27T08:45:32.000Z</published>
    <updated>2019-03-27T13:36:09.772Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an array <code>nums</code> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p><p><strong>Note:</strong></p><p>The solution set must not contain duplicate triplets.</p><a id="more"></a><p><strong>Example:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Given array nums = [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, -<span class="number">1</span>, -<span class="number">4</span>],</span><br><span class="line"></span><br><span class="line">A solution set is:</span><br><span class="line">[</span><br><span class="line">  [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">  [-<span class="number">1</span>, -<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>暴力循环+去重</p><ul><li>时间复杂度：$O(n^3)$</li><li>空间复杂度：$O(n^3)$</li></ul></li><li><p>排序+双指针</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length &lt; <span class="number">3</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="keyword">int</span> n = nums.length, i = <span class="number">0</span>;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n - <span class="number">2</span>) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; two = twoSum(nums, i + <span class="number">1</span>, n - <span class="number">1</span>, -nums[i]);</span><br><span class="line">        res.addAll(two);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">        i++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt; n - <span class="number">2</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> ((nums[from] &lt;&lt; <span class="number">1</span>) &gt; target || (nums[to] &lt;&lt; <span class="number">1</span>) &lt; target)</span><br><span class="line">      <span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">while</span> (from &lt; to) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[from] + nums[to] &lt; target)</span><br><span class="line">          from++;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[from] + nums[to] == target)</span><br><span class="line">              res.add(Arrays.asList(-target, nums[from], nums[to]));</span><br><span class="line">          to--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(n^2)$</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; of &lt;em&gt;n&lt;/em&gt; integers, are there elements &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt;, &lt;em&gt;c&lt;/em&gt; in &lt;code&gt;nums&lt;/code&gt; such that &lt;em&gt;a&lt;/em&gt; + &lt;em&gt;b&lt;/em&gt; + &lt;em&gt;c&lt;/em&gt; = 0? Find all unique triplets in the array which gives the sum of zero.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The solution set must not contain duplicate triplets.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://yoursite.com/tags/array/"/>
    
      <category term="two pointers" scheme="http://yoursite.com/tags/two-pointers/"/>
    
      <category term="medium" scheme="http://yoursite.com/tags/medium/"/>
    
  </entry>
  
  <entry>
    <title>14.Longest Common Prefix</title>
    <link href="http://yoursite.com/2019/03/27/14-Longest-Common-Prefix/"/>
    <id>http://yoursite.com/2019/03/27/14-Longest-Common-Prefix/</id>
    <published>2019-03-27T03:59:03.000Z</published>
    <updated>2019-03-27T13:36:04.252Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p><a id="more"></a><p><strong>Example 1:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [<span class="string">"flower"</span>,<span class="string">"flow"</span>,<span class="string">"flight"</span>]</span><br><span class="line">Output: <span class="string">"fl"</span></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [<span class="string">"dog"</span>,<span class="string">"racecar"</span>,<span class="string">"car"</span>]</span><br><span class="line">Output: <span class="string">""</span></span><br><span class="line">Explanation: There is no common prefix among the input strings.</span><br></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>All given inputs are in lowercase letters <code>a-z</code>.</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>Horizontal scanning，依次扫描两个单词间的最长前缀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">  String res = strs[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>, n1 = res.length(), n2 = strs[i].length();</span><br><span class="line">      <span class="keyword">while</span> (index &lt; n1 &amp;&amp; index &lt; n2 &amp;&amp; strs[i].charAt(index) == res.charAt(index))</span><br><span class="line">          index++;</span><br><span class="line">      res = res.substring(<span class="number">0</span>, index);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(nm)$，n为字符串数量，m为字符串平均长度</li><li>空间复杂度：$O(m)​$</li></ul></li><li><p>Vertical scanning，按字符依次扫描，如果所有str的第i都是这一字符那么就加入前缀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">  StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs[<span class="number">0</span>].length(); i++) &#123;</span><br><span class="line">    <span class="keyword">char</span> curr = strs[<span class="number">0</span>].charAt(i);</span><br><span class="line">      <span class="keyword">boolean</span> contains = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; strs.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= strs[j].length() || strs[j].charAt(i) != curr) &#123;</span><br><span class="line">                contains = <span class="keyword">false</span>;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">if</span> (!contains)</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      res.append(curr);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> res.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(nm)$，n为字符串数量，m为字符串平均长度</li><li>空间复杂度：$O(m)$</li></ul></li><li><p>Divide and conquer，两两比较后再比较。在这里没有体现出优势的原因是两两比较的成本比较低（$O(m)$），时间复杂度也不比常规做法好</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">return</span> helper(strs, <span class="number">0</span>, strs.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">helper</span><span class="params">(String[] strs, <span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (to == from)</span><br><span class="line">      <span class="keyword">return</span> strs[from];</span><br><span class="line">  <span class="keyword">int</span> mid = from + (to - from) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> commonPrefix(helper(strs, from, mid), helper(strs, mid + <span class="number">1</span>, to));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">commonPrefix</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>, n1 = s1.length(), n2 = s2.length();</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; n1 &amp;&amp; i &lt; n2; i++)</span><br><span class="line">      <span class="keyword">if</span> (s1.charAt(i) != s2.charAt(i))</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">return</span> s1.substring(<span class="number">0</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(nm)$，因为一共大约有$n/2 + n/4 + … + 1 = n = O(n)$次比较，每次比较的复杂度为$O(m)$</li><li>空间复杂度：$O(log(n))$，也就是递归栈的深度</li></ul></li><li><p>binary search，找到最短的字符串长度，并对可能的长度进行二分，遍历以确认这个长度是否是公共子序列。</p><ul><li>（二分的奇妙用法）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strs == <span class="keyword">null</span> || strs.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> minLen = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (String str : strs)</span><br><span class="line">        minLen = Math.min(minLen, str.length());</span><br><span class="line">    <span class="keyword">int</span> lo = <span class="number">0</span>, hi = minLen;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">        <span class="keyword">int</span> mi = (lo + hi) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (isCommonPrefix(strs, mi))</span><br><span class="line">            lo = mi + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            hi = mi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isCommonPrefix(strs, lo))</span><br><span class="line">        lo--;</span><br><span class="line">    <span class="keyword">return</span> strs[<span class="number">0</span>].substring(<span class="number">0</span>, lo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isCommonPrefix</span><span class="params">(String[] strs, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    String str1 = strs[<span class="number">0</span>].substring(<span class="number">0</span>, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; strs.length; i++)</span><br><span class="line">        <span class="keyword">if</span> (!strs[i].startsWith(str1))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(nmlog(m))$，一共调用$O(log(m))$次<code>isCommonPrefix</code>函数，每次调用复杂度为$O(nm)$</li><li>空间复杂度：$O(1)$</li></ul></li></ol><hr><h3 id="Follow-up：如果需要计算某字符串s和strs共同的最长前缀需要多次调用，应该如何实现？假设strs不变"><a href="#Follow-up：如果需要计算某字符串s和strs共同的最长前缀需要多次调用，应该如何实现？假设strs不变" class="headerlink" title="Follow up：如果需要计算某字符串s和strs共同的最长前缀需要多次调用，应该如何实现？假设strs不变"></a>Follow up：如果需要计算某字符串s和strs共同的最长前缀需要多次调用，应该如何实现？假设strs不变</h3><ul><li>使用trie。<ul><li>时间复杂度：$O(nm)$在构建树过程，$O(m)$在查找过程</li><li>空间复杂度：$O(nm)$用于存储trie树</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Write a function to find the longest common prefix string amongst an array of strings.&lt;/p&gt;
&lt;p&gt;If there is no common prefix, return an empty string &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="easy" scheme="http://yoursite.com/tags/easy/"/>
    
      <category term="string" scheme="http://yoursite.com/tags/string/"/>
    
      <category term="longest xxx" scheme="http://yoursite.com/tags/longest-xxx/"/>
    
      <category term="divide and conquer" scheme="http://yoursite.com/tags/divide-and-conquer/"/>
    
      <category term="binary search" scheme="http://yoursite.com/tags/binary-search/"/>
    
      <category term="trie" scheme="http://yoursite.com/tags/trie/"/>
    
  </entry>
  
  <entry>
    <title>13.Roman to Integer</title>
    <link href="http://yoursite.com/2019/03/27/13-Roman-to-Integer/"/>
    <id>http://yoursite.com/2019/03/27/13-Roman-to-Integer/</id>
    <published>2019-03-27T03:46:16.000Z</published>
    <updated>2019-03-27T13:35:59.238Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Roman numerals are represented by seven different symbols: <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             <span class="number">1</span></span><br><span class="line">V             <span class="number">5</span></span><br><span class="line">X             <span class="number">10</span></span><br><span class="line">L             <span class="number">50</span></span><br><span class="line">C             <span class="number">100</span></span><br><span class="line">D             <span class="number">500</span></span><br><span class="line">M             <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>For example, two is written as <code>II</code> in Roman numeral, just two one’s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p><ul><li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9. </li><li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90. </li><li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li></ul><p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p><a id="more"></a><p><strong>Example 1:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">"III"</span></span><br><span class="line">Output: <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">"IV"</span></span><br><span class="line">Output: <span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">"IX"</span></span><br><span class="line">Output: <span class="number">9</span></span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">"LVIII"</span></span><br><span class="line">Output: <span class="number">58</span></span><br><span class="line">Explanation: L = <span class="number">50</span>, V= <span class="number">5</span>, III = <span class="number">3</span>.</span><br></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">"MCMXCIV"</span></span><br><span class="line">Output: <span class="number">1994</span></span><br><span class="line">Explanation: M = <span class="number">1000</span>, CM = <span class="number">900</span>, XC = <span class="number">90</span> and IV = <span class="number">4</span>.</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>使用hash map存所有数字对应字符，并将字符串的每一个字符转换成数字，接下来观察规律：</p><ul><li>如果从左到右没有出现逆序的字符（即，每个字符代表的数字都不大于左侧字符代表的数字）那么简单相加即可</li><li>如果出现逆序字符，那么该位的结果将会是用逆序字符的后一位减去逆序字符的数字</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    Map&lt;Character, Integer&gt; numMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    numMap.put(<span class="string">'I'</span>, <span class="number">1</span>);</span><br><span class="line">    numMap.put(<span class="string">'V'</span>, <span class="number">5</span>);</span><br><span class="line">    numMap.put(<span class="string">'X'</span>, <span class="number">10</span>);</span><br><span class="line">    numMap.put(<span class="string">'L'</span>, <span class="number">50</span>);</span><br><span class="line">    numMap.put(<span class="string">'C'</span>, <span class="number">100</span>);</span><br><span class="line">    numMap.put(<span class="string">'D'</span>, <span class="number">500</span>);</span><br><span class="line">    numMap.put(<span class="string">'M'</span>, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line">    <span class="keyword">int</span> n = s.length(), res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        nums[i] = numMap.get(s.charAt(i));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt; nums[i + <span class="number">1</span>])</span><br><span class="line">            res -= nums[i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res + nums[n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Roman numerals are represented by seven different symbols: &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;M&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Symbol       Value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I             &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;V             &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X             &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L             &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C             &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D             &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M             &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For example, two is written as &lt;code&gt;II&lt;/code&gt; in Roman numeral, just two one’s added together. Twelve is written as, &lt;code&gt;XII&lt;/code&gt;, which is simply &lt;code&gt;X&lt;/code&gt; + &lt;code&gt;II&lt;/code&gt;. The number twenty seven is written as &lt;code&gt;XXVII&lt;/code&gt;, which is &lt;code&gt;XX&lt;/code&gt; + &lt;code&gt;V&lt;/code&gt; + &lt;code&gt;II&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not &lt;code&gt;IIII&lt;/code&gt;. Instead, the number four is written as &lt;code&gt;IV&lt;/code&gt;. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as &lt;code&gt;IX&lt;/code&gt;. There are six instances where subtraction is used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;I&lt;/code&gt; can be placed before &lt;code&gt;V&lt;/code&gt; (5) and &lt;code&gt;X&lt;/code&gt; (10) to make 4 and 9. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;X&lt;/code&gt; can be placed before &lt;code&gt;L&lt;/code&gt; (50) and &lt;code&gt;C&lt;/code&gt; (100) to make 40 and 90. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt; can be placed before &lt;code&gt;D&lt;/code&gt; (500) and &lt;code&gt;M&lt;/code&gt; (1000) to make 400 and 900.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="hash map" scheme="http://yoursite.com/tags/hash-map/"/>
    
      <category term="easy" scheme="http://yoursite.com/tags/easy/"/>
    
      <category term="string" scheme="http://yoursite.com/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>12.Integer to Roman</title>
    <link href="http://yoursite.com/2019/03/27/12-Integer-to-Roman/"/>
    <id>http://yoursite.com/2019/03/27/12-Integer-to-Roman/</id>
    <published>2019-03-27T03:39:47.000Z</published>
    <updated>2019-03-27T13:35:54.741Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Roman numerals are represented by seven different symbols: <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Symbol       Value</span><br><span class="line">I             <span class="number">1</span></span><br><span class="line">V             <span class="number">5</span></span><br><span class="line">X             <span class="number">10</span></span><br><span class="line">L             <span class="number">50</span></span><br><span class="line">C             <span class="number">100</span></span><br><span class="line">D             <span class="number">500</span></span><br><span class="line">M             <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>For example, two is written as <code>II</code> in Roman numeral, just two one’s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p><ul><li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9. </li><li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90. </li><li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li></ul><p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p><a id="more"></a><p><strong>Example 1:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">3</span></span><br><span class="line">Output: <span class="string">"III"</span></span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">4</span></span><br><span class="line">Output: <span class="string">"IV"</span></span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">9</span></span><br><span class="line">Output: <span class="string">"IX"</span></span><br></pre></td></tr></table></figure><p><strong>Example 4:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">58</span></span><br><span class="line">Output: <span class="string">"LVIII"</span></span><br><span class="line">Explanation: L = <span class="number">50</span>, V = <span class="number">5</span>, III = <span class="number">3</span>.</span><br></pre></td></tr></table></figure><p><strong>Example 5:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">1994</span></span><br><span class="line">Output: <span class="string">"MCMXCIV"</span></span><br><span class="line">Explanation: M = <span class="number">1000</span>, CM = <span class="number">900</span>, XC = <span class="number">90</span> and IV = <span class="number">4</span>.</span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>用hash map存所有数字对应的罗马字符；对每一位上的digit找到对应字符即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">repeat</span><span class="params">(String a, <span class="keyword">int</span> time)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (time &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; time; i++)</span><br><span class="line">        res.append(a);</span><br><span class="line">    <span class="keyword">return</span> res.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">intToRoman</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    StringBuilder res = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    Map&lt;Integer, String&gt; charSet = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    charSet.put(<span class="number">1</span>, <span class="string">"I"</span>);</span><br><span class="line">    charSet.put(<span class="number">5</span>, <span class="string">"V"</span>);</span><br><span class="line">    charSet.put(<span class="number">10</span>, <span class="string">"X"</span>);</span><br><span class="line">    charSet.put(<span class="number">50</span>, <span class="string">"L"</span>);</span><br><span class="line">    charSet.put(<span class="number">100</span>, <span class="string">"C"</span>);</span><br><span class="line">    charSet.put(<span class="number">500</span>, <span class="string">"D"</span>);</span><br><span class="line">    charSet.put(<span class="number">1000</span>, <span class="string">"M"</span>);</span><br><span class="line">    res.append(repeat(charSet.get(<span class="number">1000</span>), num / <span class="number">1000</span>));</span><br><span class="line">    <span class="comment">// res.append(charSet.get(1000).repeat(num / 1000)); // since JDK 11</span></span><br><span class="line">    num %= <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">int</span> base = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">while</span> (base &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (num / base) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                res.append(charSet.get(base));</span><br><span class="line">                res.append(charSet.get(base * <span class="number">10</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                res.append(charSet.get(base * <span class="number">5</span>));</span><br><span class="line">                res.append(repeat(charSet.get(base), num / base - <span class="number">5</span>));</span><br><span class="line">                <span class="comment">// res.append(charSet.get(base).repeat(num / base - 5)); // since JDK 11</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                res.append(charSet.get(base));</span><br><span class="line">                res.append(charSet.get(base * <span class="number">5</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                res.append(repeat(charSet.get(base), num / base));</span><br><span class="line">                <span class="comment">// res.append(charSet.get(base).repeat(num / base)); // since JDK 11</span></span><br><span class="line">        &#125;</span><br><span class="line">        num %= base;</span><br><span class="line">        base /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：$O(log(num))​$</li><li>空间复杂度：$O(log(num))$</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Roman numerals are represented by seven different symbols: &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;M&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Symbol       Value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I             &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;V             &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X             &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;L             &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C             &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;D             &lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;M             &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For example, two is written as &lt;code&gt;II&lt;/code&gt; in Roman numeral, just two one’s added together. Twelve is written as, &lt;code&gt;XII&lt;/code&gt;, which is simply &lt;code&gt;X&lt;/code&gt; + &lt;code&gt;II&lt;/code&gt;. The number twenty seven is written as &lt;code&gt;XXVII&lt;/code&gt;, which is &lt;code&gt;XX&lt;/code&gt; + &lt;code&gt;V&lt;/code&gt; + &lt;code&gt;II&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not &lt;code&gt;IIII&lt;/code&gt;. Instead, the number four is written as &lt;code&gt;IV&lt;/code&gt;. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as &lt;code&gt;IX&lt;/code&gt;. There are six instances where subtraction is used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;I&lt;/code&gt; can be placed before &lt;code&gt;V&lt;/code&gt; (5) and &lt;code&gt;X&lt;/code&gt; (10) to make 4 and 9. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;X&lt;/code&gt; can be placed before &lt;code&gt;L&lt;/code&gt; (50) and &lt;code&gt;C&lt;/code&gt; (100) to make 40 and 90. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt; can be placed before &lt;code&gt;D&lt;/code&gt; (500) and &lt;code&gt;M&lt;/code&gt; (1000) to make 400 and 900.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="string" scheme="http://yoursite.com/tags/string/"/>
    
      <category term="medium" scheme="http://yoursite.com/tags/medium/"/>
    
      <category term="hash set" scheme="http://yoursite.com/tags/hash-set/"/>
    
  </entry>
  
</feed>
