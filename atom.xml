<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Riroaki&#39;s home</title>
  
  <subtitle>Riroaki</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-10T12:51:56.164Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Riroaki</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ML学习日记6——深度学习入门</title>
    <link href="http://yoursite.com/2019/04/09/ML-6-Intro-to-Deep-Learning/"/>
    <id>http://yoursite.com/2019/04/09/ML-6-Intro-to-Deep-Learning/</id>
    <published>2019-04-09T09:09:50.000Z</published>
    <updated>2019-04-10T12:51:56.164Z</updated>
    
    <content type="html"><![CDATA[<p>这一课前半部分是在吹水……</p><a id="more"></a><h2 id="DL的前世今生"><a href="#DL的前世今生" class="headerlink" title="DL的前世今生"></a>DL的前世今生</h2><p>1958到1980年dl的发展。1980年的多层网络其实和现在的DNN已经差不多了。区别在于RBM initialization。</p><p>然而过去的研究表示dl并没有很好的效果……层数多的时候可能效果反而差。</p><p>这个模型，当时看来只是石头汤的石头罢了——其实并无大用，甚至还炒作出来许多虚假人工智能的搞笑的故事（和现在似曾相识？哈哈）。</p><p>2009年GPU是一个关键突破，因为加速了deep learning的过程。</p><p>11年语音辨识使用了这项技术，得到了比较好的结果；12年用在图像识别。这项技术终于火了起来。</p><h2 id="正片开始"><a href="#正片开始" class="headerlink" title="正片开始"></a>正片开始</h2><p>回到上一次的内容，DL其实是把许多小的神经通过sigmoid、softmax等等方法连接起来。</p><p>每一层都有自己的bias和weight。</p><p>最简单的连接方式是全连接前向传播神经网络（<em>Fully Connected FeedForward Network</em>）。</p><p>给定了一个网络结构，而没有确定具体参数，那么就是一个<em>function set</em>；假如参数和结构都确定了，那它就是一个函数。</p><p>我们在一般机器学习过程中，所做的事情也是先确定结构——<em>function set</em>，然后通过梯度下降找到最好的参数。</p><p>神经网络结构：</p><p>input layer、deep layer（指的是中间的许多隐层）、output layer</p><p>network具体做的事情其实就是矩阵运算，如图：</p><p><img src="/2019/04/09/ML-6-Intro-to-Deep-Learning/matrix.png" alt></p><p>写成矩阵运算的形式，这样就可以可以使用GPU执行并行计算加速计算过程。</p><p><img src="/2019/04/09/ML-6-Intro-to-Deep-Learning/matrix2.png" alt></p><h3 id="mnist——手写数字辨识"><a href="#mnist——手写数字辨识" class="headerlink" title="mnist——手写数字辨识"></a>mnist——手写数字辨识</h3><p>input：每个图片的矩阵</p><p>output：10维的one-hot向量</p><ol><li><p>首先，需要决定一个好的<em>function set</em>，即神经网络的结构：</p><ul><li>这一步需要trial&amp;error+intuition</li><li>有一些技巧可以让机器自己确定层数，但是应用暂时不广泛。</li></ul></li><li><p>接下来，找到好的<em>feature</em>，即<em>feature engineering</em>：</p><ul><li>有很多特征不是那么直觉，所以也很难。</li></ul></li><li><p>评估：计算交叉熵</p></li><li>调整：使用梯度下降</li></ol><h3 id="backpropagation反向传播（参数更新过程）"><a href="#backpropagation反向传播（参数更新过程）" class="headerlink" title="backpropagation反向传播（参数更新过程）"></a>backpropagation反向传播（参数更新过程）</h3><p>原理：微分的链式法则。</p><ul><li>每一个神经元更新参数的时候，需要计算<em>loss</em>函数对它的偏微分；</li><li>计算的时候，根据链式法则，继续向下一层寻找与本神经元输出有关的变量的偏微分；</li><li>每一项都依赖下一层，所以计算时从最后向前进行，相当于建立了反向的神经网络进行计算。</li></ul><p><img src="/2019/04/09/ML-6-Intro-to-Deep-Learning/backpropagation.png" alt></p><p>总结图如下：</p><p><img src="/2019/04/09/ML-6-Intro-to-Deep-Learning/summary.png" alt></p><h2 id="Keras实战——mnist"><a href="#Keras实战——mnist" class="headerlink" title="Keras实战——mnist"></a>Keras实战——mnist</h2><p>Keras集成了tensorflow和theano的库，是在这两个基础库上的更好用的接口。</p><p>在希腊语里面，Keras意味着horn——牛角～</p><p>而mnist作为深度学习界的hello world，自然在这里要写一下：</p><p>记住，深度学习和机器学习一样，分成三个步骤：</p><ul><li>确定模型（网络结构）、评估模型（损失函数）、改进模型（挑出最优）</li></ul><p>需要注意的是，tensorflow和keras经过这两年的时间已经有所变化，视频里面的api已经不能用了。</p><p>现在的2.0版本tf和keras竟然会有冲突（<code>AttributeError: module &#39;tensorflow&#39; has no attribute &#39;get_default_graph&#39;</code>），让人很是无语。</p><h3 id="处理输入"><a href="#处理输入" class="headerlink" title="处理输入"></a>处理输入</h3><p>这里需要注意，首先x的data是60000个28*28的0/1矩阵，表示这个格子有没有上色；y的data是60000个0～9的数字，训练前需要变动：</p><ul><li>把x的每个case展平成一个vector（因为特征是一维的）</li><li>把y变成one-hot格式，每个case用一个10维向量表示，原来值对应位置的那一维是1，其余为0。这在NLP中也很常见，主要是用来区分不同的类 ，而原来的数值表示类会有不好的影响（之前在讨论分类器时有涉及到）</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras <span class="token keyword">import</span> Sequential<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> mnist<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Dense<span class="token keyword">from</span> tensorflow<span class="token punctuation">.</span>keras<span class="token punctuation">.</span>utils <span class="token keyword">import</span> to_categorical<span class="token comment" spellcheck="true"># Load data</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span> <span class="token operator">=</span> mnist<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Flatten input 28 * 28 matrix into a 784 vector</span>x_train <span class="token operator">=</span> x_train<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span>x_test<span class="token operator">=</span> x_test<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">28</span> <span class="token operator">*</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Make y into one-hot encoding</span>y_train <span class="token operator">=</span> to_categorical<span class="token punctuation">(</span>y_train<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>y_test <span class="token operator">=</span> to_categorical<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设计模型"><a href="#设计模型" class="headerlink" title="设计模型"></a>设计模型</h3><p>这里模型是参考视频中的定义，用了最基本的<em>Sequential</em>模型。</p><p><em>units</em>表示输出的尺寸，和<em>input_dim</em>对应；除了第一层需要定义输入尺寸以外，后面都不需要声明（和上一层的输出尺寸是一样的）。</p><p>使用了<em>sigmoid</em>和<em>softmax</em>用来做层间整合，交叉熵作为<em>loss</em>函数，梯度下降方法的学习率调整使用<em>adam</em>方法，<em>accuracy</em>表示度量方式——一般都会使用这一个选项。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Build model</span>model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>input_dim<span class="token operator">=</span><span class="token number">28</span><span class="token operator">*</span><span class="token number">28</span><span class="token punctuation">,</span> units<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># softplus, softsign, relu, tanhm hard_sigmoid, linear</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Dense<span class="token punctuation">(</span>units<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Config loss function and gradient descent method</span>model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'categorical_crossentropy'</span><span class="token punctuation">,</span>             optimizer<span class="token operator">=</span><span class="token string">'adam'</span><span class="token punctuation">,</span>             metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p><code>batch-size</code>表示每次随机选取用于梯度下降的样本数，<code>epochs</code>表示所有样本的迭代次数。</p><h4 id="为什么不计算全部的样本进行迭代？"><a href="#为什么不计算全部的样本进行迭代？" class="headerlink" title="为什么不计算全部的样本进行迭代？"></a>为什么不计算全部的样本进行迭代？</h4><p>这个和之前讨论的BGD与SGD之争如出一辙，其实还是效率和质量的考虑。</p><p>“天下武功，唯快不破”，虽然BGD更为稳定，但是架不住SGD快呀！但是SGD每次只选一个case，随机性太大；所以就使用折衷方案，把所有case分成几个小批量（<em>mini-batch</em>），每次进行一个<em>batch</em>的<em>loss</em>计算，进行一次update。</p><p>另一方面，小批量的梯度下降能够保证一定的随机性，比批量的方法更容易跳出局部极小值。</p><p>而当所有的<em>mini-batch</em>都被计算完，就叫做一个<em>epoch</em>。</p><blockquote><p>虽然一个<em>epoch</em>里面计算<em>loss</em>的次数是一样的，但是可以实现并行计算的加速（也就是说可以同时计算多个case的loss），所以选择适中的<code>batch-size</code>实际效果比<code>batch-size</code>等于1的情况要好。</p><p>具体并行计算加速其实并没有那么复杂：把多个x的向量合并成一个matrix再一起运算，在GPU中矩阵运算得到较好的优化，所以得到了加速。</p></blockquote><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Train model</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> epochs<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="预测结果"><a href="#预测结果" class="headerlink" title="预测结果"></a>预测结果</h3><p>可以直接计算准确率：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Loss and accuraty</span>score <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Total loss on testing set:'</span><span class="token punctuation">,</span> score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Accuracy of testing set:'</span><span class="token punctuation">,</span> score<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>10000/10000 [==============================] - 0s 40us/sample - loss: 0.1367 - accuracy: 0.9589Total loss on testing set: 0.13666086520701648Accuracy of testing set: 0.9589</code></pre><p>也可以选择导出结果（不知道正确答案是多少的场景）：</p><pre class="line-numbers language-python"><code class="language-python">result <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>因为采取的小批量梯度下降具有一定的随机性，所以准确率和结果每次都会有一点差别。</li></ul><p>～本文完～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这一课前半部分是在吹水……&lt;/p&gt;
    
    </summary>
    
      <category term="machine learning" scheme="http://yoursite.com/categories/machine-learning/"/>
    
    
      <category term="deep learning" scheme="http://yoursite.com/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>ML学习日记5——从贝叶斯到逻辑回归</title>
    <link href="http://yoursite.com/2019/04/09/ML-5-Logistic-Regression/"/>
    <id>http://yoursite.com/2019/04/09/ML-5-Logistic-Regression/</id>
    <published>2019-04-09T05:15:51.000Z</published>
    <updated>2019-04-09T09:07:54.083Z</updated>
    
    <content type="html"><![CDATA[<p>继续上一部分讲解贝叶斯算法的内容，这一次研究一下逻辑回归的分类算法。</p><p>虽然是叫做回归，但是本质是分类，只不过这里的分类方法和线性回归非常相似。</p><p>⚠️前方多图杀猫⚠️    ⚠️前方数学警告⚠️</p><a id="more"></a><h3 id="从二元贝叶斯模型说起"><a href="#从二元贝叶斯模型说起" class="headerlink" title="从二元贝叶斯模型说起"></a>从二元贝叶斯模型说起</h3><p>我们首先看一下如果是<strong>二分类问题</strong>，使用贝叶斯模型的做法：</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/1.PNG" alt></p><p>可以顺着途中的公式变形，得到$P(C1|x)=\sigma(z)$，z是一个比较复杂的变量，而这个函数又叫<em>sigmoid</em>函数，特点是对正的输入，返回的值在0.5到1之间，对负数返回的值在0到0.5之间，而且单调递增。</p><p>中间过程略去，我们可以用x和其他参数表示z（上面部分）：</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/2.PNG" alt></p><p>当我们让协方差矩阵相等的时候（为什么要这么做？一方面是效率的考虑，另一方面就是在某些地方测试得到的结果比原来的好（<strong>这又是为什么？</strong>那我就真的不知道了）），可以化简这个式子，从而得到$z=wx+b$这样一个简洁的形式。</p><p>是不是很眼熟？这不就是线性回归的模型嘛！</p><p>事实上，我们这么操作之后就会发现，之前我们所求的贝叶斯的各个参数其实不过是为了得到概率的线性拟合参数w和b——既然如此，为什么不直接求这些参数？那样做岂不是更加简洁。</p><p>既然如此，我们就顺着这条路探究下去。</p><h3 id="有了新模型，如何评价模型的好坏？"><a href="#有了新模型，如何评价模型的好坏？" class="headerlink" title="有了新模型，如何评价模型的好坏？"></a>有了新模型，如何评价模型的好坏？</h3><p>依然是对训练样本做最大似然估计，即选择使得现有数据的分类可能性最大的模型，如下图。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/3.PNG" alt></p><p>这里实现两个等价的变换：</p><ul><li><p>做符号的等价变化：当我们要求l的值最大，等价于求$-ln(l)$的值最小——取对数是一个技巧，用于将乘法转化为加法。</p></li><li><p>令$\hat{y}^n$表示分类结果，用1表示A类，用0表示B类</p><ul><li><p>这样做和<em>sigmoid</em>函数产生联系，使用A的函数估计A类产生x的概率密度，概率接近1的时候就是A类，概率接近0的时候就是B类</p></li><li><p>另外可以简化函数的形式，把条件改写成数学化的表达。我们原来的形式是这样的：</p><ul><li>如果x属于A类，那就加算A类产生它的概率的负对数；</li><li>否则加算B产生它的概率的负对数；</li></ul><p>当x属于A类的时候，第二项是0；否则第一项是0。所以原式改写成：$\hat{y}^nlnf_{w,b}(x^n)+(1-\hat{y}^nln(1-f_{w,b}(x^n)))$</p></li></ul></li></ul><p>如此一来，变换可得到：</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/4.PNG" alt></p><p>而根据信息论的表述，这一函数的形式就很像我们的估计函数和实际函数的交叉熵。</p><blockquote><p>交叉熵可以估计两个概率分布的相似情况，假如交叉熵越大，那么说明两个分布的值越接近。</p></blockquote><p>我们通过这一形式化的解释，侧面说明了这一个公式的正确性——我们需要求最小的函数值，那么就需要求最大的交叉熵（注意前面的负号），所以此时模型的概率分布和真实数据是最接近的！</p><h3 id="有了评估方法，如何找到最优模型参数？"><a href="#有了评估方法，如何找到最优模型参数？" class="headerlink" title="有了评估方法，如何找到最优模型参数？"></a>有了评估方法，如何找到最优模型参数？</h3><p>老办法，梯度下降。</p><p>不确定这个交叉熵函数L是不是凸函数，我们先对w和b各自求个微分。</p><p>对w求微分化简过程如下图，左右侧同理；</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/6.png" alt></p><p><img src="/2019/04/09/ML-5-Logistic-Regression/7.png" alt></p><p>最终化简结果相当简洁，也就是$\frac{\partial{L}}{\partial{w}}=-\sum_1^n(\hat{y}^i-f_{w,b}(x^i))x^i$，这个形式和线形回归的学习率其实是一样的！</p><ul><li>注意这里w和x都是向量。</li></ul><p><img src="/2019/04/09/ML-5-Logistic-Regression/8.png" alt></p><p>这里b的梯度下降可以并入w，多出一个$x0 = 1$的维度。</p><h2 id="线性回归与逻辑回归的联系与区别"><a href="#线性回归与逻辑回归的联系与区别" class="headerlink" title="线性回归与逻辑回归的联系与区别"></a>线性回归与逻辑回归的联系与区别</h2><p>看下图，模型三步走：选取模型、评估模型、调整模型过程中，两个模型都是十分相似的。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/compare.png" alt></p><h3 id="为什么不用平方损失（square-error）评估逻辑回归模型？"><a href="#为什么不用平方损失（square-error）评估逻辑回归模型？" class="headerlink" title="为什么不用平方损失（square error）评估逻辑回归模型？"></a>为什么不用平方损失（square error）评估逻辑回归模型？</h3><p>这个事情不是很直观，我们需要计算一下。</p><p>如果采用的是平方损失函数，那么得到的梯度是：</p><p>可以看出，采用平方差的时候，假如模型的估计概率很接近分类的一端（接近1，或者接近0），它的梯度都会接近0；这说明，在远离目标和接近目标的地方，梯度都很小，我们很难获得好的结果。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/whyNOTsquare.png" alt></p><p>更直观的图例在这里：</p><ul><li>在图片中可以看到，<em>cross entropy</em>作为损失函数，在离目标比较远的地方梯度较大；在接近目标的地方梯度比较小。</li><li>而使用<em>square error</em>作为损失函数的时候，在离目标比较远和比较近的地方梯度都很小。</li></ul><p><img src="/2019/04/09/ML-5-Logistic-Regression/squareANDCrossEntropy.png" alt></p><h2 id="Discriminative-VS-Generative"><a href="#Discriminative-VS-Generative" class="headerlink" title="Discriminative VS Generative"></a>Discriminative VS Generative</h2><p>现在回头看看，我们从贝叶斯的生成模型走了这么远，到了逻辑回归的判别模型，产生的结果参数是一样的嘛？</p><p>也就是说，我们在这里获得的w和b，和本文一开始把$\sum​$统一之后得到的模型是不是同一个？</p><p>答案是：<strong>不是同一个</strong>。</p><p>其实模型的最终表述形式是一样的（即，相同的<em>function set</em>），而最终得到的模型之所以不同，是因为我们一开始做出的假设不同。</p><p>我们在贝叶斯的生成模型的时候，做出了诸如”高斯分布”、”独立概率”等等假设。这些假设其实对模型进行了限制。但是在寻找逻辑回归模型的时候，我们只是直接去做了，其实会更贴近数据一点。</p><p>很多实践告诉我们，Generative的模型表现不如Discriminative的模型。</p><p>实际情况的结论要复杂一些：</p><ul><li>training data比较小的时候，Discriminative受data的影响比较大，很容易失控；而Generative模型主要依据还有自己的假设（自己的脑补），受到数据影响比较小，反而能够比较好地描述数据。<ul><li>在数据量越来越大的时候，贝叶斯渐渐失去优势。</li><li>当然，数据量的多少还是以情况论，没有什么绝对标准。</li></ul></li><li>和第一条相似的情况是noise比较多，label本身有错的时候。此时Generative模型占优。</li><li>另外，如果特征之间明显没有关联，那么还是Generative模型好一些。<ul><li>语音辨识为例。为了预测下一句话的内容，一般采用generative的内容。</li></ul></li></ul><p>所以说，当我们掌握信息比较少的时候，脑补和假设很重要；而信息比较多的时候，自然要尊重事实。嘿嘿，不失为人生哲理一条～</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="多类逻辑回归multi-class-classification"><a href="#多类逻辑回归multi-class-classification" class="headerlink" title="多类逻辑回归multi-class classification"></a>多类逻辑回归multi-class classification</h3><p>现在我们把二元的结果向多元拓展：</p><p>假设有C1、C2、C3的类，我们也可以使用逻辑回归，对每个类也有w和b。</p><p>我们需要使用<em>softmax</em>函数（可以通过最大熵理论推导，但是超出了本文的讨论范围）：</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/softmax.png" alt></p><p>这么一做之后，不单考虑到各个概率的大小，也保证各个概率之和为1。</p><p>这样之后，我们还是采用计算交叉熵的方式评估函数的好坏（下图的表达式缺少一个负号，即$-\sum…$）。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/multiCrossEntropy.png" alt="multiCrossEntropy"></p><h3 id="LR的限制：模型是有极限的，我不做LR啦！JOJO！"><a href="#LR的限制：模型是有极限的，我不做LR啦！JOJO！" class="headerlink" title="LR的限制：模型是有极限的，我不做LR啦！JOJO！"></a>LR的限制：<s>模型是有极限的，我不做LR啦！JOJO！</s></h3><p>逻辑回归的模型形式和线性回归是一样的，所以其本质是在高维平面上的直线（平面），不能够把一些复杂的分类表现出来。</p><p>比如图中例子，左上和右下是一类，左下和右上是一类，但是logistic分类只能画出一条直线，无法分割。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/limit.png" alt></p><p>但是，我们可以通过Feature Transformation进行修正：</p><h4 id="Feature-Transformation"><a href="#Feature-Transformation" class="headerlink" title="Feature Transformation"></a>Feature Transformation</h4><p>我们把原有的特征进行变换，得到新的feature，而这个feature可以用直线分类。</p><p>例如在上面这个例子中，可以采用新的feature：$x3=x1^2+x2^2,x4=(1-x1)^2+(1-x2)^2$，即到点<code>(0, 0),(1,1)</code>之间的距离作为新的两个feature。这样一来，我们就可以用直线分割这两组点（图略）。</p><p>但是问题在于，我们往往无法描述属性的特征，不知道如何找到一个好的transformation。如果都是手动修改feature，那就不是人工智能啦！</p><p>我们需要的是让机器自己产生新的feature transformation！所以我们需要：</p><h4 id="Cascading-LR"><a href="#Cascading-LR" class="headerlink" title="Cascading LR"></a>Cascading LR</h4><p>将许多个逻辑回归模型接起来。</p><p>我们做了许多种方式的特征转换之后，再用softmax逻辑回归将他们进行分类。</p><p>是不是有点神经网络的样子？这么一看，其实神经网络就是无数个小的逻辑回归等单元的组合。</p><p>激动，终于学到Deep Learning的内容了。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/cascading.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续上一部分讲解贝叶斯算法的内容，这一次研究一下逻辑回归的分类算法。&lt;/p&gt;
&lt;p&gt;虽然是叫做回归，但是本质是分类，只不过这里的分类方法和线性回归非常相似。&lt;/p&gt;
&lt;p&gt;⚠️前方多图杀猫⚠️    ⚠️前方数学警告⚠️&lt;/p&gt;
    
    </summary>
    
      <category term="machine learning" scheme="http://yoursite.com/categories/machine-learning/"/>
    
    
      <category term="classification" scheme="http://yoursite.com/tags/classification/"/>
    
      <category term="logistic regression" scheme="http://yoursite.com/tags/logistic-regression/"/>
    
  </entry>
  
  <entry>
    <title>33.Search in Rotated Sorted Array</title>
    <link href="http://yoursite.com/2019/04/09/33-Search-in-Rotated-Sorted-Array/"/>
    <id>http://yoursite.com/2019/04/09/33-Search-in-Rotated-Sorted-Array/</id>
    <published>2019-04-08T19:02:49.000Z</published>
    <updated>2019-04-09T12:56:39.764Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p><p>You are given a target value to search. If found in the array return its index, otherwise return <code>-1</code>.</p><p>You may assume no duplicate exists in the array.</p><p>Your algorithm’s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-java"><code class="language-java">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">0</span>Output<span class="token operator">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-java"><code class="language-java">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>首先，通过二分找到旋转点（第一个比<code>nums[0]</code>小的元素）；</p><p>然后，确认是否旋转，并确定查找范围；</p><p>最后二分查找元素。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cut <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// find rotate point</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mi <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mi<span class="token punctuation">]</span> <span class="token operator">>=</span> cut<span class="token punctuation">)</span>            lo <span class="token operator">=</span> mi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            hi <span class="token operator">=</span> mi<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// check if truly rotate</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span> <span class="token operator">></span> cut<span class="token punctuation">)</span>        lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// if target is on the left side</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">>=</span> cut<span class="token punctuation">)</span> <span class="token punctuation">{</span>        lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        hi<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// if target is on the right side</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>        hi <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// binary search</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mi <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mi<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>            lo <span class="token operator">=</span> mi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            hi <span class="token operator">=</span> mi<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>lo<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token operator">?</span> lo <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(log(n))$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.&lt;/p&gt;
&lt;p&gt;(i.e., &lt;code&gt;[0,1,2,4,5,6,7]&lt;/code&gt; might become &lt;code&gt;[4,5,6,7,0,1,2]&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;You are given a target value to search. If found in the array return its index, otherwise return &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You may assume no duplicate exists in the array.&lt;/p&gt;
&lt;p&gt;Your algorithm’s runtime complexity must be in the order of &lt;em&gt;O&lt;/em&gt;(log &lt;em&gt;n&lt;/em&gt;).&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://yoursite.com/tags/array/"/>
    
      <category term="medium" scheme="http://yoursite.com/tags/medium/"/>
    
      <category term="binary search" scheme="http://yoursite.com/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>Code Jam 2019 Qualification Round</title>
    <link href="http://yoursite.com/2019/04/08/Code-Jam-2019-Qualification-Round/"/>
    <id>http://yoursite.com/2019/04/08/Code-Jam-2019-Qualification-Round/</id>
    <published>2019-04-08T04:48:25.000Z</published>
    <updated>2019-04-10T15:34:30.199Z</updated>
    
    <content type="html"><![CDATA[<p>准备打一下今年的code jam和kick start，看了一下code jam是采取连续比赛的机制，kick start是每一轮独立。</p><p>今天写一下关于code jam的资格赛的事情。</p><p>QR在4月5日早上七点开始，持续27小时，只要在难度不大的四题（总分100）里面做出30分就可以。</p><p>贴一下战绩：55分，其实挺低的……还需要加油</p><a id="more"></a><h3 id="Foregone-Solution"><a href="#Foregone-Solution" class="headerlink" title="Foregone Solution"></a>Foregone Solution</h3><blockquote><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Someone just won the Code Jam lottery, and we owe them <strong>N</strong> jamcoins! However, when we tried to print out an oversized check, we encountered a problem. The value of <strong>N</strong>, which is an integer, includes at least one digit that is a <code>4</code>… and the <code>4</code>key on the keyboard of our oversized check printer is broken.</p><p>Fortunately, we have a workaround: we will send our winner two checks for positive integer amounts A and B, such that neither A nor B contains any digit that is a <code>4</code>, and A + B = <strong>N</strong>. Please help us find any pair of values A and B that satisfy these conditions.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line of the input gives the number of test cases, <strong>T</strong>. <strong>T</strong> test cases follow; each consists of one line with an integer <strong>N</strong>.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each test case, output one line containing <code>Case #x: A B</code>, where <code>x</code> is the test case number (starting from 1), and <code>A</code> and <code>B</code> are positive integers as described above.</p><p>It is guaranteed that at least one solution exists. If there are multiple solutions, you may output any one of them. (See “What if a test case has multiple correct solutions?” in the Competing section of the <a href="https://codingcompetitions.withgoogle.com/codejam/faq" target="_blank" rel="noopener">FAQ</a>. This information about multiple solutions will not be explicitly stated in the remainder of the 2019 contest.)</p><h3 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h3><p>1 ≤ <strong>T</strong> ≤ 100.<br>Time limit: 10 seconds per test set.<br>Memory limit: 1GB.<br>At least one of the digits of <strong>N</strong> is a 4.</p><h4 id="Test-set-1-Visible"><a href="#Test-set-1-Visible" class="headerlink" title="Test set 1 (Visible)"></a>Test set 1 (Visible)</h4><p>1 &lt; <strong>N</strong> &lt; 105.</p><h4 id="Test-set-2-Visible"><a href="#Test-set-2-Visible" class="headerlink" title="Test set 2 (Visible)"></a>Test set 2 (Visible)</h4><p>1 &lt; <strong>N</strong> &lt; 109.</p><p>Solving the first two test sets for this problem should get you a long way toward advancing. The third test set is worth only 1 extra point, for extra fun and bragging rights!</p><h4 id="Test-set-3-Hidden"><a href="#Test-set-3-Hidden" class="headerlink" title="Test set 3 (Hidden)"></a>Test set 3 (Hidden)</h4><p>1 &lt; <strong>N</strong> &lt; 10100.</p><h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><table><thead><tr><th>Input</th><th>Output</th></tr></thead><tbody><tr><td><code>3 4 940 4444</code></td><td><code>Case #1: 2 2 Case #2: 852 88 Case #3: 667 3777</code></td></tr></tbody></table><p>In Sample Case #1, notice that A and B can be the same. The only other possible answers are <code>1 3</code> and <code>3 1</code>.</p></blockquote><p>这题是米斯达保护协会出的（迫真）</p><p>其实就是把一个包含<code>4</code>的数拆分成两个不同的数，但是这两个数不能包含<code>4</code>。</p><p>只要有一个固定的拆分方法就可以：</p><ul><li>对每一个位上的数字<code>a</code>，如果不是<code>4</code>，就拆分成<code>a</code>和<code>0</code>；</li><li>否则拆出两个<code>2</code></li></ul><p>想着很简单就不管了，结果比赛结束一看，竟然没过hidden case……</p><p>想了一会恍然大悟：位数不够！</p><p>那就该用<code>BigInteger</code>库了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigInteger<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BigInteger sum <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token function">splitWithout4</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Case #"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> sum<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> BigInteger <span class="token function">splitWithout4</span><span class="token punctuation">(</span>BigInteger sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigInteger res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            ten <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>ten<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'4'</span><span class="token punctuation">)</span>                  res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(log(n))$</li><li>空间复杂度：$O(1)$</li></ul><hr><p>这里插播一下<code>java.math.BigInteger</code>库，好像是1.7版本的jdk开始支持的。</p><p>因为java最大的整数使用<code>long</code>存的，数位最大不过64bit，也就是说最大表示不到2的63次方，最小自然是负的2的63次方。这样计算起来不过就是1e20左右嘛，根本不够看的。</p><p>所以java使用大整数库来操作比较长的数，方法是将数存在<code>String</code>里面，然后对加减乘除模，位运算等等都单独内置了支持（还支持了gcd，好评！）</p><p>因为是使用字符串表示，字符串长度是一个<code>int</code>值，最长就是<code>Integer.MAX_VALUE</code>，一般够用了</p><hr><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigInteger<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BigInteger sum <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token function">splitWithout4</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Case #"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> sum<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> BigInteger <span class="token function">splitWithout4</span><span class="token punctuation">(</span>BigInteger sum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigInteger res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BigInteger three <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            two <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            ten <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>ten<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">>=</span> <span class="token string">'4'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'6'</span><span class="token punctuation">)</span>                    res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>three<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>two<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="You-Can-Go-Your-Own-Way"><a href="#You-Can-Go-Your-Own-Way" class="headerlink" title="You Can Go Your Own Way"></a>You Can Go Your Own Way</h3><blockquote><h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h3><p>You have just entered the world’s easiest maze. You start in the northwest cell of an <strong>N</strong> by <strong>N</strong> grid of unit cells, and you must reach the southeast cell. You have only two types of moves available: a unit move to the east, and a unit move to the south. You can move into any cell, but you may not make a move that would cause you to leave the grid.</p><p>You are excited to be the first in the world to solve the maze, but then you see footprints. Your rival, Labyrinth Lydia, has already solved the maze before you, using the same rules described above!</p><p>As an original thinker, you do not want to reuse any of Lydia’s moves. Specifically, if her path includes a unit move from some cell A to some adjacent cell B, your path cannot also include a move from A to B. (However, in that case, it is OK for your path to visit A or visit B, as long as you do not go from A to B.) Please find such a path.</p><p>In the following picture, Lydia’s path is indicated in blue, and one possible valid path for you is indicated in orange:</p><p><img src="/2019/04/08/Code-Jam-2019-Qualification-Round/path.svg" alt></p><h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h3><p>The first line of the input gives the number of test cases, <strong>T</strong>. <strong>T</strong> test cases follow; each case consists of two lines. The first line contains one integer <strong>N</strong>, giving the dimensions of the maze, as described above. The second line contains a string <strong>P</strong>of 2<strong>N</strong> - 2 characters, each of which is either uppercase <code>E</code> (for east) or uppercase <code>S</code>(for south), representing Lydia’s valid path through the maze.</p><h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><p>For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is a string of 2<strong>N</strong> - 2 characters each of which is either uppercase <code>E</code> (for east) or uppercase <code>S</code> (for south), representing your valid path through the maze that does not conflict with Lydia’s path, as described above. It is guaranteed that at least one answer exists.</p><h3 id="Limits-1"><a href="#Limits-1" class="headerlink" title="Limits"></a>Limits</h3><p>1 ≤ <strong>T</strong> ≤ 100.<br>Time limit: 15 seconds per test set.<br>Memory limit: 1GB.<br><strong>P</strong> contains exactly <strong>N</strong> - 1 <code>E</code> characters and exactly <strong>N</strong> - 1 <code>S</code> characters.</p><h4 id="Test-set-1-Visible-1"><a href="#Test-set-1-Visible-1" class="headerlink" title="Test set 1 (Visible)"></a>Test set 1 (Visible)</h4><p>2 ≤ <strong>N</strong> ≤ 10.</p><h4 id="Test-set-2-Visible-1"><a href="#Test-set-2-Visible-1" class="headerlink" title="Test set 2 (Visible)"></a>Test set 2 (Visible)</h4><p>2 ≤ <strong>N</strong> ≤ 1000.</p><h4 id="Test-set-3-Hidden-1"><a href="#Test-set-3-Hidden-1" class="headerlink" title="Test set 3 (Hidden)"></a>Test set 3 (Hidden)</h4><p>For at most 10 cases, 2 ≤ <strong>N</strong> ≤ 50000.<br>For all other cases, 2 ≤ <strong>N</strong> ≤ 10000.</p><h3 id="Sample-1"><a href="#Sample-1" class="headerlink" title="Sample"></a>Sample</h3><table><thead><tr><th>Input</th><th>Output</th></tr></thead><tbody><tr><td><code>2 2 SE 5 EESSSESE</code></td><td><code>Case #1: ES Case #2: SEEESSES</code></td></tr></tbody></table><p>In Sample Case #1, the maze is so small that there is only one valid solution left for us.</p><p>Sample Case #2 corresponds to the picture above. Notice that it is acceptable for the paths to cross.</p></blockquote><p>一开始我想的很复杂，回溯法解决：首先在<code>n*n</code>的格子上标记每个格子走的路线，如果遇到同路那就返回上一步换个方向继续做。时间和空间复杂度是$O(n^2)$，代码也很长：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ti <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> ti <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> ti<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String path <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> path<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'E'</span><span class="token punctuation">)</span>                    y<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    x<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">findAnotherPath</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Case #"</span> <span class="token operator">+</span> ti <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">findAnotherPath</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> StringBuilder curr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> map<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> goEast <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> goSouth <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'S'</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">!=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            curr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'S'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            goEast <span class="token operator">=</span> <span class="token function">findAnotherPath</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>            curr<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>goEast <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'E'</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            curr<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'E'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            goSouth <span class="token operator">=</span> <span class="token function">findAnotherPath</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> curr<span class="token punctuation">)</span><span class="token punctuation">;</span>            curr<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> goEast <span class="token operator">||</span> goSouth<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后顺利通过了两个visible case。</p><p>比赛结束之后，发现还有hidden case没过。看了一下analysis，才知道有一种更简洁的方法：</p><p>那就是始终走对称路线！</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ti <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> ti <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> ti<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String path <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Case #"</span> <span class="token operator">+</span> ti <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">inversePath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">inversePath</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> path<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'S'</span> <span class="token operator">?</span> <span class="token string">'E'</span> <span class="token operator">:</span> <span class="token string">'S'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Cryptopangrams"><a href="#Cryptopangrams" class="headerlink" title="Cryptopangrams"></a>Cryptopangrams</h3><blockquote><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem"></a>Problem</h3><p>On the Code Jam team, we enjoy sending each other <em>pangrams</em>, which are phrases that use each letter of the English alphabet at least once. One common example of a pangram is “the quick brown fox jumps over the lazy dog”. Sometimes our pangrams contain confidential information — for example, <code>CJ QUIZ: KNOW BEVY OF DP FLUX ALGORITHMS</code> — so we need to keep them secure.</p><p>We looked through a cryptography textbook for a few minutes, and we learned that it is very hard to factor products of two large prime numbers, so we devised an encryption scheme based on that fact. First, we made some preparations:</p><ul><li>We chose 26 different prime numbers, none of which is larger than some integer <strong>N</strong>.</li><li>We sorted those primes in increasing order. Then, we assigned the smallest prime to the letter <code>A</code>, the second smallest prime to the letter <code>B</code>, and so on.</li><li>Everyone on the team memorized this list.</li></ul><p>Now, whenever we want to send a pangram as a message, we first remove all spacing to form a plaintext message. Then we write down the product of the prime for the first letter of the plaintext and the prime for the second letter of the plaintext. Then we write down the product of the primes for the second and third plaintext letters, and so on, ending with the product of the primes for the next-to-last and last plaintext letters. This new list of values is our ciphertext. The number of values is one smaller than the number of characters in the plaintext message.</p><p>For example, suppose that <strong>N</strong> = 103 and we chose to use the first 26 odd prime numbers, because we worry that it is too easy to factor even numbers. Then <code>A</code> = 3, <code>B</code> = 5, <code>C</code> = 7, <code>D</code> = 11, and so on, up to <code>Z</code> = 103. Also suppose that we want to encrypt the <code>CJ QUIZ</code>… pangram above, so our plaintext is <code>CJQUIZKNOWBEVYOFDPFLUXALGORITHMS</code>. Then the first value in our ciphertext is 7 (the prime for <code>C</code>) times 31 (the prime for <code>J</code>) = <code>217</code>; the next value is <code>1891</code>, and so on, ending with <code>3053</code>.</p><p>We will give you a ciphertext message and the value of <strong>N</strong> that we used. We will not tell you which primes we used, or how to decrypt the ciphertext. Do you think you can recover the plaintext anyway?</p><h3 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h3><p>The first line of the input gives the number of test cases, <strong>T</strong>. <strong>T</strong> test cases follow; each test case consists of two lines. The first line contains two integers: <strong>N</strong>, as described above, and <strong>L</strong>, the length of the list of values in the ciphertext. The second line contains <strong>L</strong> integers: the list of values in the ciphertext.</p><h3 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h3><p>For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is a string of <strong>L</strong> + 1 uppercase English alphabet letters: the plaintext.</p><h3 id="Limits-2"><a href="#Limits-2" class="headerlink" title="Limits"></a>Limits</h3><p>1 ≤ <strong>T</strong> ≤ 100.<br>Time limit: 20 seconds per test set.<br>Memory limit: 1 GB.<br>25 ≤ <strong>L</strong> ≤ 100.<br>The plaintext contains each English alphabet letter at least once.</p><h4 id="Test-set-1-Visible-2"><a href="#Test-set-1-Visible-2" class="headerlink" title="Test set 1 (Visible)"></a>Test set 1 (Visible)</h4><p>101 ≤ <strong>N</strong> ≤ 10000.</p><h4 id="Test-set-2-Hidden"><a href="#Test-set-2-Hidden" class="headerlink" title="Test set 2 (Hidden)"></a>Test set 2 (Hidden)</h4><p>101 ≤ <strong>N</strong> ≤ 10100.</p><h3 id="Sample-2"><a href="#Sample-2" class="headerlink" title="Sample"></a>Sample</h3><table><thead><tr><th>Input</th><th></th></tr></thead><tbody><tr><td><code>2 103 31 217 1891 4819 2291 2987 3811 1739 2491 4717 445 65 1079 8383 5353 901 187 649 1003 697 3239 7663 291 123 779 1007 3551 1943 2117 1679 989 3053 10000 25 3292937 175597 18779 50429 375469 1651121 2102 3722 2376497 611683 489059 2328901 3150061 829981 421301 76409 38477 291931 730241 959821 1664197 3057407 4267589 4729181 5335543</code></td><td></td></tr><tr><td></td><td></td></tr><tr><td>Output</td><td></td></tr><tr><td><code>Case #1: CJQUIZKNOWBEVYOFDPFLUXALGORITHMS Case #2: SUBDERMATOGLYPHICFJKNQVWXZ</code></td></tr></tbody></table></blockquote><p>思路很简单，找到两个相邻的数的最大公因数，例如相邻两个数是<code>a * b</code>和<code>b*c</code>，那么最大公因数就是<code>b</code></p><p>后面hidden case比较大，1e100的数据量，一开始想的是先别考虑了</p><p>然后我就掉入了巨坑……</p><p>简单写了一下使用<code>Integer</code>存保存数组的代码，gcd用的是欧几里得算法的加强版，对较大的数提高了一点效率。</p><p>运行了一下sample，ok</p><p>结果在visible case上面<code>re(runtime error)</code>了。</p><p>冥思苦想，可能是数据太大溢出了？我寻思这也不是什么大的数据啊？？</p><p>索性上<code>BigInteger</code>库改写了一下代码，正好可以解决hidden case的问题：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigInteger<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BigInteger up <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                product<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Case #"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> product<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> factor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        StringBuilder res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>BigInteger<span class="token operator">></span> primes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">gcd</span><span class="token punctuation">(</span>product<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> factor<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>BigInteger<span class="token operator">></span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>primes<span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>BigInteger<span class="token punctuation">,</span> Character<span class="token operator">></span> dict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            dict<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自我感觉良好～sample ok之后就立马去attempt了。</p><p>结果：<code>RE</code></p><p>心态略崩，那说明不是刚才说的问题咯？</p><p>于是去查了一下<code>RE</code>都有哪些错误——除了数组越界（这个不会吧，sample都过了），最可能的就是算数除0错误？</p><h3 id="喵喵喵？哪里有0啊？"><a href="#喵喵喵？哪里有0啊？" class="headerlink" title="喵喵喵？哪里有0啊？"></a>喵喵喵？哪里有0啊？</h3><p>苦恼地改进了一下代码，把原来两行的数组改成一行了。话说本来就该用一行做的……</p><p>虽然很奇怪，但是我还是顺着这个想法，在代码中除的部分用了一次catch，捕捉之后返回错误的结果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> factor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    StringBuilder res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>BigInteger<span class="token operator">></span> primes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        factor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>product<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">gcd</span><span class="token punctuation">(</span>product<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"ERROR"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果出现除0错误，那么提交结果就会变成WA</span>    <span class="token punctuation">}</span>    primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            factor<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"ERROR"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果出现除0错误，那么提交结果就会变成WA</span>        <span class="token punctuation">}</span>        primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>BigInteger<span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>primes<span class="token punctuation">)</span><span class="token punctuation">;</span>    Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>BigInteger<span class="token punctuation">,</span> Character<span class="token operator">></span> dict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        dict<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>BigInteger num <span class="token operator">:</span> factor<span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次提交果然变成了<code>WA</code>，真的是除0的结果……</p><p>然而还是百思不得其解。</p><p>心态崩了一会，只好上ide了。</p><p>在intellij里面写了一下用0～1000的质数生成case的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">211</span><span class="token punctuation">,</span> <span class="token number">239</span><span class="token punctuation">,</span> <span class="token number">353</span><span class="token punctuation">,</span> <span class="token number">479</span><span class="token punctuation">,</span> <span class="token number">601</span><span class="token punctuation">,</span> <span class="token number">701</span><span class="token punctuation">,</span> <span class="token number">827</span><span class="token punctuation">,</span> <span class="token number">883</span><span class="token punctuation">,</span> <span class="token number">1021</span><span class="token punctuation">,</span> <span class="token number">1051</span><span class="token punctuation">,</span> <span class="token number">1087</span><span class="token punctuation">,</span> <span class="token number">1277</span><span class="token punctuation">,</span> <span class="token number">1381</span><span class="token punctuation">,</span> <span class="token number">1531</span><span class="token punctuation">,</span> <span class="token number">1571</span><span class="token punctuation">,</span> <span class="token number">1669</span><span class="token punctuation">,</span> <span class="token number">1861</span><span class="token punctuation">,</span> <span class="token number">1973</span><span class="token punctuation">,</span> <span class="token number">1997</span><span class="token punctuation">,</span> <span class="token number">2137</span><span class="token punctuation">,</span> <span class="token number">2213</span><span class="token punctuation">,</span> <span class="token number">2281</span><span class="token punctuation">,</span> <span class="token number">2411</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> dict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        dict<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Random r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> ti <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ti <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> ti<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dict<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            product<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> res<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10000 "</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>product<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果做了几次实验，还真撞到一个error的case！</p><p>这还不赶紧保存下来，一看生成的case……</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">10000</span> <span class="token number">100</span><span class="token number">4419361</span> <span class="token number">4419361</span> <span class="token number">2325863</span> <span class="token number">1073071</span> <span class="token number">2181877</span> <span class="token number">4566769</span> <span class="token number">4874497</span> <span class="token number">4562</span> <span class="token number">3994</span> <span class="token number">2098847</span> <span class="token number">371003</span> <span class="token number">311699</span> <span class="token number">618983</span> <span class="token number">1498037</span> <span class="token number">3566653</span> <span class="token number">3338</span> <span class="token number">4</span> <span class="token number">706</span> <span class="token number">704941</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第一个数和第二个数是相等的！这样一来它们的公因数就是本身——意味着我会认为第一个数对应的质数是1，第二个数的质数是它本身，第三个数的质数就是它除以第二个数，而如果它还比第二个数小，那么除法就会返回0！</p><p>终于想明白这一点之后，我开始思考解决方案：</p><ul><li>遇到这种情况，排列肯定出现了<code>aba</code>型的序列，导致前后两个乘积是相等的，得出的公因数就无效了。</li><li>每个字母在每段明文都出现至少一次，那么明文肯定出现了至少三个字母，那么肯定在某一处会有<code>abc</code>型的序列，他们保证乘积不相等。</li><li>那么就在找到不同的数之后，从他们入手解出公因数，然后向两侧【传播】。</li></ul><p>做到这点，终于做出了。比赛结束后一看，hidden case也搞定了，真不错。</p><p>最终完整代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>math<span class="token punctuation">.</span>BigInteger<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BigInteger up <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>                product<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextBigInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Case #"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> product<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BigInteger<span class="token punctuation">[</span><span class="token punctuation">]</span> factor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        StringBuilder res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>BigInteger<span class="token operator">></span> primes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> product<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>product<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            mid<span class="token operator">++</span><span class="token punctuation">;</span>        factor<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>product<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">gcd</span><span class="token punctuation">(</span>product<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 向右计算</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> mid<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            factor<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 向左计算</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> mid<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            factor<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> product<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            primes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>factor<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// set中质数排序后和对应字母构成字典</span>        List<span class="token operator">&lt;</span>BigInteger<span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>primes<span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>BigInteger<span class="token punctuation">,</span> Character<span class="token operator">></span> dict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            dict<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 这里以防万一嘛，虽然题目要求肯定不会出现get不到的字母</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BigInteger num <span class="token operator">:</span> factor<span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O( n)$</li></ul><h3 id="Dat-Bae"><a href="#Dat-Bae" class="headerlink" title="Dat Bae"></a>Dat Bae</h3><blockquote><h3 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem"></a>Problem</h3><p>A research consortium has built a new database system for their new data center. The database is made up of one master computer and <strong>N</strong> worker computers, which are given IDs from 0 to <strong>N</strong>-1. Each worker stores exactly one bit of information… which seems rather wasteful, but this is very important data!</p><p>You have been hired to evaluate the following instruction for the database:</p><ul><li><code>TEST_STORE</code> <bits>: The master reads in <bits>, which is a string of <strong>N</strong> bits, and sends the i-th bit to the i-th worker for storage. The master will then read the bits back from the workers and return them to the user, in the same order in which they were read in.</bits></bits></li></ul><p>During normal operation, <code>TEST_STORE</code> should return the same string of bits that it read in, but unfortunately, <strong>B</strong> of the workers are broken!</p><p>The broken workers are correctly able to store the bits given to them, but whenever the master tries to read from a broken worker, no bit is returned. This causes the <code>TEST_STORE</code> operation to return only <strong>N</strong>-<strong>B</strong> bits, which are the bits stored on the non-broken workers (in ascending order of their IDs). For example, suppose <strong>N</strong> = 5 and the 0th and 3rd workers are broken (so <strong>B</strong> = 2). Then:</p><ul><li><code>TEST_STORE 01101</code> returns <code>111</code>.</li><li><code>TEST_STORE 00110</code> returns <code>010</code>.</li><li><code>TEST_STORE 01010</code> returns <code>100</code>.</li><li><code>TEST_STORE 11010</code> also returns <code>100</code>.</li></ul><p>For security reasons, the database is hidden in an underground mountain vault, so calls to <code>TEST_STORE</code> take a very long time. You have been tasked with working out which workers are broken using at most <strong>F</strong> calls to <code>TEST_STORE</code>.</p><h3 id="Input-and-output"><a href="#Input-and-output" class="headerlink" title="Input and output"></a>Input and output</h3><p>This is an interactive problem. You should make sure you have read the information in the Interactive Problems section of our <a href="https://codingcompetitions.withgoogle.com/codejam/faq" target="_blank" rel="noopener">FAQ</a>.</p><p>Initially, your program should read a single line containing a single integer <strong>T</strong>indicating the number of test cases. Then, you need to process <strong>T</strong> test cases.</p><p>For each test case, your program will first read a single line containing three integers <strong>N</strong>, <strong>B</strong>, and <strong>F</strong>, indicating the number of workers, the number of broken workers, and the number of lines you may send (as described below).</p><p>Then you may send the judge up to <strong>F</strong> lines, each containing a string of exactly <strong>N</strong>characters, each either <code>0</code> or <code>1</code>. Each time you send a line, the judge will check that you have not made more than <strong>F</strong> calls. If you have, the judge will send you a single line containing a single <code>-1</code>, and then finish all communication and wait for your program to finish. Otherwise, the judge will send a string of length <strong>N</strong>-<strong>B</strong>: the string returned by <code>TEST_STORE</code>, as described above.</p><p>Once your program knows the index of the <strong>B</strong> broken workers, it can finish the test case by sending <strong>B</strong> space-separated integers: the IDs of the broken workers, in sorted order. This does not count as one of your <strong>F</strong> calls.</p><p>If the <strong>B</strong> integers are not exactly the IDs of the <strong>B</strong> broken workers, you will receive a Wrong Answer verdict, and the judge will send a single line containing <code>-1</code>, and then no additional communication. If your answer was correct, the judge will send a single line with <code>1</code>, followed by the line that begins the next test case (or exit, if that was the last test case).</p><h3 id="Limits-3"><a href="#Limits-3" class="headerlink" title="Limits"></a>Limits</h3><p>Time limit: 20 seconds per test set.<br>Memory limit: 1GB.<br>1 ≤ <strong>T</strong> ≤ 100.<br>2 ≤ <strong>N</strong> ≤ 1024.<br>1 ≤ <strong>B</strong> ≤ min(15, <strong>N</strong>-1).</p><h4 id="Test-set-1-Visible-3"><a href="#Test-set-1-Visible-3" class="headerlink" title="Test set 1 (Visible)"></a>Test set 1 (Visible)</h4><p><strong>F</strong> = 10.</p><h4 id="Test-set-2-Hidden-1"><a href="#Test-set-2-Hidden-1" class="headerlink" title="Test set 2 (Hidden)"></a>Test set 2 (Hidden)</h4><p><strong>F</strong> = 5.</p><h3 id="Testing-Tool"><a href="#Testing-Tool" class="headerlink" title="Testing Tool"></a>Testing Tool</h3><p>You can use this testing tool to test locally or on our servers. To test locally, you will need to run the tool in parallel with your code; you can use our <a href="https://storage.googleapis.com/coding-competitions.appspot.com/interactive_runner.py" target="_blank" rel="noopener">interactive runner</a> for that. For more information, read the Interactive Problems section of the <a href="https://codingcompetitions.withgoogle.com/codejam/faq" target="_blank" rel="noopener">FAQ</a>.</p><h3 id="Local-Testing-Tool"><a href="#Local-Testing-Tool" class="headerlink" title="Local Testing Tool"></a>Local Testing Tool</h3><p>To better facilitate local testing, we provide you the following script. Instructions are included inside. You are encouraged to add more test cases for better testing. Please be advised that although the testing tool is intended to simulate the judging system, it is <strong>NOT</strong> the real judging system and might behave differently.</p><p>If your code passes the testing tool but fails the real judge, please check <a href="https://code.google.com/codejam/resources/faq#language-details" target="_blank" rel="noopener">here</a> to make sure that you are using the same compiler as us.</p><p><a href="https://codingcompetitions.withgoogle.com/codejam/round/0000000000051705/00000000000881de#" target="_blank" rel="noopener"><em>file_download</em>Download testing_tool.py</a></p><h3 id="Sample-Interaction"><a href="#Sample-Interaction" class="headerlink" title="Sample Interaction"></a>Sample Interaction</h3><p>The following interaction meets the limits for Test set 1.</p><pre class="line-numbers language-python"><code class="language-python">  t <span class="token operator">=</span> readline_int<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token operator">//</span> Reads <span class="token number">2</span> into t  n<span class="token punctuation">,</span> b<span class="token punctuation">,</span> f <span class="token operator">=</span> readline_int_list<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">//</span> Reads <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span> into n<span class="token punctuation">,</span> b<span class="token punctuation">,</span> f  printline <span class="token number">01101</span> to stdout    <span class="token operator">//</span> The next four outputs match the example <span class="token keyword">in</span>                               <span class="token operator">//</span> the problem statement<span class="token punctuation">.</span>  flush stdout  response <span class="token operator">=</span> readline_str<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">//</span> Reads <span class="token number">111</span> into response<span class="token punctuation">.</span> <span class="token punctuation">(</span>At this point<span class="token punctuation">,</span> we                               <span class="token operator">//</span> could determine the answer<span class="token punctuation">;</span> the remaining                               <span class="token operator">//</span> queries are just examples!<span class="token punctuation">)</span>  printline <span class="token number">00110</span> to stdout  flush stdout  response <span class="token operator">=</span> readline_str<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">//</span> Reads <span class="token number">010</span> into response  printline <span class="token number">01010</span> to stdout  flush stdout  response <span class="token operator">=</span> readline_str<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">//</span> Reads <span class="token number">100</span> into response  printline <span class="token number">11010</span> to stdout  flush stdout  response <span class="token operator">=</span> readline_str<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">//</span> Reads <span class="token number">100</span> into response  printline <span class="token number">0</span> <span class="token number">3</span> to stdout      <span class="token operator">//</span> Guesses the answer<span class="token punctuation">.</span> Notice that we were                               <span class="token operator">//</span> <span class="token operator">not</span> required to use all <span class="token number">10</span> of our allowed                               <span class="token operator">//</span> queries<span class="token punctuation">.</span>  flush stdout  verdict <span class="token operator">=</span> readline_int<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token operator">//</span> Reads <span class="token number">1</span> into verdict<span class="token punctuation">.</span> We got that test case                               <span class="token operator">//</span> right!  n<span class="token punctuation">,</span> b<span class="token punctuation">,</span> f <span class="token operator">=</span> readline_int_list<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">//</span> Reads <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span> into n<span class="token punctuation">,</span> b<span class="token punctuation">,</span> f<span class="token punctuation">.</span>  printline <span class="token number">01</span> to stdout       <span class="token operator">//</span> <span class="token number">01</span> <span class="token keyword">is</span> a query<span class="token punctuation">,</span> <span class="token operator">not</span> a guess at the final                               <span class="token operator">//</span> answer <span class="token punctuation">(</span><span class="token keyword">if</span> we wanted to guess that just                               <span class="token operator">//</span> worker <span class="token number">1</span> were broken<span class="token punctuation">,</span> we would have to                               <span class="token operator">//</span> send <span class="token number">1</span> <span class="token keyword">as</span> we do below<span class="token punctuation">)</span>  flush stdout  response <span class="token operator">=</span> readline_str<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">//</span> Reads <span class="token number">1</span> into response<span class="token punctuation">.</span>  printline <span class="token number">1</span> to stdout        <span class="token operator">//</span> Makes a <span class="token punctuation">(</span>bad<span class="token punctuation">)</span> wild guess<span class="token punctuation">.</span>  verdict <span class="token operator">=</span> readline_str<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token operator">//</span> Reads <span class="token operator">-</span><span class="token number">1</span> into verdict<span class="token punctuation">.</span>  exit                         <span class="token operator">//</span> exits to avoid an ambiguous TLE error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>这题比赛的时候没有做，现在研究一下。</p><p>少见的交互题，其实就是和控制台输入输出的交互。</p><p>说的是如何在有限次收发信息中确定缺失的机子有哪些。</p><p>这题可以说是四道题里面最难的一道了，也是做的人最少的。以下思路和代码来自分析：</p><ol><li><p>首先，介绍一下这题的交互方式：</p><ul><li>开头输入和其他题目一样，先输入次数，然后每轮输入N，B和F；</li><li>程序需要输出F行，每行是测试数据（也就是长度为N的0和1的字符串）</li><li>此时交互端读取程序输出，并依次返回测试结果到输出。</li><li>程序需要读入结果，分析出出错的序号，中间用空格分开。</li><li>交互端会根据读入的结果，返回-1或者1，前者表示错误而后者表示正确。</li></ul></li><li><p>思路？</p><ul><li><p>首先，如果一台机器坏了，那么它接下来的反馈不论如何都会缺失，所以导致整列数据缺失；</p></li><li><p>在case1中，长度是1024，允许猜测10次；那么我们需要构造出一个序列，使得每一列都具有一个独特的标示，而我们读出缺少的列就可以判断缺少的数。幸运的是，1024是2的10次方，所以我们能够如此构造：</p><ul><li>由01重复构成的串</li><li>由0011节重复构成的串</li><li>由00001111节重复构成的串</li><li>……</li><li>由16个0和16个1组成的节重复构成的串</li></ul><p>为什么要这么构造呢？那是因为我们可以惊奇的发现，这样做之后，从左到右的列，它们从下往上排列的串——比如，第一列是0000000000，第二列是0000000001——刚好是列的序号的二进制表示。最后一个串是1111111111，即1023。如此一来，我们可以通过判断某个数字是否存在来判断列是否缺失。</p></li><li><p>在case2中，我们最多只能请求5次，这就不像第一部分一样直接，但是思路是类似的。由于我们只能够使用5次，那么我们只能表示从0到2的5次，也就是0～15的范围。我们无法直接用列的数字和列关联起来，但是我们可以把所有的列分为16个一组，通过组号和组内缺失的数字来确定丢失的数字。</p><ul><li>注意，因为坏掉的机器最多只有15台，所以不会出现整个组都坏掉，或者本来在两组的部分被当作一组来看待——举个例子，如果最坏情况出现，那就是连续的15台机器坏掉，从某组的1号开始一直坏到15号，那么它和下一组将会有2个0，我们依然能够将它们区分成两组（因为没有一组会包含两个相同的数字）。</li></ul></li></ul></li></ol><p>代码来源：<a href="https://github.com/arthtyagi/Google-Code-Jam" target="_blank" rel="noopener">https://github.com/arthtyagi/Google-Code-Jam</a></p><p>遗憾的是，这段代码测试是re。目前没有找到简洁的代码。</p><p>有时间我自己写一份吧😠</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    N<span class="token punctuation">,</span> B<span class="token punctuation">,</span> F <span class="token operator">=</span> map<span class="token punctuation">(</span>int<span class="token punctuation">,</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> F<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">:</span>        send <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mask <span class="token operator">&amp;</span> x<span class="token punctuation">)</span> <span class="token operator">>></span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>send<span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    recv <span class="token operator">=</span> <span class="token punctuation">[</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>int<span class="token punctuation">,</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">]</span>      ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> N <span class="token operator">-</span> B<span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        xx <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>F<span class="token punctuation">)</span><span class="token punctuation">:</span>            xx <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span>recv<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> j        <span class="token keyword">if</span> xx <span class="token operator">==</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span><span class="token punctuation">:</span>            i <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    T <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> solve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;准备打一下今年的code jam和kick start，看了一下code jam是采取连续比赛的机制，kick start是每一轮独立。&lt;/p&gt;
&lt;p&gt;今天写一下关于code jam的资格赛的事情。&lt;/p&gt;
&lt;p&gt;QR在4月5日早上七点开始，持续27小时，只要在难度不大的四题（总分100）里面做出30分就可以。&lt;/p&gt;
&lt;p&gt;贴一下战绩：55分，其实挺低的……还需要加油&lt;/p&gt;
    
    </summary>
    
      <category term="competition" scheme="http://yoursite.com/categories/competition/"/>
    
    
      <category term="code jam" scheme="http://yoursite.com/tags/code-jam/"/>
    
  </entry>
  
  <entry>
    <title>ML学习日记4——以少女前线为例讲解贝叶斯分类算法</title>
    <link href="http://yoursite.com/2019/04/07/ML-4-Bayesian/"/>
    <id>http://yoursite.com/2019/04/07/ML-4-Bayesian/</id>
    <published>2019-04-07T08:29:08.000Z</published>
    <updated>2019-04-09T13:51:05.301Z</updated>
    
    <content type="html"><![CDATA[<p>看了李宏毅老师讲解classification的视频，决定以少女前线的枪种分类为例，试做一个贝叶斯分类器。</p><p>前半段理论主要来自李宏毅老师的视频，后半段是自己实现的贝叶斯分类器代码。</p><p><img src="/2019/04/07/ML-4-Bayesian/head.jpg" alt></p><p><s>找配图的时间比码字时间还长，</s>我永远喜欢忤逆小队！</p><a id="more"></a><h2 id="理论部分"><a href="#理论部分" class="headerlink" title="理论部分"></a>理论部分</h2><h3 id="话题引入"><a href="#话题引入" class="headerlink" title="话题引入"></a>话题引入</h3><p>首先做一个题。</p><p>我有两个抽屉A和B，里面放着白球和红球；</p><p>A中红球和白球的个数比为1:3，B中红球和白球的个数比为2:3；</p><p>现在要从两个抽屉中抽一个球，从A抽屉和B抽屉中选择的概率比为1:2；</p><p>如果抽中红球，问：求抽到的球来自A抽屉的概率？</p><p>答案很简单，$P(A|red)=\frac{P(A)P(red|A)}{P(A)P(red|A)+P(B)P(red|B)}$</p><h3 id="分类思想"><a href="#分类思想" class="headerlink" title="分类思想"></a>分类思想</h3><p>首先，我们知道类和类之间是有联系的，我们不能完全确定x是否属于A或者B类，而是只能把归属可能性最大的类作为我们对x的分类。</p><p>现在我们不妨脑洞大开一下，把一个抽屉当作一个类别，把球当做一个需要分类的对象，我们需要找到这个球是哪一类的，其实就是找到这个球最有可能来自哪个抽屉，这样就和上面的公式是一回事了。</p><p>换言之，对某一个待归类的x，我们把它当作是已经取出的”球”，通过计算某个类别（抽屉）产生出case（从这一抽屉中抽球）的概率，以及各个类别（抽屉）产生出这一个x的概率，就可以计算出x属于每一类的概率。</p><p>当它属于某一类A的概率最大的时候，我们就将它分类为A类。</p><p>这一模型又被称为<em>generative model</em>——生成模型，也就是说这个模型其实不单可以归类，也可以用于产生case。</p><h3 id="具体分析产生的模型是什么样的？"><a href="#具体分析产生的模型是什么样的？" class="headerlink" title="具体分析产生的模型是什么样的？"></a>具体分析产生的模型是什么样的？</h3><p>根据刚才的模型，我们需要两类参数才能计算分类概率：</p><ol><li>某个类生产case的概率（从这个抽屉抽球的概率）</li><li>这个类产生出的case是x的概率（抽到的球是红球的概率）</li></ol><p>对1，使用训练集中该类的数据量占总数据量的个数作为这个类生产case的概率。</p><p>比较复杂的是2：</p><h4 id="生成的数据是x的概率如何计算？"><a href="#生成的数据是x的概率如何计算？" class="headerlink" title="生成的数据是x的概率如何计算？"></a>生成的数据是x的概率如何计算？</h4><p>我们以少前各个枪种为例：每一把枪具有血量、伤害、命中、回避、射速等等数值属性，它们都是一定范围内的整数，可以看作连续变量，而且同一类枪种的某一属性值都比较接近（比如，rf狙击枪的满级伤害普遍在120+，而射速普遍在40以下），可以认为是一个多维的正态分布生成的。</p><p>这样一来，我们可以以x属性在这一正态分布下的概率密度（注意，离散变量谈概率而连续变量谈概率密度）作为生成数据是x的概率。</p><h4 id="那么，怎样求出这一个正态分布的参数？"><a href="#那么，怎样求出这一个正态分布的参数？" class="headerlink" title="那么，怎样求出这一个正态分布的参数？"></a>那么，<strong>怎样求出这一个正态分布的参数</strong>？</h4><p>方法是极大似然估计：选取让过去发生的事情可能性最大的参数。</p><p>对一个正态分布$f_{\mu,\sum}$，它得出之前的case的概率越大，它就越好。</p><p>所以把最大似然作为目标函数，取微分为0的参数为最好的参数（过程略）：</p><ul><li><p>对一类train data，取它们的平均值作为$\mu$即$\mu=\frac{\sum_{i=1}^nx^i}{n}$，而$\sum=\frac{\sum^n_{i=1}(x^i-\mu)(x^i-\mu)^T}{n}​$。</p></li><li><p>注意这里的$\mu$是维度等于属性个数的向量，$\sum$是属性的协方差矩阵。</p></li></ul><h4 id="有了参数，如何评估产生x的可能性？"><a href="#有了参数，如何评估产生x的可能性？" class="headerlink" title="有了参数，如何评估产生x的可能性？"></a>有了参数，<strong>如何评估产生x的可能性</strong>？</h4><p>套公式呗。高斯分布的概率密度公式：</p><p>$P(C_i) * P(x | C_i) = \frac{1}{(2\pi)^{D/2}}\frac{1}{|\sum^i|^{1/2}}exp({-\frac{1}{2}(x-\mu^i)(\sum^i)^{-1}(x-\mu^i)})$</p><blockquote><p>【补充】多元正态分布的参数：</p><p>先从各维度不相关的多元正态分布入手，数据点通过d维的列向量描述$x=\left[ x_1,x_2,\cdots,x_d \right]^T$，各个维度的均值方差分别为$[\mu_1,\mu_2,\cdots,\mu_d]$ , $[\sigma_1,\sigma_2,\cdots,\sigma_d]$ 来描述，高斯概率密度函数可以表示为：</p><p>$f(x)=\frac{1}{(\sqrt{2\pi})^d\sigma_1\sigma_2\cdots\sigma_d}e^{-\frac{1}{2}[(\frac{x_1-\mu_1}{\sigma_1})^2+(\frac{x_2-\mu_2}{\sigma_2})^2+\cdots+(\frac{x_d-\mu_1}{\sigma_d})^2]}​$</p><p>前面多出的项是为了让概率之和为1，其实这个方程可以这样子去解读：</p><p>$f(x)=\frac{1}{(\sqrt{2\pi})\sigma_1}e^{-\frac{1}{2}(\frac{x_1-\mu_1}{\sigma_1})^2}\frac{1}{(\sqrt{2\pi})\sigma_2}e^{-\frac{1}{2}(\frac{x_2-\mu_2}{\sigma_2})^2}\cdots\frac{1}{(\sqrt{2\pi})\sigma_d}e^{-\frac{1}{2}(\frac{x_d-\mu_d}{\sigma_d})^2}$</p><p>而当我们考虑变量之间的并不独立的情况，我们可以用$\sum$相关矩阵取代$\sigma$向量（其实原本的$\sigma$向量可以看作是一个主对角阵，而$\sum$是它的一般化，其他位置表示的是各个维度之间的关系）</p></blockquote><h2 id="实践部分"><a href="#实践部分" class="headerlink" title="实践部分"></a>实践部分</h2><p>多说无益，开始写代码。</p><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><ul><li>选取了数据的6-10列，即血量、伤害、命中、回避、射速属性。</li><li>切分成test和train两部分。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> random <span class="token keyword">import</span> randint<span class="token keyword">def</span> <span class="token function">loadData</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span>file<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>str<span class="token punctuation">,</span> delimiter<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    types <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> content<span class="token punctuation">]</span>    attrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>float<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> line<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> content<span class="token punctuation">]</span>    <span class="token keyword">return</span> types<span class="token punctuation">,</span> attrs<span class="token keyword">def</span> <span class="token function">splitCases</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">!=</span> len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    trainX<span class="token punctuation">,</span> trainY<span class="token punctuation">,</span> testX<span class="token punctuation">,</span> testY <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">:</span>            testX<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            testY<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            trainX<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            trainY<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> trainX<span class="token punctuation">,</span> trainY<span class="token punctuation">,</span> testX<span class="token punctuation">,</span> testYtypes<span class="token punctuation">,</span> attrs <span class="token operator">=</span> loadData<span class="token punctuation">(</span><span class="token string">'./data/gf.csv'</span><span class="token punctuation">)</span>TrainX<span class="token punctuation">,</span> TrainY<span class="token punctuation">,</span> TestX<span class="token punctuation">,</span> TestY <span class="token operator">=</span> splitCases<span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> types<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求高斯分布参数"><a href="#求高斯分布参数" class="headerlink" title="求高斯分布参数"></a>求高斯分布参数</h3><ul><li>按照枪种分类形成字典，并且计算出每一类枪的高斯分布参数（协方差矩阵）：</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">splitByType</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    _groups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> _i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> y<span class="token punctuation">[</span>_i<span class="token punctuation">]</span> <span class="token operator">not</span> <span class="token keyword">in</span> _groups<span class="token punctuation">:</span>            _groups<span class="token punctuation">[</span>y<span class="token punctuation">[</span>_i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        _groups<span class="token punctuation">[</span>y<span class="token punctuation">[</span>_i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">[</span>_i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> _groups<span class="token keyword">def</span> <span class="token function">gaussianFit</span><span class="token punctuation">(</span>_attr<span class="token punctuation">)</span><span class="token punctuation">:</span>    _n<span class="token punctuation">,</span> _m <span class="token operator">=</span> len<span class="token punctuation">(</span>_attr<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>_attr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    _mean <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>_m<span class="token punctuation">)</span>    _sigma <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>_m<span class="token punctuation">,</span> _m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> _j <span class="token keyword">in</span> range<span class="token punctuation">(</span>_m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> _i <span class="token keyword">in</span> range<span class="token punctuation">(</span>_n<span class="token punctuation">)</span><span class="token punctuation">:</span>            _mean<span class="token punctuation">[</span>_j<span class="token punctuation">]</span> <span class="token operator">+=</span> _attr<span class="token punctuation">[</span>_i<span class="token punctuation">]</span><span class="token punctuation">[</span>_j<span class="token punctuation">]</span>        _mean<span class="token punctuation">[</span>_j<span class="token punctuation">]</span> <span class="token operator">/=</span> _n    <span class="token keyword">for</span> _i <span class="token keyword">in</span> range<span class="token punctuation">(</span>_n<span class="token punctuation">)</span><span class="token punctuation">:</span>        _tmp <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span><span class="token punctuation">[</span>_attr<span class="token punctuation">[</span>_i<span class="token punctuation">]</span><span class="token punctuation">[</span>_j<span class="token punctuation">]</span> <span class="token operator">-</span> _mean<span class="token punctuation">[</span>_j<span class="token punctuation">]</span> <span class="token keyword">for</span> _j <span class="token keyword">in</span> range<span class="token punctuation">(</span>_m<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        _sigma <span class="token operator">+=</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>_tmp<span class="token punctuation">)</span> <span class="token operator">*</span> _tmp    <span class="token keyword">return</span> _mean<span class="token punctuation">,</span> _sigmaGroup <span class="token operator">=</span> splitByType<span class="token punctuation">(</span>TrainX<span class="token punctuation">,</span> TrainY<span class="token punctuation">)</span>names<span class="token punctuation">,</span> pClass<span class="token punctuation">,</span> means<span class="token punctuation">,</span> sigmas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> attr <span class="token keyword">in</span> Group<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    names<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    pClass<span class="token punctuation">.</span>append<span class="token punctuation">(</span>len<span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span>    count <span class="token operator">+=</span> len<span class="token punctuation">(</span>attr<span class="token punctuation">)</span>    mean<span class="token punctuation">,</span> sigma <span class="token operator">=</span> gaussianFit<span class="token punctuation">(</span>attr<span class="token punctuation">)</span>    means<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mean<span class="token punctuation">)</span>    sigmas<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sigma<span class="token punctuation">)</span>pClass <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token operator">/</span> count <span class="token keyword">for</span> num <span class="token keyword">in</span> pClass<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 查看一下协方差矩阵：</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sigmas<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Covariance matrix for %s'</span> <span class="token operator">%</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sigmas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Covariance matrix for HG[[ 53742.96875   1333.28125  -4061.875   -11030.78125  -2615.46875] [  1333.28125    556.46875    327.875     -609.96875   -432.78125] [ -4061.875      327.875     2283.5       1339.125     -111.125  ] [-11030.78125   -609.96875   1339.125     4815.46875    176.28125] [ -2615.46875   -432.78125   -111.125      176.28125   1193.96875]]Covariance matrix for SMG[[ 2.20652679e+05  7.09821429e+02 -1.90000000e+02 -1.86701786e+04  -1.24607143e+03] [ 7.09821429e+02  1.52678571e+02 -2.90000000e+01 -1.96321429e+02  -1.50928571e+02] [-1.90000000e+02 -2.90000000e+01  5.20000000e+01  1.15000000e+02  -6.80000000e+01] [-1.86701786e+04 -1.96321429e+02  1.15000000e+02  2.51867857e+03   3.66071429e+02] [-1.24607143e+03 -1.50928571e+02 -6.80000000e+01  3.66071429e+02   1.58042857e+03]]Covariance matrix for RF[[15886.95652174  -578.26086957  -984.13043478 -1459.13043478   -256.73913043] [ -578.26086957  7262.43478261   811.2173913   -451.7826087   -885.43478261] [ -984.13043478   811.2173913   1592.60869565   257.60869565    -75.2173913 ] [-1459.13043478  -451.7826087    257.60869565   586.60869565    -42.2173913 ] [ -256.73913043  -885.43478261   -75.2173913    -42.2173913    250.43478261]]Covariance matrix for AR[[ 5.72460e+04 -1.57880e+03 -3.07180e+03 -1.26440e+03  9.71200e+02] [-1.57880e+03  1.36664e+03  7.20400e+01 -2.80680e+02 -1.31936e+03] [-3.07180e+03  7.20400e+01  1.00344e+03  5.11520e+02 -2.59600e+01] [-1.26440e+03 -2.80680e+02  5.11520e+02  5.10160e+02  2.51320e+02] [ 9.71200e+02 -1.31936e+03 -2.59600e+01  2.51320e+02  1.81864e+03]]Covariance matrix for MG[[189016.66666667   4573.33333333  -6338.33333333  -9428.33333333  -14030.        ] [  4573.33333333    811.80952381   -404.80952381   -442.52380952   -1365.42857143] [ -6338.33333333   -404.80952381    533.80952381    589.52380952    1174.42857143] [ -9428.33333333   -442.52380952    589.52380952    777.80952381    1376.57142857] [-14030.          -1365.42857143   1174.42857143   1376.57142857    5124.28571429]]Covariance matrix for SG[[ 4.89192308e+04  7.96153846e+02  1.40000000e+02 -9.53461538e+02   1.29230769e+02] [ 7.96153846e+02  1.32769231e+02 -1.00000000e+01 -3.43076923e+01  -1.13846154e+02] [ 1.40000000e+02 -1.00000000e+01  1.20000000e+01  1.40000000e+01   4.00000000e+00] [-9.53461538e+02 -3.43076923e+01  1.40000000e+01  7.09230769e+01  -5.46153846e+00] [ 1.29230769e+02 -1.13846154e+02  4.00000000e+00 -5.46153846e+00   1.59230769e+02]]</code></pre><h3 id="分类器核心代码"><a href="#分类器核心代码" class="headerlink" title="分类器核心代码"></a>分类器核心代码</h3><ul><li><p>这里的<code>calcPossibility</code>使用的公式：</p><p>$P(C_i) * P(x | C_i) = \frac{1}{(2\pi)^{D/2}}\frac{1}{|\sum^i|^{1/2}}exp({-\frac{1}{2}(x-\mu^i)(\sum^i)^{-1}(x-\mu^i)})​$</p><p>（省略和pi相关的第一项常数，以及分母部分）</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">calcPossibility</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> i<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>    _tmp <span class="token operator">=</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>x <span class="token operator">-</span> means<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    _inv <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>inv<span class="token punctuation">(</span>sigmas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    _exp <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5</span> <span class="token operator">*</span> _tmp <span class="token operator">*</span> _inv <span class="token operator">*</span> np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>_tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> pClass<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> _exp <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>det<span class="token punctuation">(</span>sigmas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">classifier</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    _maxId<span class="token punctuation">,</span> _maxP <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">for</span> _i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        _currP <span class="token operator">=</span> calcPossibility<span class="token punctuation">(</span>x<span class="token punctuation">,</span> _i<span class="token punctuation">)</span>        <span class="token keyword">if</span> _maxP <span class="token operator">&lt;</span> _currP <span class="token punctuation">:</span>            _maxId<span class="token punctuation">,</span> _maxP <span class="token operator">=</span> _i<span class="token punctuation">,</span> _currP    <span class="token keyword">return</span> names<span class="token punctuation">[</span>_maxId<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试数据："><a href="#测试数据：" class="headerlink" title="测试数据："></a>测试数据：</h3><pre class="line-numbers language-python"><code class="language-python">correct <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>TestX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    guess <span class="token operator">=</span> classifier<span class="token punctuation">(</span>TestX<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'predict: %s, answer: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>guess<span class="token punctuation">,</span> TestY<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> guess <span class="token operator">==</span> TestY<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>        correct <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Rate of correct predictions: %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>correct <span class="token operator">/</span> len<span class="token punctuation">(</span>TestX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>predict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: SMG, answer: SMGpredict: SMG, answer: SMGpredict: RF, answer: RFpredict: RF, answer: RFpredict: RF, answer: RFpredict: RF, answer: RFpredict: RF, answer: RFpredict: RF, answer: RFpredict: AR, answer: ARpredict: AR, answer: ARpredict: AR, answer: ARpredict: AR, answer: ARpredict: AR, answer: ARpredict: AR, answer: ARpredict: AR, answer: ARpredict: MG, answer: MGpredict: MG, answer: MGpredict: MG, answer: MGpredict: MG, answer: MGpredict: MG, answer: MGpredict: HG, answer: HGpredict: HG, answer: HGpredict: SMG, answer: SMGpredict: AR, answer: ARpredict: MG, answer: MGpredict: MG, answer: MGpredict: MG, answer: MGpredict: HG, answer: HGpredict: HG, answer: HGpredict: SMG, answer: SMGpredict: HG, answer: HGpredict: RF, answer: RFpredict: SMG, answer: SMGpredict: SG, answer: SGpredict: SG, answer: SGpredict: SG, answer: SGpredict: HG, answer: HGpredict: MG, answer: MGpredict: SMG, answer: SMGpredict: AR, answer: ARpredict: HG, answer: HGpredict: RF, answer: RFpredict: AR, answer: ARpredict: SG, answer: SGpredict: AR, answer: ARpredict: SG, answer: SGpredict: RF, answer: RFRate of correct predictions: 1.000000</code></pre><p>竟然是100%？？这么高的准确率，我佛了。。。</p><p>大概是因为少前里面每一种枪的特征太好区分了吧。</p><p>这里用sklearn库的朴素贝叶斯再试试：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> GaussianNBmodel <span class="token operator">=</span> GaussianNB<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>TrainX<span class="token punctuation">,</span> TrainY<span class="token punctuation">)</span>res <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>TestX<span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'predict: %s, answer: %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> TestY<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> TestY<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Rate of correct predictions: %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>count <span class="token operator">/</span> len<span class="token punctuation">(</span>TestY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>predict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: SMG, answer: SMGpredict: SMG, answer: SMGpredict: RF, answer: RFpredict: RF, answer: RFpredict: RF, answer: RF...Rate of correct predictions: 1.000000</code></pre><ul><li>毫无悬念的100%……好吧这说明少前的数据确实特征很明显=。=</li></ul><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="什么是朴素贝叶斯分类？"><a href="#什么是朴素贝叶斯分类？" class="headerlink" title="什么是朴素贝叶斯分类？"></a>什么是朴素贝叶斯分类？</h3><p>假设所有特征是比较独立的情况下，上面的$\sum$矩阵退化为对角阵，可以用$\sigma$向量表示；</p><p>这个时候就是朴素贝叶斯分类，也就是上面sklearn库所做的事情。</p><p>但是在属性特征相关性比较好的时候，NB的分类效果就比较差。</p><p>上面的方法使用的是多个特征的联合概率密度，在维度较高的时候模型就会比较复杂，同时也会造成稀疏的情况。</p><h3 id="可不可以用回归的方法直接做分类？"><a href="#可不可以用回归的方法直接做分类？" class="headerlink" title="可不可以用回归的方法直接做分类？"></a>可不可以用回归的方法直接做分类？</h3><p>一般这么做不好。</p><p>举个例子，用一个回归函数的值和分类对应，函数值接近1就是A类，接近2就是B类，以此类推。</p><p>这样固然可以训练出拟合train data的模型，但是数值上的接近关系不一定就能反映出分类之间的关系（比如，1和2比起1和3更接近，但是A和B不一定就能够比A和C的关系更接近），这样的拟合是不符合分类规律的。</p><h3 id="贝叶斯算法一定是用高斯（正态）分布嘛？"><a href="#贝叶斯算法一定是用高斯（正态）分布嘛？" class="headerlink" title="贝叶斯算法一定是用高斯（正态）分布嘛？"></a>贝叶斯算法一定是用高斯（正态）分布嘛？</h3><p>不一定。这里是根据变量的分布特征决定的，其他还有如多项式模型和伯努利模型都是常见的分布模型。</p><p>特征是离散的时候，一般使用多项式模型；</p><p>特征是离散而且只有0和1两种分布的时候，一般采用伯努利模型。</p><p>特征是连续的时候，一般使用高斯分布模型；</p><h3 id="其他分类器有哪些？"><a href="#其他分类器有哪些？" class="headerlink" title="其他分类器有哪些？"></a>其他分类器有哪些？</h3><p>逻辑回归，SVM，和决策树等等。</p><p>逻辑回归适合线性数据（什么是线性数据？）。</p><p>SVM非常耗时间，工业上不推荐。</p><p>决策树适合用在特征是离散型的变量上。</p><p>贝叶斯通常是用在NLP里面用来做文本分类等等的事情（用在这里也只是因为李宏毅老师讲了这个）</p><p>我暂时说不清楚它们的具体优劣，可以参考<a href="https://blog.csdn.net/July_sun/article/details/53088673" target="_blank" rel="noopener">这里</a>。</p><hr><p>其实个人有几个问题：</p><ul><li><p>混合参数如何建模？比如又有数值型，又有离散型，应该用什么模型？</p></li><li><p>协方差矩阵对比朴素贝叶斯的方差向量效果会提高多少？</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了李宏毅老师讲解classification的视频，决定以少女前线的枪种分类为例，试做一个贝叶斯分类器。&lt;/p&gt;
&lt;p&gt;前半段理论主要来自李宏毅老师的视频，后半段是自己实现的贝叶斯分类器代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/04/07/ML-4-Bayesian/head.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;s&gt;找配图的时间比码字时间还长，&lt;/s&gt;我永远喜欢忤逆小队！&lt;/p&gt;
    
    </summary>
    
      <category term="machine learning" scheme="http://yoursite.com/categories/machine-learning/"/>
    
    
      <category term="naive bayesian" scheme="http://yoursite.com/tags/naive-bayesian/"/>
    
      <category term="classification" scheme="http://yoursite.com/tags/classification/"/>
    
  </entry>
  
  <entry>
    <title>32.Longest Valid Partheses</title>
    <link href="http://yoursite.com/2019/04/07/32-Longest-Valid-Partheses/"/>
    <id>http://yoursite.com/2019/04/07/32-Longest-Valid-Partheses/</id>
    <published>2019-04-06T18:23:15.000Z</published>
    <updated>2019-04-10T14:26:59.460Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-java"><code class="language-java">Input<span class="token operator">:</span> <span class="token string">"(()"</span>Output<span class="token operator">:</span> <span class="token number">2</span>Explanation<span class="token operator">:</span> The longest valid parentheses substring is <span class="token string">"()"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-java"><code class="language-java">Input<span class="token operator">:</span> <span class="token string">")()())"</span>Output<span class="token operator">:</span> <span class="token number">4</span>Explanation<span class="token operator">:</span> The longest valid parentheses substring is <span class="token string">"()()"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="暴力求解全部序列找最长"><a href="#暴力求解全部序列找最长" class="headerlink" title="暴力求解全部序列找最长"></a>暴力求解全部序列找最长</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> start <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> start<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">int</span> balance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> end <span class="token operator">=</span> start<span class="token punctuation">;</span> end <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> end<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              balance <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span>  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>balance <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                  res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(1)​$</li></ul><h4 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h4><p>公式理解起来有点困难，下面是解释。</p><ul><li>dp数组记录从0开始，以i位结尾的最长的合法序列长度。</li><li>只有右括号才能形成合法的括号对，所以左括号的dp值为0，在遇到右括号的时候检查：<ul><li>如果前一个括号是左括号，那么长度就是往前找的一位（假如有）+2</li><li>如果前一个括号是右括号，而且往前的一个完整序列之前那一位是左括号（如果没有或者是右括号，那么也不能匹配当前位置），那么长度等于从这个左括号开始到当前位的长度。<ul><li>额外注意⚠️如果在这个左括号之前还存在匹配，那么需要加上这一段的长度！</li></ul></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">2</span> <span class="token operator">?</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(n)$</li></ul><h4 id="使用栈"><a href="#使用栈" class="headerlink" title="使用栈"></a>使用栈</h4><p>这个做法旨在通过栈维护平衡，把所有不平衡的下标压栈。</p><ul><li>遇到左括号就压栈；</li><li>遇到右括号，如果栈内记录了待匹配的左括号，则出栈；否则（待匹配的是右括号，或者栈是空的情况下）压栈。</li></ul><p>这样一来，栈中所有的下标就是不平衡处的位置，而相邻的下标之间（包括头和尾的-1和n）的字符串就是平衡的，我们只要依次出栈并计算，找到最大值就可以。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里的-1是为计算方便</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token keyword">int</span> last <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span>                  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 计算包括-1和n在内所有非平衡下标之间的长度</span>      <span class="token keyword">int</span> right <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          right <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(n)​$</li></ul><h4 id="双扫描，无额外空间"><a href="#双扫描，无额外空间" class="headerlink" title="双扫描，无额外空间"></a>双扫描，无额外空间</h4><p>这一做法受到最大子序列和的启发——最大子序列和的做法是，累加遇到负数就重置当前的和为0，扫描一遍数组即可得出答案——贪心的思路。</p><p>在这里，我们需要扫描两次：</p><ul><li>从左向右，左括号为1、右括号为-1，和为0时则平衡，和为负时归零；</li><li>从右向左，左括号为-1、右括号为1，其余同上。</li></ul><p>这样得出的最大的长度就是答案。</p><p>那么，如何解释？</p><ul><li>考虑从左向右的情况，在遇到右括号多于左括号的时候归零是合理的。因为不论从那一位开始，以这一位结尾的字符串肯定是不平衡的。而我们无法顾及的情况在于左括号偏多的情形：很有可能开头的几个左括号一直到最后都没有匹配的右括号，而中间潜在的合法匹配被我们忽略（因为和一直是正数）。</li><li>上面描述的这个情形，从右向左的扫描能够帮我们解决。相应的，从右到左的扫描无法解决的右括号偏多的情形，这在左括号里面得以解决。</li><li>两次扫描分别解决了两种情形，比较得出长度最大的是哪一种，就是答案。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            sum <span class="token operator">=</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            len<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    sum <span class="token operator">=</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            sum <span class="token operator">=</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            len<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt; and &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;, find the length of the longest valid (well-formed) parentheses substring.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="hard" scheme="http://yoursite.com/tags/hard/"/>
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
      <category term="string" scheme="http://yoursite.com/tags/string/"/>
    
      <category term="stack" scheme="http://yoursite.com/tags/stack/"/>
    
  </entry>
  
  <entry>
    <title>31.Next Permutation</title>
    <link href="http://yoursite.com/2019/04/07/31-Next-Permutation/"/>
    <id>http://yoursite.com/2019/04/07/31-Next-Permutation/</id>
    <published>2019-04-06T18:08:17.000Z</published>
    <updated>2019-04-06T18:25:36.650Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Implement <strong>next permutation</strong>, which rearranges numbers into the lexicographically next greater permutation of numbers.</p><p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p><p>The replacement must be <strong>in-place</strong> and use only constant extra memory.</p><a id="more"></a><p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> → <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span> → <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span> → <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="暴力求解全排列"><a href="#暴力求解全排列" class="headerlink" title="暴力求解全排列"></a>暴力求解全排列</h4><ul><li><p>时间复杂度：$O(n!)$</p></li><li><p>空间复杂度：$O(n)$</p></li></ul><h4 id="寻找排列规律"><a href="#寻找排列规律" class="headerlink" title="寻找排列规律"></a>寻找排列规律</h4><ul><li>找到前一个排列和后一个排列的关系<ul><li>例如，<code>1234</code>—&gt;<code>1243</code></li><li><code>3124</code>—&gt;<code>3214</code></li><li><code>4321</code>—&gt;<code>1234</code></li><li>从右到左，找到第一个违反【非降序规律】的数，将它和右边第一个比它大的数交换（交换其实是让它插入合适的位置）（这里可以用二分查找），然后逆序排列（也就是让剩下来的数按照从左到右非降序排列）</li></ul></li><li>注意⚠️，可能出现重复数字</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> to<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> from<span class="token punctuation">,</span> j <span class="token operator">=</span> to <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span>              <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextPermutation</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">,</span> iter<span class="token punctuation">,</span> last <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>last <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>last<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>last <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            last<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> minBigger <span class="token operator">=</span> last <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>minBigger <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span>                    <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>minBigger <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>last<span class="token punctuation">]</span><span class="token punctuation">)</span>                minBigger<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> last<span class="token punctuation">,</span> minBigger<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> last <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Implement &lt;strong&gt;next permutation&lt;/strong&gt;, which rearranges numbers into the lexicographically next greater permutation of numbers.&lt;/p&gt;
&lt;p&gt;If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).&lt;/p&gt;
&lt;p&gt;The replacement must be &lt;strong&gt;in-place&lt;/strong&gt; and use only constant extra memory.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="medium" scheme="http://yoursite.com/tags/medium/"/>
    
      <category term="string" scheme="http://yoursite.com/tags/string/"/>
    
      <category term="permutation" scheme="http://yoursite.com/tags/permutation/"/>
    
  </entry>
  
  <entry>
    <title>ML学习日记3——梯度下降技巧</title>
    <link href="http://yoursite.com/2019/04/03/ML-3-Gradient-Descent/"/>
    <id>http://yoursite.com/2019/04/03/ML-3-Gradient-Descent/</id>
    <published>2019-04-03T15:54:09.000Z</published>
    <updated>2019-04-08T17:21:00.974Z</updated>
    
    <content type="html"><![CDATA[<p>一些改进梯度下降方法的要点。</p><a id="more"></a><h3 id="自适应学习率：Adagrad-learning-rate"><a href="#自适应学习率：Adagrad-learning-rate" class="headerlink" title="自适应学习率：Adagrad learning rate"></a>自适应学习率：Adagrad learning rate</h3><ul><li>学习率太大或者太小，都会导致问题<ul><li>太小会收敛过慢</li><li>太大会不收敛</li></ul></li><li>自适应学习率可以较好地改变情况</li></ul><p><img src="/2019/04/03/ML-3-Gradient-Descent/IMG_2209.PNG" alt="IMG_2209"></p><p><img src="/2019/04/03/ML-3-Gradient-Descent/IMG_2210.PNG" alt="IMG_2210"></p><p><img src="/2019/04/03/ML-3-Gradient-Descent/IMG_2211.PNG" alt="IMG_2211"></p><h3 id="随机梯度下降：Stochastic-gradient-descent"><a href="#随机梯度下降：Stochastic-gradient-descent" class="headerlink" title="随机梯度下降：Stochastic gradient descent"></a>随机梯度下降：Stochastic gradient descent</h3><ul><li>每次选取少量样本进行梯度下降</li><li>每一步未必朝着正确的方向，但是在全局一步的时间里可以进行多次迭代从而到达终点</li></ul><h3 id="特征归一化：Feature-scaling"><a href="#特征归一化：Feature-scaling" class="headerlink" title="特征归一化：Feature scaling"></a>特征归一化：Feature scaling</h3><ul><li>将所有维度统一到0和1（作为例子）的尺度，避免单一维度的weight变化影响全局太多或者太少</li></ul><p><img src="/2019/04/03/ML-3-Gradient-Descent/IMG_2212.PNG" alt="IMG_2212"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些改进梯度下降方法的要点。&lt;/p&gt;
    
    </summary>
    
      <category term="machine learning" scheme="http://yoursite.com/categories/machine-learning/"/>
    
    
      <category term="gradient descent" scheme="http://yoursite.com/tags/gradient-descent/"/>
    
  </entry>
  
  <entry>
    <title>Microsoft 2019暑期OA题目</title>
    <link href="http://yoursite.com/2019/04/03/Microsoft-2019%E6%9A%91%E6%9C%9FOA%E9%A2%98%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/04/03/Microsoft-2019暑期OA题目/</id>
    <published>2019-04-03T15:17:29.000Z</published>
    <updated>2019-04-03T15:28:13.640Z</updated>
    
    <content type="html"><![CDATA[<p>做了一晚上，心态崩了。。两小时4题，这难度堪比acm。</p><a id="more"></a><p>不说了，下面贴题目吧：</p><h3 id="Playing-with-beads"><a href="#Playing-with-beads" class="headerlink" title="Playing with beads"></a>Playing with beads</h3><blockquote><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/1-1.png" alt="1-1"></p><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/1-2.png" alt="1-2"></p></blockquote><h3 id="Archer"><a href="#Archer" class="headerlink" title="Archer"></a>Archer</h3><blockquote><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/2-1.png" alt="2-1"></p><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/2-2.png" alt="2-2"></p></blockquote><h3 id="Line"><a href="#Line" class="headerlink" title="Line"></a>Line</h3><blockquote><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/3-1.png" alt="3-1"></p><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/3-2.png" alt="3-2"></p></blockquote><h3 id="Honey-Madness"><a href="#Honey-Madness" class="headerlink" title="Honey Madness"></a>Honey Madness</h3><blockquote><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/4-1.png" alt="4-1"></p><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/4-2.png" alt="4-2"></p><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/4-3.png" alt="4-3"></p></blockquote><p>做出了1和3（但也不是全对），2和4完全没有思路。佛了。</p><p>之后如果有机会再补上吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做了一晚上，心态崩了。。两小时4题，这难度堪比acm。&lt;/p&gt;
    
    </summary>
    
      <category term="interview" scheme="http://yoursite.com/categories/interview/"/>
    
    
      <category term="intern" scheme="http://yoursite.com/tags/intern/"/>
    
      <category term="oa" scheme="http://yoursite.com/tags/oa/"/>
    
      <category term="microsoft" scheme="http://yoursite.com/tags/microsoft/"/>
    
  </entry>
  
  <entry>
    <title>ML学习日记2——泛化误差：方差与偏差</title>
    <link href="http://yoursite.com/2019/04/02/ML-2-Variance-and-Bias/"/>
    <id>http://yoursite.com/2019/04/02/ML-2-Variance-and-Bias/</id>
    <published>2019-04-02T13:29:51.000Z</published>
    <updated>2019-04-08T17:21:08.317Z</updated>
    
    <content type="html"><![CDATA[<p>首先引用一段<a href="https://zhuanlan.zhihu.com/p/38853908" target="_blank" rel="noopener">知乎</a>上的描述：</p><blockquote><p>在机器学习中，我们用训练数据集去训练一个模型，通常的做法是定义一个误差函数，通过将这个误差的最小化过程，来提高模型的性能。</p><p>然而我们学习一个模型的目的是为了解决训练数据集这个领域中的一般化问题，单纯地将训练数据集的损失最小化，并不能保证在解决更一般的问题时模型仍然是最优，甚至不能保证模型是可用的。这个训练数据集的损失与一般化的数据集的损失之间的差异就叫做<strong>泛化误差（generalization error）</strong>。</p><p>泛化误差为偏差、方差与噪声之和。</p></blockquote><a id="more"></a><h3 id="Variance（方差）"><a href="#Variance（方差）" class="headerlink" title="Variance（方差）"></a>Variance（方差）</h3><ul><li><strong>Variance</strong>是<strong>不同的训练数据集训练出的模型</strong>输出值之间的差异。</li><li>越复杂的模型，它的variance就越大，表现出来就是过拟合。</li><li>越简单的模型，variance越小</li><li><strong>方差度量了同样大小的训练集的变动所导致的学习性能的变化，即刻画了数据扰动所造成的影响。</strong></li><li>解决方案：<ol><li>collect more data，至少不会让variance更大；但是一般比较难获得（可以从现有数据修改等获得）。</li><li>或者使用regularization，使曲线平滑；代价是增大bias。</li></ol></li></ul><h3 id="Bias（偏差）"><a href="#Bias（偏差）" class="headerlink" title="Bias（偏差）"></a>Bias（偏差）</h3><ul><li><strong>Bias</strong>是用<strong>所有可能的训练数据集</strong>训练出的<strong>所有模型</strong>的输出的<strong>平均值</strong>与<strong>真实模型</strong>的输出值之间的差异。</li><li>比较简单的模型，bias越大，表现出来是underfitting</li><li>较大的bias说明甚至没有很好拟合training data</li></ul><h3 id="Noise（噪声）"><a href="#Noise（噪声）" class="headerlink" title="Noise（噪声）"></a>Noise（噪声）</h3><ul><li><strong>噪声</strong>的存在是学习算法所无法解决的问题，数据的质量决定了学习的上限。假设在数据已经给定的情况下，此时上限已定，我们要做的就是尽可能的接近这个上限。</li></ul><hr><h3 id="Cross-Validation"><a href="#Cross-Validation" class="headerlink" title="Cross Validation"></a>Cross Validation</h3><p>待补充。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先引用一段&lt;a href=&quot;https://zhuanlan.zhihu.com/p/38853908&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;知乎&lt;/a&gt;上的描述：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在机器学习中，我们用训练数据集去训练一个模型，通常的做法是定义一个误差函数，通过将这个误差的最小化过程，来提高模型的性能。&lt;/p&gt;
&lt;p&gt;然而我们学习一个模型的目的是为了解决训练数据集这个领域中的一般化问题，单纯地将训练数据集的损失最小化，并不能保证在解决更一般的问题时模型仍然是最优，甚至不能保证模型是可用的。这个训练数据集的损失与一般化的数据集的损失之间的差异就叫做&lt;strong&gt;泛化误差（generalization error）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;泛化误差为偏差、方差与噪声之和。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="machine learning" scheme="http://yoursite.com/categories/machine-learning/"/>
    
    
      <category term="regression" scheme="http://yoursite.com/tags/regression/"/>
    
  </entry>
  
  <entry>
    <title>ML学习日记1——线性回归与梯度下降</title>
    <link href="http://yoursite.com/2019/04/02/ML-1-LinearRegression/"/>
    <id>http://yoursite.com/2019/04/02/ML-1-LinearRegression/</id>
    <published>2019-04-01T18:30:29.000Z</published>
    <updated>2019-04-08T17:20:36.938Z</updated>
    
    <content type="html"><![CDATA[<p>今天开始学习台大李宏毅教授的机器学习视频。</p><p>这篇文章是自己写的一个简单的多元线性回归模型：$y = \sum{w_i*x_i}+b$，基于批量梯度下降方法。</p><a id="more"></a><h3 id="准备阶段：生成训练数据和测试数据，选取多元一次的线性关系"><a href="#准备阶段：生成训练数据和测试数据，选取多元一次的线性关系" class="headerlink" title="准备阶段：生成训练数据和测试数据，选取多元一次的线性关系"></a>准备阶段：生成训练数据和测试数据，选取多元一次的线性关系</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 生成train data和test data</span><span class="token comment" spellcheck="true"># 随机选择一些x和w，b</span><span class="token keyword">from</span> random <span class="token keyword">import</span> randint<span class="token punctuation">,</span> uniform<span class="token keyword">from</span> numpy <span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">genCase</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> int<span class="token punctuation">,</span> m<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>    w <span class="token operator">=</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 加入噪音</span>    y <span class="token operator">=</span> <span class="token punctuation">[</span>sum<span class="token punctuation">(</span>x<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> b <span class="token operator">+</span> uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i1 <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Generated %d cases with %d features."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token keyword">def</span> <span class="token function">splitCase</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">!=</span> n<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    trainX<span class="token punctuation">,</span> trainY<span class="token punctuation">,</span> testX<span class="token punctuation">,</span> testY <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>            testX<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            testY<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            trainX<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            trainY<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Split data into 2 parts: %d train data and %d test data"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>trainX<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>testX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> trainX<span class="token punctuation">,</span> trainY<span class="token punctuation">,</span> testX<span class="token punctuation">,</span> testYX<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> OriginW<span class="token punctuation">,</span> OriginB <span class="token operator">=</span> genCase<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>TrainX<span class="token punctuation">,</span> TrainY<span class="token punctuation">,</span> TestX<span class="token punctuation">,</span> TestY <span class="token operator">=</span> splitCase<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 导出到文件</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./data/train.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>TrainX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span> TrainX<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\t'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>TrainY<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./data/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>TestX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span> TestX<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\t'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>TestY<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Generated 1000 cases with 10 features.Split data into 2 parts: 484 train data and 516 test data</code></pre><h3 id="训练阶段：采用批量梯度下降方法拟合"><a href="#训练阶段：采用批量梯度下降方法拟合" class="headerlink" title="训练阶段：采用批量梯度下降方法拟合"></a>训练阶段：采用批量梯度下降方法拟合</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> numpy <span class="token keyword">import</span> loadtxt<span class="token punctuation">,</span> ones<span class="token keyword">def</span> <span class="token function">h</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span>x<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token keyword">def</span> <span class="token function">loss</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>h<span class="token punctuation">(</span>x<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-</span> y<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token keyword">for</span> i1 <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">batchGradientDescent</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> rate<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> iterBound<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">,</span> gradBound<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">if</span> m <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> len<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">!=</span> m<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    w<span class="token punctuation">,</span> b <span class="token operator">=</span> ones<span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Learning ratio: %f"</span> <span class="token operator">%</span> rate<span class="token punctuation">)</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>iterBound<span class="token punctuation">)</span><span class="token punctuation">:</span>        gradW <span class="token operator">=</span> <span class="token punctuation">[</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> h<span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> m <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        gradB <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> h<span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> m        <span class="token comment" spellcheck="true"># 跳出循环的条件：梯度值较小</span>        <span class="token keyword">if</span> abs<span class="token punctuation">(</span>gradB<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> gradBound<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Converges after %d rounds of batch gradient descent."</span> <span class="token operator">%</span> k<span class="token punctuation">)</span>            <span class="token keyword">return</span> w<span class="token punctuation">,</span> b        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> gradW<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> rate        b <span class="token operator">+=</span> gradB <span class="token operator">*</span> rate    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"After %d rounds of gradient descent, the loss is %f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> loss<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> w<span class="token punctuation">,</span> b<span class="token keyword">def</span> <span class="token function">readData</span><span class="token punctuation">(</span>file<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> loadtxt<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>data<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i1 <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i1 <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>trainX<span class="token punctuation">,</span> trainY <span class="token operator">=</span> readData<span class="token punctuation">(</span><span class="token string">"./data/train.txt"</span><span class="token punctuation">)</span>testX<span class="token punctuation">,</span> testY <span class="token operator">=</span> readData<span class="token punctuation">(</span><span class="token string">"./data/test.txt"</span><span class="token punctuation">)</span><span class="token operator">%</span>time W<span class="token punctuation">,</span> B <span class="token operator">=</span> batchGradientDescent<span class="token punctuation">(</span>trainX<span class="token punctuation">,</span> trainY<span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Learning ratio: 0.020000Converges after 608 rounds of batch gradient descent.CPU times: user 5.72 s, sys: 23 ms, total: 5.75 sWall time: 5.76 s</code></pre><h3 id="预测阶段：使用test数据测试模型准确率"><a href="#预测阶段：使用test数据测试模型准确率" class="headerlink" title="预测阶段：使用test数据测试模型准确率"></a>预测阶段：使用test数据测试模型准确率</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Loss for test data: %f"</span> <span class="token operator">%</span> loss<span class="token punctuation">(</span>testX<span class="token punctuation">,</span> testY<span class="token punctuation">,</span> W<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Loss for test data with original w and b: %f"</span> <span class="token operator">%</span> loss<span class="token punctuation">(</span>testX<span class="token punctuation">,</span> testY<span class="token punctuation">,</span> OriginW<span class="token punctuation">,</span> OriginB<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Difference for w and b:"</span><span class="token punctuation">,</span> OriginW <span class="token operator">-</span> W<span class="token punctuation">,</span> OriginB <span class="token operator">-</span> B<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Loss for test data: 47.161984Loss for test data with original w and b: 46.188546Difference for w and b: [[-0.00095575] [ 0.0001872 ] [ 0.00153668] [ 0.00050082] [-0.00034511] [-0.00396764] [-0.00295501] [ 0.00099687] [ 0.00369943] [ 0.00379453]] -0.003807025307413836</code></pre><ul><li>经过梯度下降之后，达到了较好的精度。</li><li>时间上存在改进空间。</li></ul><h3 id="自适应learning-rate：Adagrad"><a href="#自适应learning-rate：Adagrad" class="headerlink" title="自适应learning rate：Adagrad"></a>自适应learning rate：Adagrad</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt<span class="token keyword">def</span> <span class="token function">improvedBGD</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> iterBound<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span> gradBound<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">if</span> m <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> len<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">!=</span> m<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    w<span class="token punctuation">,</span> b <span class="token operator">=</span> ones<span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span>    rateW<span class="token punctuation">,</span> rateB <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">for</span> k1 <span class="token keyword">in</span> range<span class="token punctuation">(</span>iterBound<span class="token punctuation">)</span><span class="token punctuation">:</span>        gradW <span class="token operator">=</span> <span class="token punctuation">[</span>sum<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> h<span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> m <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        gradB <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> h<span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> m        <span class="token comment" spellcheck="true"># 跳出循环的条件：梯度值较小</span>        <span class="token keyword">if</span> abs<span class="token punctuation">(</span>gradB<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> gradBound<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Converges after %d rounds of batch gradient descent."</span> <span class="token operator">%</span> k1<span class="token punctuation">)</span>            <span class="token keyword">return</span> w<span class="token punctuation">,</span> b        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            rateW<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> gradW<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token number">2</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> gradW<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> sqrt<span class="token punctuation">(</span>rateW<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        rateB <span class="token operator">+=</span> gradB <span class="token operator">**</span> <span class="token number">2</span>        b <span class="token operator">+=</span> gradB <span class="token operator">/</span> sqrt<span class="token punctuation">(</span>rateB<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"After %d rounds of gradient descent, the loss is %f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>k1<span class="token punctuation">,</span> loss<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> w<span class="token punctuation">,</span> b<span class="token operator">%</span>time W<span class="token punctuation">,</span> B <span class="token operator">=</span> improvedBGD<span class="token punctuation">(</span>trainX<span class="token punctuation">,</span> trainY<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Loss for test data: %f"</span> <span class="token operator">%</span> loss<span class="token punctuation">(</span>testX<span class="token punctuation">,</span> testY<span class="token punctuation">,</span> W<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Loss for test data with original w and b: %f"</span> <span class="token operator">%</span> loss<span class="token punctuation">(</span>testX<span class="token punctuation">,</span> testY<span class="token punctuation">,</span> OriginW<span class="token punctuation">,</span> OriginB<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Difference for w and b:"</span><span class="token punctuation">,</span> OriginW <span class="token operator">-</span> W<span class="token punctuation">,</span> OriginB <span class="token operator">-</span> B<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Converges after 251 rounds of batch gradient descent.CPU times: user 2.55 s, sys: 9.66 ms, total: 2.56 sWall time: 2.57 sLoss for test data: 43.177537Loss for test data with original w and b: 41.600574Difference for w and b: [[ 0.00108563] [-0.00580816] [ 0.00122102] [-0.002008  ] [-0.00198998] [-0.0003545 ] [ 0.00242942] [-0.00419475] [-0.00064363] [ 0.00016461]] -0.009286649191009438</code></pre><h3 id="使用高次拟合，查看loss变化"><a href="#使用高次拟合，查看loss变化" class="headerlink" title="使用高次拟合，查看loss变化"></a>使用高次拟合，查看loss变化</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generateAll</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x    res <span class="token operator">=</span> ones<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">*</span> len<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    count <span class="token operator">=</span> len<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i1 <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j1 <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> k1 <span class="token keyword">in</span> range<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>                res<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span>k1 <span class="token operator">+</span> j1 <span class="token operator">*</span> count<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>i1<span class="token punctuation">]</span><span class="token punctuation">[</span>k1<span class="token punctuation">]</span> <span class="token operator">**</span> <span class="token punctuation">(</span>j1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token comment" spellcheck="true"># 拟合过程可以直接使用batchGradientDescent函数解决</span><span class="token comment" spellcheck="true"># 为了节约时间（一方面learning rate不能高，一高就不收敛；另一方面太低可能半小时都跑不出来）</span>trainLoss <span class="token operator">=</span> <span class="token punctuation">[</span>loss<span class="token punctuation">(</span>trainX<span class="token punctuation">,</span> trainY<span class="token punctuation">,</span> W<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">]</span>testLoss <span class="token operator">=</span> <span class="token punctuation">[</span>loss<span class="token punctuation">(</span>testX<span class="token punctuation">,</span> testY<span class="token punctuation">,</span> W<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    exTrainX<span class="token punctuation">,</span> exTestX <span class="token operator">=</span> generateAll<span class="token punctuation">(</span>trainX<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> generateAll<span class="token punctuation">(</span>testX<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token operator">%</span>time Wi<span class="token punctuation">,</span> Bi <span class="token operator">=</span> improvedBGD<span class="token punctuation">(</span>exTrainX<span class="token punctuation">,</span> trainY<span class="token punctuation">)</span>    trainLoss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">(</span>exTrainX<span class="token punctuation">,</span> trainY<span class="token punctuation">,</span> Wi<span class="token punctuation">,</span> Bi<span class="token punctuation">)</span><span class="token punctuation">)</span>    testLoss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">(</span>exTestX<span class="token punctuation">,</span> testY<span class="token punctuation">,</span> Wi<span class="token punctuation">,</span> Bi<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>After 9999 rounds of gradient descent, the loss is 36.904122CPU times: user 3min 50s, sys: 1.34 s, total: 3min 51sWall time: 3min 52sAfter 9999 rounds of gradient descent, the loss is 35.874497CPU times: user 5min 39s, sys: 1.56 s, total: 5min 40sWall time: 5min 42sAfter 9999 rounds of gradient descent, the loss is 261.607271CPU times: user 7min 28s, sys: 2.38 s, total: 7min 31sWall time: 7min 33sAfter 9999 rounds of gradient descent, the loss is 181030.524181CPU times: user 9min 20s, sys: 3.25 s, total: 9min 24sWall time: 9min 27s</code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> numpy <span class="token keyword">import</span> arangex_axis <span class="token operator">=</span> arange<span class="token punctuation">(</span>len<span class="token punctuation">(</span>trainLoss<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">'on'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_axis<span class="token punctuation">,</span> trainLoss<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_axis<span class="token punctuation">,</span> testLoss<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2019/04/02/ML-1-LinearRegression/LinearRegression.png" alt="png"></p><ul><li>出现了明显的overfitting现象</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>testLoss<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[43.17753677246426, 46.221044463400624, 47.5150256435928, 295.13051190429354, 216220.90071215943]</code></pre><h3 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h3><h4 id="减少变量"><a href="#减少变量" class="headerlink" title="减少变量"></a>减少变量</h4><p>可以人工检查每一项变量，保留重要的变量。</p><h4 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h4><p>过拟合之后，可以采用<code>regularization</code>方法，加入新的一项：$\lambda * \sum{w^2_i}$</p><p>这一项表示曲线的平滑程度：</p><ul><li>如果这一项越小，那么对输入的小幅度变化越不敏感，所以在小范围内波动比较稳定，不会偏离太多，从而对噪声不敏感，做到更好的拟合。</li><li><p>本质是对高次项作出惩罚，因为所有的w都是一样的系数，但是惩罚项带来变化对高次项影响更大。</p></li><li><p>随着$\lambda​$值变大而变得平滑，拟合度更高；但是高到一定程度的时候，引入的项造成的error越大。我们当然不喜欢太平滑的函数，极端一点就变成水平直线，没有任何意义。</p></li><li><p>这一项不需要加入<code>bias</code>这一项——因为它是常数项，只会把曲线抬高，不会影响曲线的形状。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天开始学习台大李宏毅教授的机器学习视频。&lt;/p&gt;
&lt;p&gt;这篇文章是自己写的一个简单的多元线性回归模型：$y = \sum{w_i*x_i}+b$，基于批量梯度下降方法。&lt;/p&gt;
    
    </summary>
    
      <category term="machine learning" scheme="http://yoursite.com/categories/machine-learning/"/>
    
    
      <category term="regression" scheme="http://yoursite.com/tags/regression/"/>
    
      <category term="gradient descent" scheme="http://yoursite.com/tags/gradient-descent/"/>
    
  </entry>
  
  <entry>
    <title>VOI</title>
    <link href="http://yoursite.com/2019/03/28/VOI/"/>
    <id>http://yoursite.com/2019/03/28/VOI/</id>
    <published>2019-03-28T13:27:59.000Z</published>
    <updated>2019-04-09T12:41:22.118Z</updated>
    
    <content type="html"><![CDATA[<p>VOI：一个来自iOS应用移植的小游戏，主体在canvas实现(^ _ ^)<br>点击👉<a href="/voi/index.html">这里</a><br>也可以在左侧边栏找到<br>代码在<a href="https://github.com/Riroaki/VOI" target="_blank" rel="noopener">这里</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;VOI：一个来自iOS应用移植的小游戏，主体在canvas实现(^ _ ^)&lt;br&gt;点击👉&lt;a href=&quot;/voi/index.html&quot;&gt;这里&lt;/a&gt;&lt;br&gt;也可以在左侧边栏找到&lt;br&gt;代码在&lt;a href=&quot;https://github.com/Riroaki/VO
      
    
    </summary>
    
      <category term="wheels" scheme="http://yoursite.com/categories/wheels/"/>
    
    
  </entry>
  
  <entry>
    <title>Google实习面试经历</title>
    <link href="http://yoursite.com/2019/03/28/Google%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/"/>
    <id>http://yoursite.com/2019/03/28/Google实习面试经历/</id>
    <published>2019-03-27T17:55:55.000Z</published>
    <updated>2019-04-02T12:04:55.625Z</updated>
    
    <content type="html"><![CDATA[<ul><li>3月29更新：</li></ul><blockquote><p><strong>Your Current Stage:</strong>  Pending. Unfortunately, your current interview result is not strong enough to proceed to next step, we will try to strive opportunity for you. If there is any update about proceed or reject, I’ll definitely let you know.</p></blockquote><p>今天发邮件催了一下hr，对面表示面试成绩不够好被挂着，然而也没有直接刷……学长说其实基本就是算凉了，我也不抱希望。</p><p>总体来说二面发挥较好，一面比较失败。等有空再补一下这两次面试的经历。</p><p>还是希望有加面的机会啊……毕竟准备了两个月刷leetcode（虽然还是很菜）<br><a id="more"></a></p><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>上来先自我介绍，然而我并没有好好准备这部分，并没有说明自己的项目经历等等……现在看来真的太蠢了。</p><p>然后，开始码代码。结果一上来就遇到之前在lc讨论区看到的题，具体链接在<a href="https://leetcode.com/discuss/interview-question/236898/google-phone-interview/237669" target="_blank" rel="noopener">这里</a>：</p><blockquote><p>Given a complete(virtual) binary tree, return true/false if the given target node exists in the tree or not.<br>Here, the “virtual” means the tree nodes are numbered assuming the tree is a complete binary tree.</p><p>For example:</p><pre class="line-numbers language-java"><code class="language-java">                <span class="token number">1</span>            <span class="token operator">/</span>        \          <span class="token number">2</span>              <span class="token number">3</span>       <span class="token operator">/</span>   \           <span class="token operator">/</span>  \      <span class="token function">4</span>   <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>nil      <span class="token function">6</span>  <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>nil   <span class="token comment" spellcheck="true">//function signature</span>   <span class="token comment" spellcheck="true">// bool doesNodeExist(root *TreeNode, target int)</span>   <span class="token function">doesNodeExist</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">true</span>   <span class="token function">doesNodeExist</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span> Given the node on #<span class="token number">7</span> is a nil node<span class="token punctuation">.</span>   <span class="token comment" spellcheck="true">//Think of a better solution.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>这题，我之前就想到一个简单的做法，采用的是将数字二进制表示后，利用0和1定位，每次排除一半的搜索空间，总的时间效率是$O(log(n))$：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">doesNodeExist</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> binary <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> binary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>binary<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> root <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token keyword">else</span> root <span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> root <span class="token operator">!=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写的差不多了，然而还是有点bug（我在之前没有练好白板orz，估计就是跪在这里）</p><p>然后修修补补，花了不少时间。之后他提出follow up（其实应该是另一个问题）：</p><blockquote><p>Given a complete(virtual) binary tree, return the number of nodes in the tree.</p></blockquote><p>这个首先当然是给出trivial做法，时间复杂度$O(n)$：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> root <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我想了一会，想到结合第一题的思路：使用二分的方法，用第一题的函数确认某个结点是否存在于这个树上，然后不断二分搜索空间，时间复杂度为$O(log^2(n))$</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    TreeNode tmp <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        hi <span class="token operator">=</span> <span class="token punctuation">(</span>hi <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    hi <span class="token operator">=</span> <span class="token punctuation">(</span>hi <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mi <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">exist</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> mi<span class="token punctuation">)</span><span class="token punctuation">)</span>            lo <span class="token operator">=</span> mi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            hi <span class="token operator">=</span> mi<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">exist</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> lo<span class="token punctuation">)</span> <span class="token operator">?</span> lo <span class="token operator">:</span> lo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我觉得这个思路真的是，完美啊！！！但是写的过程还是出了一点bug……最后还是运算符陷阱，java的位运算优先级问题太坑。</p><p>然后写完，时间也差不多了，就这样不明不白地结束了。</p><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><p>二面前又刷了一会题，还在一亩三分地看了一些面经，结果看的题<strong>完全没用</strong>，呵呵</p><p>二面面试官给人不善言辞的木讷感觉，我也和第一次不一样，自我介绍的时候说了一下自己的项目。</p><p>对面：有这么多项目经历啊……</p><p>我：嗯嗯（其实心里一脸懵逼）</p><p>然后，话不多说开始做题。</p><blockquote><p>Split an array such that the sum of each split &gt;= target.</p><p>The array consists of only integers in [0, 9].</p><p>Write a function to check whether the array could be split into k parts.</p><p>boolean canSplit(int[] nums, int k, int target)</p></blockquote><p>这题开始的时候他没讲清楚，让我以为是随意的切分，想了半天没话可说，正要和他求个提示，结果他看不下去让我先尝试一下比如<code>nums = [1,2,3,3,2,4,4], k = 3, x = 5</code></p><p>然后贪心地切下去，切成：<code>[1, 2, 3/ 3, 2/ 4, 4]</code>，能够切分三份，所以返回<code>true</code></p><p>好嘛，你直接说连续的切分不就好了。我就说我之前也问了这个问题，然后他没讲清楚。</p><p>这就开始写代码，时间复杂度$O(n)$：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">boolean</span> <span class="token function">canSplit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> k <span class="token operator">||</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> currSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> curr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currSum <span class="token operator">>=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            curr <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            currSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        currSum <span class="token operator">+=</span> a<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currSum <span class="token operator">>=</span> x<span class="token punctuation">)</span>        curr<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> curr <span class="token operator">>=</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一次我滔滔不绝地讲了这一步做什么，那一步做什么，遇到全0的case等等怎么处理。</p><p>对方说ok，没有问题，就是把那个<code>currSum += a[index]</code>放在前面会比较好，避免循环外面再判断一次，代码更简洁。我说嗯嗯，确实如此。</p><p>接着是follow up：</p><blockquote><p>Now given the array and k, return what’s the maximum target.</p></blockquote><p>这里理解题目就比较麻烦，因为这个maximum其实是某一个切分中，每一份的和的最小值；但是又是不同切分中的最大值。</p><p>我想起以前周赛的一个题，给定天数要求和物品列表，每天载货一次，问最小的单次载货量是多少（题目在<a href="https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/" target="_blank" rel="noopener">这里</a>）——其实这两题比较像，稍加分析就可以看出：</p><ul><li>在这里是从<code>0</code>开始找到<code>sum</code>，前面都是可以的，到某一个值开始不能拆分成k份；</li><li>在上面那个载货题，从<code>0</code>开始找到<code>sum</code>，前面的<code>capacity</code>不能在<code>k</code>天载完，在某一个值开始可以载完。</li></ul><p>联想到这一题用的是二分，我就打算在这里也用二分，使用上一个题目的<code>canSplit</code>进行判断。</p><p>我一提出二分，对方就大为赞赏，这让我有些振奋，于是确定地提出想法，然后开始码，时间复杂度$O(nlogn)$：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">maxSplit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> k <span class="token operator">||</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// indicating invalid error</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> a<span class="token punctuation">)</span>        sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>    <span class="token keyword">int</span> lo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hi <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>lo <span class="token operator">&lt;</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mi <span class="token operator">=</span> lo <span class="token operator">+</span> <span class="token punctuation">(</span>hi <span class="token operator">-</span> lo<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canSplit</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> k<span class="token punctuation">,</span> mi<span class="token punctuation">)</span><span class="token punctuation">)</span>            lo <span class="token operator">=</span> mi <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            hi <span class="token operator">=</span> mi<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">canSplit</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> k<span class="token punctuation">,</span> lo<span class="token punctuation">)</span> <span class="token operator">?</span> lo <span class="token operator">:</span> lo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写完一看，和一面的思路也太像了吧！不过我没有说，检查了很多<code>case</code>之后对方说很好，代码没有问题，而且风格也不错。</p><p>接下来提出进一步的follow up：</p><blockquote><p>What if the array contains minus numbers?</p></blockquote><p>这里我一开始没明白，负数会有影响吗？</p><p>后来才发现，对这种例子，就会对<code>canSplit</code>函数产生影响：<code>nums = [1, 2, 3, -1, 4, 1], target = 5</code></p><p>在这里，如果我们在<code>3</code>后面分割，那么后面就不能组成一个split，只能分成1份；但是如果我们在<code>-1</code>后面切分，那么就可以分成2份。然而我并没有想出来……</p><p>看到我的窘况，他说没关系，提示我用dp，并且贴心地换了一个follow up：</p><blockquote><p>What if the maxSplit function is called many times on the same array?</p></blockquote><p>也就是如何优化的问题。我这个时候脑子是糊的，但是盲猜了一个方法（套路啊）：前缀和数组。</p><p>这个概念一提出来，对方就很满意，接下来补全了思路：在前缀和数组上作二分找到下一个可切分的位置，将<code>canSplit</code>原来遍历数组的过程转化为二分，提高效率。</p><p>这样做之后，总时间效率就是$O(log^2(n))$，和一面的解法结构也很像——只能说我运气实在太好了吧。</p><p>然而这样还是没有利用好机会……orz</p><p>经过这样两次面试，我只能说，二分天下无敌！</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;3月29更新：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Your Current Stage:&lt;/strong&gt;  Pending. Unfortunately, your current interview result is not strong enough to proceed to next step, we will try to strive opportunity for you. If there is any update about proceed or reject, I’ll definitely let you know.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天发邮件催了一下hr，对面表示面试成绩不够好被挂着，然而也没有直接刷……学长说其实基本就是算凉了，我也不抱希望。&lt;/p&gt;
&lt;p&gt;总体来说二面发挥较好，一面比较失败。等有空再补一下这两次面试的经历。&lt;/p&gt;
&lt;p&gt;还是希望有加面的机会啊……毕竟准备了两个月刷leetcode（虽然还是很菜）&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="interview" scheme="http://yoursite.com/categories/interview/"/>
    
    
      <category term="intern" scheme="http://yoursite.com/tags/intern/"/>
    
      <category term="google" scheme="http://yoursite.com/tags/google/"/>
    
  </entry>
  
  <entry>
    <title>重置系统和ssh连接</title>
    <link href="http://yoursite.com/2019/03/28/%E9%87%8D%E7%BD%AE%E7%B3%BB%E7%BB%9F%E5%92%8Cssh%E8%BF%9E%E6%8E%A5/"/>
    <id>http://yoursite.com/2019/03/28/重置系统和ssh连接/</id>
    <published>2019-03-27T17:51:45.000Z</published>
    <updated>2019-03-27T20:08:09.146Z</updated>
    
    <content type="html"><![CDATA[<p>之前不小心更新了Ubuntu18.0，结果没法ssh连接了。。。</p><p>无奈之下重置了系统，知乎查了一下Ubuntu和其他Linux系统，感觉相对于服务器来说Debian更加稳定些，Ubuntu太倒腾了。重置完了之后，再ssh连接，咦？为啥还是不能连。。。</p><a id="more"></a><pre class="line-numbers language-shell"><code class="language-shell">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!Someone could be eavesdropping on you right now (man-in-the-middle attack)!It is also possible that a host key has just been changed.The fingerprint for the ECDSA key sent by the remote host isSHA256:2R1nMbHLVDbkj8Q564B1ZwsBkDMm92bJtL4hhb5FSr4.Please contact your system administrator.Add correct host key in /Users/Aki/.ssh/known_hosts to get rid of this message.Offending ECDSA key in /Users/Aki/.ssh/known_hosts:2ECDSA host key for 120.79.161.245 has changed and you have requested strict checking.Host key verification failed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这应该是我自己电脑对对面系统做了检测，发现ecdsa的验证码不一样了（因为重置了系统啊，感觉不安全就不让我连接了（这个@@@……是我乔鲁诺哒！</p><p>于是谷歌了一下，发现可以通过这个指令移除：<code>ssh-keygen -R [ip]</code></p><p>系统回复：</p><pre class="line-numbers language-shell"><code class="language-shell"># Host 120.79.161.245 found: line 2/Users/Aki/.ssh/known_hosts updated.Original contents retained as /Users/Aki/.ssh/known_hosts.old<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ok了。现在可以重新连接。</p><p>重新连接后会询问你是否信任，yes之后就会重新将域名加入列表。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前不小心更新了Ubuntu18.0，结果没法ssh连接了。。。&lt;/p&gt;
&lt;p&gt;无奈之下重置了系统，知乎查了一下Ubuntu和其他Linux系统，感觉相对于服务器来说Debian更加稳定些，Ubuntu太倒腾了。重置完了之后，再ssh连接，咦？为啥还是不能连。。。&lt;/p&gt;
    
    </summary>
    
      <category term="back end" scheme="http://yoursite.com/categories/back-end/"/>
    
    
      <category term="ssh" scheme="http://yoursite.com/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>收报名表过程出现的bug以及解决方案</title>
    <link href="http://yoursite.com/2019/03/28/%E6%94%B6%E6%8A%A5%E5%90%8D%E8%A1%A8%E8%BF%87%E7%A8%8B%E5%87%BA%E7%8E%B0%E7%9A%84bug%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2019/03/28/收报名表过程出现的bug以及解决方案/</id>
    <published>2019-03-27T17:48:30.000Z</published>
    <updated>2019-03-27T18:04:06.977Z</updated>
    
    <content type="html"><![CDATA[<ul><li>校友文件名太长的问题</li><li>文件太大的问题（60m出错，姓名未填写错误）</li><li>校友文件名过长（因命名规则：账号+下划线+账号的md5值）</li><li>文件传不了，未知原因</li><li>文件无法覆盖，未知原因</li></ul><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>无法覆盖<ul><li>数据库里已经有相应文件名，只需要在文件目录<code>/var/www/File/applyfile</code>中替换文件即可。</li></ul></li><li>无法上传<ul><li>数据库中修改对应学号的<code>profile</code>属性为文件名。</li><li>在文件目录中加入文件。 </li></ul></li><li>备注：文件名默认为<code>账户名+下划线+账户名的哈希值</code>，其中账户名可能是学号（本科生）、邮箱（研究生、校友）</li></ul><h3 id="mysql远程连接"><a href="#mysql远程连接" class="headerlink" title="mysql远程连接"></a>mysql远程连接</h3><p>直接在终端建立ssh和mysql连接不安全，而且服务器不支持中文输入，有时候操作不便。</p><h4 id="更新配置"><a href="#更新配置" class="headerlink" title="更新配置"></a>更新配置</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'root'</span>@'<span class="token operator">%</span><span class="token string">' identified by '</span>password'<span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>*. *</code>：表示所有数据库（第一个 <em>）和表（第二个 </em>）。</li><li><code>root</code>：表示允许访问时登陆用的用户名。</li><li><code>%</code>：表示允许来自任何地址的访问。如果要指定一个ip，那么把%换成相应ip。</li><li><code>password</code>：表示设定密码。</li><li><code>flush privileges</code>：表示立即刷新使权限生效。</li></ul><p>这一步之后可以在表中查看结果：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">></span> <span class="token keyword">use</span> mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 可以看到密码是经过md5加密之后的值。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="修改cnf文件"><a href="#修改cnf文件" class="headerlink" title="修改cnf文件"></a>修改cnf文件</h4><ul><li>mysql的配置文件在目录<code>/etc/mysql/</code>下，需要编辑其开放的端口。</li><li>将<code>bind-address = 127.0.0.1</code>注释掉，因为它的意思是默认本地端口访问。</li></ul><h4 id="重启mysql服务"><a href="#重启mysql服务" class="headerlink" title="重启mysql服务"></a>重启mysql服务</h4><p><code>service mysql restart</code></p><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><ul><li>打开mysqlworkbench，建立新的连接，输入用户名和密码、服务器ip。端口号默认3306即可。</li><li>进行连接之后就可以远程操作了。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;校友文件名太长的问题&lt;/li&gt;
&lt;li&gt;文件太大的问题（60m出错，姓名未填写错误）&lt;/li&gt;
&lt;li&gt;校友文件名过长（因命名规则：账号+下划线+账号的md5值）&lt;/li&gt;
&lt;li&gt;文件传不了，未知原因&lt;/li&gt;
&lt;li&gt;文件无法覆盖，未知原因&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="back end" scheme="http://yoursite.com/categories/back-end/"/>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>27.Remove Element</title>
    <link href="http://yoursite.com/2019/03/28/27-Remove-Element/"/>
    <id>http://yoursite.com/2019/03/28/27-Remove-Element/</id>
    <published>2019-03-27T17:31:06.000Z</published>
    <updated>2019-03-27T18:11:45.164Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an array <em>nums</em> and a value <em>val</em>, remove all instances of that value <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> and return the new length.</p><p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array in-place</strong> with O(1) extra memory.</p><p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-java"><code class="language-java">Given nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>Your function should <span class="token keyword">return</span> length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> with the first two elements of nums being <span class="token number">2</span><span class="token punctuation">.</span>It doesn't matter what you leave beyond the returned length<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-java"><code class="language-java">Given nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>Your function should <span class="token keyword">return</span> length <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> with the first five elements of nums containing <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> and <span class="token number">4</span><span class="token punctuation">.</span>Note that the order of those five elements can be arbitrary<span class="token punctuation">.</span>It doesn't matter what values are set beyond the returned length<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="双指针，快慢操作"><a href="#双指针，快慢操作" class="headerlink" title="双指针，快慢操作"></a>双指针，快慢操作</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> fast <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> fast<span class="token operator">++</span><span class="token punctuation">)</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">)</span> nums<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul><h4 id="双指针——改进"><a href="#双指针——改进" class="headerlink" title="双指针——改进"></a>双指针——改进</h4><ul><li>在val元素较少的时候，为了避免过多的移动，采用交换机制；</li><li>这里的交换十分巧妙：将末尾的数替换当前的i，同时下一轮又会检查i位置的数；而n也会随交换缩小。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              n<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// reduce array size by one</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given an array &lt;em&gt;nums&lt;/em&gt; and a value &lt;em&gt;val&lt;/em&gt;, remove all instances of that value &lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;in-place&lt;/strong&gt;&lt;/a&gt; and return the new length.&lt;/p&gt;
&lt;p&gt;Do not allocate extra space for another array, you must do this by &lt;strong&gt;modifying the input array in-place&lt;/strong&gt; with O(1) extra memory.&lt;/p&gt;
&lt;p&gt;The order of elements can be changed. It doesn’t matter what you leave beyond the new length.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://yoursite.com/tags/array/"/>
    
      <category term="two pointers" scheme="http://yoursite.com/tags/two-pointers/"/>
    
      <category term="easy" scheme="http://yoursite.com/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>26.Remove Duplicates from Sorted Array</title>
    <link href="http://yoursite.com/2019/03/28/26-Remove-Duplicates-from-Sorted-Array/"/>
    <id>http://yoursite.com/2019/03/28/26-Remove-Duplicates-from-Sorted-Array/</id>
    <published>2019-03-27T17:28:12.000Z</published>
    <updated>2019-03-27T18:11:35.708Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a sorted array <em>nums</em>, remove the duplicates <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> such that each element appear only <em>once</em> and return the new length.</p><p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array in-place</strong> with O(1) extra memory.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-java"><code class="language-java">Given nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Your function should <span class="token keyword">return</span> length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> with the first two elements of nums being <span class="token number">1</span> and <span class="token number">2</span> respectively<span class="token punctuation">.</span>It doesn't matter what you leave beyond the returned length<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-java"><code class="language-java">Given nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Your function should <span class="token keyword">return</span> length <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> with the first five elements of nums being modified to <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> and <span class="token number">4</span> respectively<span class="token punctuation">.</span>It doesn't matter what values are set beyond the returned length<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="双指针，快慢操作。"><a href="#双指针，快慢操作。" class="headerlink" title="双指针，快慢操作。"></a>双指针，快慢操作。</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> fast <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> fast<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span><span class="token punctuation">)</span> nums<span class="token punctuation">[</span><span class="token operator">++</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> slow <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a sorted array &lt;em&gt;nums&lt;/em&gt;, remove the duplicates &lt;a href=&quot;https://en.wikipedia.org/wiki/In-place_algorithm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;in-place&lt;/strong&gt;&lt;/a&gt; such that each element appear only &lt;em&gt;once&lt;/em&gt; and return the new length.&lt;/p&gt;
&lt;p&gt;Do not allocate extra space for another array, you must do this by &lt;strong&gt;modifying the input array in-place&lt;/strong&gt; with O(1) extra memory.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="array" scheme="http://yoursite.com/tags/array/"/>
    
      <category term="two pointers" scheme="http://yoursite.com/tags/two-pointers/"/>
    
      <category term="easy" scheme="http://yoursite.com/tags/easy/"/>
    
  </entry>
  
  <entry>
    <title>Linux服务器部署：Flask + gunicorn + nginx</title>
    <link href="http://yoursite.com/2019/03/28/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%EF%BC%9AFlask-gunicorn-nginx/"/>
    <id>http://yoursite.com/2019/03/28/Linux服务器部署：Flask-gunicorn-nginx/</id>
    <published>2019-03-27T16:17:46.000Z</published>
    <updated>2019-03-27T18:00:03.830Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务器参数"><a href="#服务器参数" class="headerlink" title="服务器参数"></a>服务器参数</h3><ul><li>服务器ip：120.79.161.245（阿里云轻量级服务器，学生机）</li><li>阿里管理控制台：<a href="https://swas.console.aliyun.com/" target="_blank" rel="noopener">https://swas.console.aliyun.com/</a></li><li>os：Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-93-generic x86_64)</li></ul><a id="more"></a><h3 id="连接脚本："><a href="#连接脚本：" class="headerlink" title="连接脚本："></a>连接脚本：</h3><pre class="line-numbers language-shell"><code class="language-shell">#!/usr/bin/expectspawn ssh root@120.79.161.245expect "*password*" send "*****"expect "Welcome*"send "cd /data/www/\r"interact<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get install nginxsudo apt-get install python3.6python3 -V  # --version# 导出自己电脑上安装的库pip3 freeze > requirements.txt# 把requirements.txt拷贝到服务器上...# 按照库列表依次安装库pip3 install -r requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><ul><li>这个应该不用多说了吧。指定FLASK的app入口，之后run就可以了。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">FLASK_APP=war.pyflask run# 在war项目下目录结构是这样的：.|____app| |______init__.py| |______pycache__| | |____*.pyc| |____templates| | |____*.html| |____routes.py|______pycache__| |____*.pyc|____war.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ul><li><code>nginx</code>配置文件：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">vi /etc/nginx/nginx./conf# 在http的大括号内加入如下内容：server {    listen 80;  # 监听80号端口（默认访问端口）    server_name _;  # 自身ip，下划线代替；和端口号组成外网监听地址    location / {        proxy_pass http://127.0.0.1:8080;  # 转接到本机地址和端口，挑一个没有被占用的端口        proxy_redirect off;        proxy_set_header Host $host;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>gunicorn</code>操作指令：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">nohup gunicorn -w 1 -b 127.0.0.1:8080 main:app -D# nohup表示不输出任何信息，并将log存到当前目录下nohup.out文件；# -w指定开启的进程数量，一般推荐：【核数】 * 2 + 1，全写是--workers=1；# -b指定转到本机的接口，必须和nginx配置文件的内容一致；# 127.0.0.1即localhost，本地端口；# main:app指定gunicorn要代理的app入口，表示main.py里面的app；# -D表示daemon，守护进程，也就是后台运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>常用指令：</li></ul><pre class="line-numbers language-shell"><code class="language-shell"># 进程相关kill -s 9 [pid]ps aux    # 查看所有进程grep [string]  # 查看所有包含[string]的文件ps aux | grep nginx  # 管道，将显示nginx相关进程信息# 文件相关tree  # linux自带指令      # BTW，macOS如果想优雅地使用tree，需要如下操作：      # vi ～/.bash_profile  ## 在个人目录下创建/更改配置文件      # i  ## 插入模式      # alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"  ## 设置同义词组      # wq  ## 退出编辑      # source .bash_profile  ## 重新加载配置文件cat [filename]vi [filename]# nginx相关/etc/init.d/nginx start/etc/init.d/nginx stop/etc/init.d/nginx restart# 或者也可以 service nginx start.stop.restart# 再或者可以 nginx -s start.stop.restartvi /etc/nginx/nginx.conf  # 也可以选择 /etc/nginx/conf.d/default.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>关于配置文件</p><ul><li>在配置nginx的时候，网上的资料告诉我配置文件位于<code>/etc/nginx/sites-available/default</code>，我改了半天却并无卯月……然后在zh的帮助下查看了配置文件的路径，我的路径不在参考范围内。</li><li>这个指令既可以测试配置文件的有效性，也可以看到当前运行的配置文件的位置：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">/etc/init.d/nginx -tnginx: configuration file /etc/nginx/nginx.conf test is successful# 于是我们看到/etc/nginx/nginx.conf就是配置文件（这应该是默认的配置文件）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接着，在这个nginx.conf里面还有一段文字表明nginx会参考的配置文件路径，如果不修改上面第一个文件，修改下面几个路径下的文件也是可以的：</li></ul><pre class="line-numbers language-shell"><code class="language-shell">    ##    # Virtual Host Configs    ##    include /etc/nginx/conf.d/*.conf;    include /etc/nginx/sites-enabled/*;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>记一次bug</p><ul><li>10月6日晚，这个ip发生了一次神秘的bug：刷新index页面的时候，游戏轮数时而显示第一轮，时而显示第二轮，但是总是和文件game.txt里面不一致。</li><li>调整了一晚上都没有找到问题的核心，终于在一次调试中偶然发现-w改成1之后就不会出错（后来知道不是这个原因），因此提出一个假说：是不是多个gunicorn进程引发的混乱？</li><li>可惜好景不长，第二天重新使用workers=1的参数测试的时候，发现问题依然存在。最终查看系统所有进程突然发现，关于gunicorn的进程数（每个的workers都是1）出现好几个，分别是不同的时间段开启的……等等，我好像明白了什么。</li><li>最终真相大白：是因为不同时间开启的gunicorn进程未能有效关闭（每一次我都是重启nginx再重新输入gunicorn指令），从而前几次的gunicorn维护的页面和这一次的页面产生了冲突……导致后来的每一次测试都是在几个不同时段的gunicorn进程中辗转，时而进入这个进程时而进入那一个……</li><li>至于昨晚的结果，则应该是因为那一次尝试恰好伴随着服务器的重启的缘故。</li><li>这一次的<strong>教训</strong>：以后，每次结束测试都要把所有gunicorn的进程关闭。nginx也不例外。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;服务器参数&quot;&gt;&lt;a href=&quot;#服务器参数&quot; class=&quot;headerlink&quot; title=&quot;服务器参数&quot;&gt;&lt;/a&gt;服务器参数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;服务器ip：120.79.161.245（阿里云轻量级服务器，学生机）&lt;/li&gt;
&lt;li&gt;阿里管理控制台：&lt;a href=&quot;https://swas.console.aliyun.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://swas.console.aliyun.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;os：Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-93-generic x86_64)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="back end" scheme="http://yoursite.com/categories/back-end/"/>
    
    
      <category term="gunicorn" scheme="http://yoursite.com/tags/gunicorn/"/>
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>25.Reverse Nodes in k-Group</title>
    <link href="http://yoursite.com/2019/03/27/25-Reverse-Nodes-in-k-Group/"/>
    <id>http://yoursite.com/2019/03/27/25-Reverse-Nodes-in-k-Group/</id>
    <published>2019-03-27T14:26:23.000Z</published>
    <updated>2019-03-27T18:11:26.716Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and return its modified list.</p><p><em>k</em> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <em>k</em> then left-out nodes in the end should remain as it is.</p><a id="more"></a><p><strong>Example:</strong></p><p>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p><p>For <em>k</em> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p><p>For <em>k</em> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p><p><strong>Note:</strong></p><ul><li>Only constant extra memory is allowed.</li><li>You may not alter the values in the list’s nodes, only nodes itself may be changed.</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="用k大小的数组存节点，并依次翻转"><a href="#用k大小的数组存节点，并依次翻转" class="headerlink" title="用k大小的数组存节点，并依次翻转"></a>用k大小的数组存节点，并依次翻转</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    ListNode dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 保存k集团的前一个，k集团，以及k集团的后一个</span>    group<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dummy<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> group<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            group<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> group<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>group<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        group<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> group<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        group<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> group<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            group<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>next <span class="token operator">=</span> group<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        group<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> group<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(k)​$</li><li>空间复杂度：$O(n)​$</li></ul><h4 id="只使用常数个节点的做法"><a href="#只使用常数个节点的做法" class="headerlink" title="只使用常数个节点的做法"></a>只使用常数个节点的做法</h4><ul><li>问题的关键在于如何反转一个k大小的链表；这里使用的是将每次的第一个插到末尾的做法。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null <span class="token operator">||</span> k <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> head<span class="token punctuation">;</span>      ListNode dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>      ListNode tail <span class="token operator">=</span> dummy<span class="token punctuation">,</span> prev <span class="token operator">=</span> dummy<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>      <span class="token keyword">int</span> count<span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> tail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>            tail <span class="token operator">=</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 剩下来节点不够k个</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 此时tail指向k集团的最后一个节点</span>        head <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// head指向的是k集团的第一个节点，将会是翻转后最后一个节点，</span>                                          <span class="token comment" spellcheck="true">// 同时也是下一个k集团的前一个节点</span>        <span class="token comment" spellcheck="true">// prev-->temp-->...--->....--->tail-->....</span>        <span class="token comment" spellcheck="true">// Delete @temp and insert to the next position of @tail</span>        <span class="token comment" spellcheck="true">// prev-->...-->...-->tail-->head-->...</span>        <span class="token comment" spellcheck="true">// Assign @temp to the next node of @prev</span>        <span class="token comment" spellcheck="true">// prev-->temp-->...-->tail-->...-->...</span>        <span class="token comment" spellcheck="true">// Keep doing until @tail is the next node of @prev</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>prev<span class="token punctuation">.</span>next <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Assign</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Delete，从左侧删除temp</span>            temp<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            tail<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Insert，在右侧末尾插入temp</span>        <span class="token punctuation">}</span>        tail <span class="token operator">=</span> prev <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)​$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a linked list, reverse the nodes of a linked list &lt;em&gt;k&lt;/em&gt; at a time and return its modified list.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;k&lt;/em&gt; is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of &lt;em&gt;k&lt;/em&gt; then left-out nodes in the end should remain as it is.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="hard" scheme="http://yoursite.com/tags/hard/"/>
    
      <category term="linked list" scheme="http://yoursite.com/tags/linked-list/"/>
    
  </entry>
  
  <entry>
    <title>24.Swap Nodes in Pairs</title>
    <link href="http://yoursite.com/2019/03/27/24-Swap-Nodes-in-Pairs/"/>
    <id>http://yoursite.com/2019/03/27/24-Swap-Nodes-in-Pairs/</id>
    <published>2019-03-27T14:22:31.000Z</published>
    <updated>2019-03-27T18:11:14.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a linked list, swap every two adjacent nodes and return its head.</p><p>You may <strong>not</strong> modify the values in the list’s nodes, only nodes itself may be changed.</p> <a id="more"></a><p><strong>Example:</strong></p><pre class="line-numbers language-java"><code class="language-java">Given <span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token punctuation">,</span> you should <span class="token keyword">return</span> the list as <span class="token number">2</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">4</span><span class="token operator">-</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="直接做就可以了；小心边界情况"><a href="#直接做就可以了；小心边界情况" class="headerlink" title="直接做就可以了；小心边界情况"></a>直接做就可以了；小心边界情况</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">swapPairs</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ListNode dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pre <span class="token operator">=</span> dummy<span class="token punctuation">,</span> first <span class="token operator">=</span> head<span class="token punctuation">;</span>    dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode tmp <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 无视没有配对的点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        first<span class="token punctuation">.</span>next <span class="token operator">=</span> tmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        tmp<span class="token punctuation">.</span>next <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 下一对节点</span>        pre <span class="token operator">=</span> first<span class="token punctuation">;</span>        first <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;Given a linked list, swap every two adjacent nodes and return its head.&lt;/p&gt;
&lt;p&gt;You may &lt;strong&gt;not&lt;/strong&gt; modify the values in the list’s nodes, only nodes itself may be changed.&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="medium" scheme="http://yoursite.com/tags/medium/"/>
    
      <category term="linked list" scheme="http://yoursite.com/tags/linked-list/"/>
    
  </entry>
  
</feed>
