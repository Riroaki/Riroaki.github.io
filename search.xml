<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ML学习日记7——自己实现一个神经网络</title>
      <link href="/2019/04/22/ML-7-My-Neuron-Network-Model/"/>
      <url>/2019/04/22/ML-7-My-Neuron-Network-Model/</url>
      
        <content type="html"><![CDATA[<p>这两天受到cs224n启发，决定仿照keras的api自己实现一个最简单的全连接神经网络。</p><p>支持特性：</p><ul><li>多种激活函数（sigmoid, tanh, relu, softmax）</li><li>多种损失函数（cross entropy, mean square error, mean absolute error）</li><li>小批量梯度下降</li></ul><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><p>首先，按照基本定义将设计划分成3个类：Neuron，Layer以及Model，层层递进。</p><h4 id="神经元Neuron"><a href="#神经元Neuron" class="headerlink" title="神经元Neuron"></a>神经元Neuron</h4><ul><li><h4 id="层Layer"><a href="#层Layer" class="headerlink" title="层Layer"></a>层Layer</h4></li><li></li></ul><h4 id="模型Model"><a href="#模型Model" class="headerlink" title="模型Model"></a>模型Model</h4><p>- </p>]]></content>
      
      
      <categories>
          
          <category> machine learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络要点整理</title>
      <link href="/2019/04/22/Network/"/>
      <url>/2019/04/22/Network/</url>
      
        <content type="html"><![CDATA[<h3 id="4层模型-7层模型"><a href="#4层模型-7层模型" class="headerlink" title="4层模型/7层模型"></a>4层模型/7层模型</h3><p>……</p><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><ul><li>get和post区别：内容写在请求头和请求主体；post更安全，可以避免跨站脚本攻击（CSRF）<ul><li>一般使用Token实现防御，就是关键请求需要使用特定的一次性加密Token标记。</li></ul></li><li>HEAD和BODY（可选，可以没有body）之间的区分为两个\r\n；可以包含多个HEAD，用一个\r\n分割。</li><li>Content-Length限制长度，或者是Transfer-Encoding: Chunked表示分块传输编码，每个块前标示块大小；而总长度未知，最后一个块长度是0，所以遇到0表示内容结束；块之间是两个\r\n。</li></ul><h4 id="MIME-TYPE"><a href="#MIME-TYPE" class="headerlink" title="MIME-TYPE"></a>MIME-TYPE</h4><pre class="line-numbers language-lang-json"><code class="language-lang-json">text/plaintext/htmltext/cssimage/jpegimage/pngimage/svg+xmlaudio/mp4video/mp4application/javascriptapplication/pdfapplication/zipapplication/atom+xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="HTTP1-0"><a href="#HTTP1-0" class="headerlink" title="HTTP1.0"></a>HTTP1.0</h4><ul><li>无状态短连接发完就关闭</li><li>声明Connection: keep-alive表示长连接。</li></ul><h4 id="HTTP1-1（主流）"><a href="#HTTP1-1（主流）" class="headerlink" title="HTTP1.1（主流）"></a>HTTP1.1（主流）</h4><ul><li>HEAD编码用ASCII，BODY可以是ASCII也可以是二进制（图片视频等等）</li><li>长连接（主要是允许复用），最后发送长度为0表示内容结束才会关闭连接。缺点是队头堵塞，需要服务器完全接受才能继续。</li></ul><h4 id="HTTP2-0（2015推出）"><a href="#HTTP2-0（2015推出）" class="headerlink" title="HTTP2.0（2015推出）"></a>HTTP2.0（2015推出）</h4><ul><li>多工通信，非阻塞。</li><li>HEAD加入信息压缩（Content-Encoding表示内容编码，一般是gzip）。</li><li>由于HTTP本质还是没有状态的，每次请求都会发送状态信息，所以修改成服务器和客户端共同维护cookies和user agent等重复字段的表，不需要每次都传相同信息，节约通信成本。</li><li>HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送（server push）。这一来就可以在空闲的时候预先把可能未来会需要的资源先发送到客户端，提高用户体验。</li></ul><h4 id="HTTPS：HTTP-over-TLS，是一种在加密信道进行-HTTP-内容传输的协议。"><a href="#HTTPS：HTTP-over-TLS，是一种在加密信道进行-HTTP-内容传输的协议。" class="headerlink" title="HTTPS：HTTP over TLS，是一种在加密信道进行 HTTP 内容传输的协议。"></a>HTTPS：HTTP over TLS，是一种在加密信道进行 HTTP 内容传输的协议。</h4><ul><li><p>TLS证书机制，CA信任链，根证书为最安全的</p></li><li><p>从上面的过程可以看到，TLS 的完整过程需要三个算法（协议），密钥交互算法，对称加密算法，和消息认证算法（TLS 的传输会使用 MAC(message authentication code) 进行完整性检查）。</p><p>我们以 Github 网站使用的 TLS 为例，使用浏览器可以看到它使用的加密为 <code>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</code>。其中密钥交互算法是 <code>ECDHE_RSA</code>，对称加密算法是 <code>AES_128_GCM</code>，消息认证（MAC）算法为 <code>SHA256</code>。</p></li><li><p>HSTS：强制浏览器使用HTTPS协议</p></li><li><p>中间人攻击、伪造证书攻击</p></li></ul><h3 id="Socket与TCP、UDP"><a href="#Socket与TCP、UDP" class="headerlink" title="Socket与TCP、UDP"></a>Socket与TCP、UDP</h3><h4 id="Socket编程："><a href="#Socket编程：" class="headerlink" title="Socket编程："></a>Socket编程：</h4><ul><li>服务原语作为函数名，不追究底层实现：<ul><li>socket()创建套接字</li><li>bind()分配套接字地址</li><li>listen()等待连接请求</li><li>accept()允许连接请求</li><li>read()/write()数据交换</li><li>close()关闭连接</li></ul></li><li>服务器在不断等待连接请求，如果遇到接入，那么就开一个线程处理通信；</li><li>键盘输入可以中断，pthread_cancel，取消点机制可以在循环的accept阶段（阻塞式IO）终止。</li></ul><h4 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h4><ul><li><p>第一次握手(SYN=1, seq=x):</p><p>客户端发送一个 TCP 的 SYN 标志位置1的包，指明客户端打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。</p><p>发送完毕后，客户端进入 <code>SYN_SEND</code> 状态。</p></li><li><p>第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1):</p><p>服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加1，即X+1。 发送完毕后，服务器端进入 <code>SYN_RCVD</code> 状态。</p></li><li><p>第三次握手(ACK=1，ACKnum=y+1)</p><p>客户端再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写ISN的+1</p><p>发送完毕后，客户端进入 <code>ESTABLISHED</code> 状态，当服务器端接收到这个包时，也进入 <code>ESTABLISHED</code>状态，TCP 握手结束。</p></li></ul><h4 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h4><ul><li><p>第一次挥手(FIN=1，seq=x)</p><p>假设客户端想要关闭连接，客户端发送一个 FIN 标志位置为1的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。</p><p>发送完毕后，客户端进入 <code>FIN_WAIT_1</code> 状态。</p></li><li><p>第二次挥手(ACK=1，ACKnum=x+1)</p><p>服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。</p><p>发送完毕后，服务器端进入 <code>CLOSE_WAIT</code> 状态，客户端接收到这个确认包之后，进入 <code>FIN_WAIT_2</code> 状态，等待服务器端关闭连接。</p></li><li><p>第三次挥手(FIN=1，seq=y)</p><p>服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为1。</p><p>发送完毕后，服务器端进入 <code>LAST_ACK</code> 状态，等待来自客户端的最后一个ACK。</p></li><li><p>第四次挥手(ACK=1，ACKnum=y+1)</p><p>客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 <code>TIME_WAIT</code>状态，等待可能出现的要求重传的 ACK 包。</p><p>服务器端接收到这个确认包之后，关闭连接，进入 <code>CLOSED</code> 状态。</p><p>客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 <code>CLOSED</code> 状态。</p></li></ul><h4 id="SYN攻击"><a href="#SYN攻击" class="headerlink" title="SYN攻击"></a>SYN攻击</h4><ul><li>在三次握手过程中，服务器发送 SYN-ACK 之后，收到客户端的 ACK 之前的 TCP 连接称为半连接(half-open connect)。此时服务器处于 SYN_RCVD 状态。当收到 ACK 后，服务器才能转入 ESTABLISHED 状态.</li><li>SYN 攻击指的是，攻击客户端在短时间内伪造大量不存在的IP地址，向服务器不断地发送SYN包，服务器回复确认包，并等待客户的确认。由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，导致目标系统运行缓慢，严重者会引起网络堵塞甚至系统瘫痪。</li><li>SYN 攻击是一种典型的 DoS/DDoS 攻击。</li></ul><h4 id="TCP心跳检测（Keep-Alive）"><a href="#TCP心跳检测（Keep-Alive）" class="headerlink" title="TCP心跳检测（Keep Alive）"></a>TCP心跳检测（Keep Alive）</h4><ul><li>在交互过程中 ，双方都有可能因为物理原因或者故障而掉线，这个时候需要检测对方是否还在不然无法close释放进程。</li><li>TCP KeepAlive 的基本原理是，隔一段时间给连接对端发送一个探测包，如果收到对方回应的 ACK，则认为连接还是存活的，在超过一定重试次数之后还是没有收到对方的回应，则丢弃该 TCP 连接。</li></ul><h4 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h4><ul><li>只管发不管收，直播流等数据些微损失影响不大，传输速率比较重要的场景。</li><li>无连接，不必握手，直接发就可以；支持广播和多播。</li></ul>]]></content>
      
      
      <categories>
          
          <category> ingterview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库知识要点整理</title>
      <link href="/2019/04/22/Database/"/>
      <url>/2019/04/22/Database/</url>
      
        <content type="html"><![CDATA[<h3 id="数据库管理系统原则——ACID"><a href="#数据库管理系统原则——ACID" class="headerlink" title="数据库管理系统原则——ACID"></a>数据库管理系统原则——ACID</h3><p><strong>ACID</strong>，是指<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">数据库管理系统</a>（<a href="https://zh.wikipedia.org/wiki/DBMS" target="_blank" rel="noopener">DBMS</a>）在写入或更新资料的过程中，为保证<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1" target="_blank" rel="noopener">事务</a>（transaction）是正确可靠的，所必须具备的四个特性：<a href="https://zh.wikipedia.org/w/index.php?title=%E5%8E%9F%E5%AD%90%E6%80%A7&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">原子性</a>（atomicity，或称不可分割性）、<a href="https://zh.wikipedia.org/w/index.php?title=%E4%B8%80%E8%87%B4%E6%80%A7_(%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener">一致性</a>&amp;action=edit&amp;redlink=1)（consistency）、<a href="https://zh.wikipedia.org/wiki/%E9%9A%94%E9%9B%A2%E6%80%A7" target="_blank" rel="noopener">隔离性</a>（isolation，又称独立性）、<a href="https://zh.wikipedia.org/w/index.php?title=%E6%8C%81%E4%B9%85%E6%80%A7&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">持久性</a>（durability）。</p><h4 id="Atomicity（原子性）："><a href="#Atomicity（原子性）：" class="headerlink" title="Atomicity（原子性）："></a>Atomicity（原子性）：</h4><p>一个事务（transaction）中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被<a href="https://zh.wikipedia.org/wiki/%E5%9B%9E%E6%BB%9A_(%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86" target="_blank" rel="noopener">回滚</a>)（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简。</p><h4 id="Consistency（一致性）："><a href="#Consistency（一致性）：" class="headerlink" title="Consistency（一致性）："></a>Consistency（一致性）：</h4><p>在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7" target="_blank" rel="noopener">约束</a>、<a href="https://zh.wikipedia.org/wiki/%E8%A7%A6%E5%8F%91%E5%99%A8_(%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="noopener">触发器</a>)、<a href="https://zh.wikipedia.org/w/index.php?title=%E7%BA%A7%E8%81%94%E5%9B%9E%E6%BB%9A&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">级联回滚</a>等。</p><p>事务是维护数据一致性的基本单位。要么全部执行，要么全都不执行。</p><h4 id="Isolation（隔离性）："><a href="#Isolation（隔离性）：" class="headerlink" title="Isolation（隔离性）："></a>Isolation（隔离性）：</h4><p>数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</p><h4 id="Durability（持久性）："><a href="#Durability（持久性）：" class="headerlink" title="Durability（持久性）："></a>Durability（持久性）：</h4><p>事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。（结果一定会写入内存）</p><h3 id="数据库表设计原则"><a href="#数据库表设计原则" class="headerlink" title="数据库表设计原则"></a>数据库表设计原则</h3><ul><li>明确实体和表的对应关系：一对一还是一对多，还是多对多</li><li>对第一、第三、第三范式（三个范式不能生搬硬套，因为适当降低标准可以提高性能）：<ul><li>第一范式：1NF是对属性的原子性约束，要求<strong>属性具有原子性，不可再分解</strong>；</li><li>第二范式：2NF是对记录的惟一性约束，要求<strong>记录有惟一标识，即实体的惟一性</strong>；</li><li>第三范式：3NF是对字段冗余性的约束，即任何字段不能由其他字段派生出来，它要求字段没有冗余。 <ul><li>实际操作我们应当如何减少数据冗余：<ul><li>冗余本质是用空间换时间，比如极端情况我把两张表合并到一起，就可以操作更简单，提高性能；但是代价就是存储开销比较大，完全没有必要这么做。</li><li><strong>支持派生冗余，反对重复冗余</strong>。派生冗余就是比如单价和数量属性计算得到总金额，这个是常用的数据所以引入可以提高性能；重复就是两个表没有必要的重复性。</li></ul></li></ul></li></ul></li><li>完整性约束：<ul><li>最基本的主键不能缺失</li><li>外键定义约束表不发生冲突</li></ul></li><li>一些经验，比如：<ul><li>表较少、字段较少、组成主键的子段少，性能高。</li><li>复杂计算在查询外执行，不要在数据库做。</li><li>表的内容过多就应该分割一些，做子表。</li></ul></li></ul><h3 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h3><h4 id="数据库内部实现："><a href="#数据库内部实现：" class="headerlink" title="数据库内部实现："></a>数据库内部实现：</h4><ul><li>对常用结果进行缓存；命中缓存则不需要进行下一步操作。</li><li>解析sql语句之后进行语法树的优化：尝试预测不同方案的查询代价，选择代价最小的那一个查询计划。</li></ul><h4 id="表设计："><a href="#表设计：" class="headerlink" title="表设计："></a>表设计：</h4><ul><li>数据类型优化，单张表的属性少一点之类的，不要用枚举什么的；固定字段长度比可变字段长度效率高。</li><li>建立索引，提高搜索效率</li></ul><h4 id="写查询语句："><a href="#写查询语句：" class="headerlink" title="写查询语句："></a>写查询语句：</h4><ul><li>写的时候估算一下？</li><li>有索引的时候尽量使用</li><li>避免<code>select *</code>，用到什么就取什么</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li>使用B树或者B+树实现，指向记录的物理地址的位置。<ul><li>两种树的区别：<ul><li>B树是二叉树的直接变体，节点存数据指针和下一层的指针；</li><li>B+树的非叶子结点不存数据指针，所以每个节点能够存放的指针更多，更扁平</li></ul></li><li>优缺点：<ul><li>B+树查询速度稳定，因为都要查到叶子结点；</li><li>B+树更方便排序，因为叶子结点是链表串；</li><li>使用B+树做全表遍历更快，因为只涉及最后一层（当然，有索引你还全表遍历，不是直接遍历表就可以了嘛——除非有排序的需求）；</li><li>如果访问数据离根节点快，那么B树更好。</li></ul></li></ul></li><li>通常把节点加载到内存之后，根据查找得到的位置去访问物理空间。</li><li>between范围查询、like的右模糊查询会使用索引，而两侧模糊查询不会</li></ul><h4 id="建立索引原则"><a href="#建立索引原则" class="headerlink" title="建立索引原则"></a>建立索引原则</h4><ul><li>尽量选择主键这种区分度高的字段建立索引</li><li>需要经常范围搜索或者排序的位置，则建立索引</li><li>修改次数远大于检索次数的时候，建索引不好</li><li>如果使用的是多键索引，进行从左到右的匹配，“最左匹配特性”</li></ul><h4 id="索引的坏处"><a href="#索引的坏处" class="headerlink" title="索引的坏处"></a>索引的坏处</h4><ul><li>建立索引的时候内存开销大，容易宕机</li><li>物理空间占用较大，应该适当删除</li><li>修改数据的时候需要较高的维护成本</li></ul><h4 id="有了索引但是查询并不变快的场景"><a href="#有了索引但是查询并不变快的场景" class="headerlink" title="有了索引但是查询并不变快的场景"></a>有了索引但是查询并不变快的场景</h4><p>可能没有走索引。当数据库评估代价的时候，索引并不能帮助提高效率（索引基数较低的情况等等），那它还不如直接遍历全表。</p><h4 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h4><h5 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h5><ul><li>在mysql建立联合索引时会遵循最左前缀匹配的原则，即最左优先，在检索数据时从联合索引的最左边开始匹配，示例：对列col1、列col2和列col3建一个联合索引<code>(col1, col2)</code>，对查询语句会按照索引的顺序来检查，首先看<code>col1</code>的限制条件，再看<code>col2</code>。</li><li><p>所以在写查询的时候不必在意列的查询顺序。比如，<code>where col1 = &#39;1&#39; and col2 = &#39;2&#39;</code>和<code>where col2 = &#39;2&#39; and col1 = &#39;1&#39;</code>这两个查询语句都会用到索引(col1,col2)，mysql创建联合索引的规则是首先会对联合合索引的最左边的，也就是第一个字段col1的数据进行排序，在第一个字段的排序基础上，然后再对后面第二个字段col2进行排序。其实就相当于实现了类似 order by col1 col2这样一种排序规则。</p></li><li><p>借助mysql查询优化器explain，explain会纠正sql语句该以什么样的顺序执行效率最高，最后才生成真正的执行计划。</p><ul><li><p>具体：<code>EXPLAIN SELECT * FROM test WHERE col2=2\G</code>（\G是为了以列的形式显示出来，不然行来看的话会很长，展不开）</p></li><li><p>例如，我在自己之前用来做你画我猜的数据库测试了一下：</p></li><li><pre class="line-numbers language-lang-mysql"><code class="language-lang-mysql">mysql> explain select * from topics\G*************************** 1. row ***************************           id: 1  select_type: SIMPLE        table: topics   partitions: NULL         type: ALLpossible_keys: NULL          key: NULL      key_len: NULL          ref: NULL         rows: 1     filtered: 100.00        Extra: NULL1 row in set, 1 warning (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>type字段：ALL全表扫描,通常是不好的，其他的如index、range、const、ref、system则是较好的。</p></li><li><p>possible_keys：可能被用到的索引。</p></li><li><p>key_len：索引基数，也就是不同的键值一共有几种。</p><ul><li><blockquote><p>索引的基数相对于数据表行数较高（也就是说，列中包含很多不同的值，重复的值很少）的时候，它的工作效果最好。如果某数据列含有很多不同的年龄，索引会很快地分辨数据行。如果某个数据列用于记录性别（只有”M”和”F”两种值），那么索引的用处就不大。如果值出现的几率几乎相等，那么无论搜索哪个值都可能得到一半的数据行。在这些情况下，最好根本不要使用索引，因为查询优化器发现某个值出现在表的数据行中的百分比很高的时候，它一般会忽略索引，进行全表扫描。惯用的百分比界线是”30%”。（匹配的数据量超过一定限制的时候查询器会放弃使用索引。尽量不使用会导致索引失效的条件，比如in，用exists子查询代替，或者in的条件少时可以用union all来代替）。</p></blockquote></li></ul></li><li><p>key：按照现在的语句，实际搜索用到的索引，如果是NULL表示没有用到索引。</p></li><li><p>rows：估计要扫描的行数。</p></li></ul></li></ul><h5 id="为什么要使用联合索引？"><a href="#为什么要使用联合索引？" class="headerlink" title="为什么要使用联合索引？"></a>为什么要使用联合索引？</h5><ul><li>减少开销。建一个联合索引(col1,col2,col3)，实际相当于建了(col1),(col1,col2),(col1,col2,col3)三个索引。每多一个索引，都会增加写操作的开销和磁盘空间的开销。对于大量数据的表，使用联合索引会大大的减少开销！</li><li>覆盖索引。对联合索引(col1,col2,col3)，如果有如下的sql: select col1,col2,col3 from test where col1=1 and col2=2。那么MySQL可以直接通过遍历索引取得数据，而无需回表，这减少了很多的随机io操作。减少io操作，特别的随机io其实是dba主要的优化策略。所以，在真正的实际应用中，覆盖索引是主要的提升性能的优化手段之一。</li><li>效率高。索引列越多，通过索引筛选出的数据越少。有1000W条数据的表，有如下sql:select <em>from table where col1=1 and col2=2 and col3=3,假设假设每个条件可以筛选出10%的数据，如果只有单值索引，那么通过该索引能筛选出1000W</em>10%=100w条数据，然后再回表从100w条数据中找到符合col2=2 and col3= 3的数据，然后再排序，再分页；如果是联合索引，通过索引筛选出1000w<em>10%</em> 10% *10%=1w，效率提升可想而知！</li></ul><h3 id="其他散的知识点"><a href="#其他散的知识点" class="headerlink" title="其他散的知识点"></a>其他散的知识点</h3><h4 id="悲观锁和乐观锁"><a href="#悲观锁和乐观锁" class="headerlink" title="悲观锁和乐观锁"></a>悲观锁和乐观锁</h4><p>乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。</p><p>乐观锁用于多读——冲突较少，悲观锁用于多写——冲突较多。</p><ul><li>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作<ul><li>synchronized的底层实现主要依靠 <strong>Lock-Free</strong> 的队列，基本思路是 <strong>自旋后阻塞</strong>，<strong>竞争切换后继续竞争锁</strong>，<strong>稍微牺牲了公平性，但获得了高吞吐量</strong>。在线程冲突较少的情况下，可以获得和CAS类似的性能；而线程冲突严重的情况下，性能远高于CAS。</li></ul></li><li>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性<ul><li>CAS（将比较并修改值作为原子过程，无锁编程，自旋操作），缺点在于值一样的时候无法检查是否有更新过；自旋机制反复比较开销大。适用于较轻、竞争少的情况。</li><li>版本号机制（提交时比较读时版本号与当前版本号区别，提交版本号必须比记录版本号大才允许更新）</li></ul></li></ul><h4 id="drop、delete与truncate分别在什么场景之下使用？"><a href="#drop、delete与truncate分别在什么场景之下使用？" class="headerlink" title="drop、delete与truncate分别在什么场景之下使用？"></a><strong>drop、delete</strong>与<strong>truncate</strong>分别在什么场景之下使用？</h4><ul><li>不再需要一张表的时候，用<strong>drop</strong></li><li>想删除部分数据行时候，用<strong>delete</strong>，并且带上where子句</li><li>保留表而删除所有数据的时候用<strong>truncate</strong></li></ul><h4 id="什么是视图？以及视图的使用场景有哪些？"><a href="#什么是视图？以及视图的使用场景有哪些？" class="headerlink" title="什么是视图？以及视图的使用场景有哪些？"></a>什么是视图？以及视图的使用场景有哪些？</h4><p>视图是一种虚拟的表，具有和物理表相同的功能。可以对视图进行增，改，查，操作，试图通常是有一个表或者多个表的行或列的子集。对视图的修改不影响基本表。它使得我们获取数据更容易，相比多表查询。</p><ul><li>只暴露部分字段给访问者，所以就建一个虚表，就是视图。</li><li>查询的数据来源于不同的表，而查询者希望以统一的方式查询，这样也可以建立一个视图，把多个表查询结果联合起来，查询者只需要直接从视图中获取数据，不必考虑数据来源于不同表所带来的差异</li></ul>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP学习日记2——Skip-Gram模型</title>
      <link href="/2019/04/19/NLP-2-Skip-Gram/"/>
      <url>/2019/04/19/NLP-2-Skip-Gram/</url>
      
        <content type="html"><![CDATA[<p>在第一篇日记中提到的<code>Skip-gram</code>模型，它来自<code>word2vec</code>模型，这里补充它的说明。</p><h3 id="前置概念介绍"><a href="#前置概念介绍" class="headerlink" title="前置概念介绍"></a>前置概念介绍</h3><h4 id="词向量"><a href="#词向量" class="headerlink" title="词向量"></a>词向量</h4><p>考虑一下这件事：有些单词之间长得很像，意思和用法也很像；有些单词长得不像，但是意思差不多，比如dog和puppy，kitty和cat，或者说存在比较强的联系。</p><p>另外我们需要表示两个单词的距离，比如上文的dog和puppy之间的关系，cat和kitty的关系其实是一致的——一个是狗和小狗，另一个是猫和小猫。可以说他们彼此的距离是差不多的。但是这样的概念对于非结构化的文本来说，要怎么表示？</p><p>这个时候就需要词向量。我们知道，两个向量之间的距离是可以用公式求出来的（欧式距离、切比雪夫距离、曼哈顿距离等等）。假如每个单词使用一定的特征，如词性、词义等等表示，然后向量之间的距离就能够表示单词之间“语义”的差距的话，岂不是美滋滋？</p><h4 id="Word2Vec"><a href="#Word2Vec" class="headerlink" title="Word2Vec"></a>Word2Vec</h4><p>这个模型是谷歌搞出来训练词向量的模型集合。主要包括有两种模型：</p><ul><li><p>Skip-Gram模型主要用于给定input词语，预测上下文词语。</p></li><li><p>CBOW模型主要用于给定上下文填空。哈哈做出一个完形填空的算法，从此英语高考再也不用担心啦！</p></li></ul><p>⚠️需要注意的是，因为我们的目的在于获得词向量，所以最终得到的结果并不是这个用于输出的模型，而是这整个语料库的词向量表。</p><h4 id="one-hot编码"><a href="#one-hot编码" class="headerlink" title="one-hot编码"></a>one-hot编码</h4><p>算法需要结构化的数值而非一个字符串。所以我们把单词通过one-hot编码转化为一个初始向量。</p><p>具体来说非常简单粗暴：</p><p>比如，基于“The dog barked at the mailman”可以构建一个大小为5的词汇表（忽略大小写和标点符号）：(“the”, “dog”, “barked”, “at”, “mailman”)，我们对这个词汇表的单词进行编号0-4。那么”dog“就可以被表示为一个5维向量[0, 1, 0, 0, 0]。</p><h3 id="Skip-Gram"><a href="#Skip-Gram" class="headerlink" title="Skip-Gram"></a>Skip-Gram</h3><p>终于到今天的正文部分了。</p><p>为了训练，我们需要把单词和它的上下文单词联系起来。</p><ul><li>我们设定两个参数，<code>skip_window</code>表示窗口大小，即从单词左侧和右侧分别取一定的个数个单词；<code>num_skips</code>表示选取几个单词作为输出。</li><li>比如：对一句话”<strong>The dog barked at the mailman</strong>“。在这个例子中，如果两个参数都是2，那么用于训练的是两组数据：<strong>(‘dog’, ‘barked’)，(‘dog’, ‘the’)</strong>。</li><li>下图是另一个例子，<code>skip_window=2,num_skips=2</code>：</li></ul><p><img src="/2019/04/19/NLP-2-Skip-Gram/skip_gram.png" alt></p><h4 id="模型细节"><a href="#模型细节" class="headerlink" title="模型细节"></a>模型细节</h4><p>首先贴出模型的结构图：</p><p><img src="/2019/04/19/NLP-2-Skip-Gram/skip-gram1.png" alt></p><p>假设语料库的单词集合大小为n。</p><p>首先，模型的输入就是一个<code>one-hot</code>编码后的单词，是一个n维的向量。</p><p>然后，模型的输出可以使用一个n维的向量表示单词表的概率分布。当然，为了保证最后所有单词概率和为1，我们需要加一层<code>softmax</code>函数，把结果指数归一化。</p><p>需要关注的是中间的隐层：</p>]]></content>
      
      
      <categories>
          
          <category> machine learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2019/04/19/test/"/>
      <url>/2019/04/19/test/</url>
      
        <content type="html"><![CDATA[<p>SetExpan: Corpus-Based Set Expansion via<br>Context Feature Selection and Rank Ensemble<br>Jiaming Shen?<br>, Zeqiu Wu?<br>, Dongming Lei, Jingbo Shang, Xiang Ren, Jiawei Han<br>Department of Computer Science, University of Illinois at Urbana-Champaign, USA<br>{js2, zeqiuwu1, dlei5, shang7, xren7, hanj}@illinois.edu<br>Abstract. Corpus-based set expansion (i.e., finding the “complete” set<br>of entities belonging to the same semantic class, based on a given corpus<br>and a tiny set of seeds) is a critical task in knowledge discovery. It<br>may facilitate numerous downstream applications, such as information<br>extraction, taxonomy induction, question answering, and web search.<br>To discover new entities in an expanded set, previous approaches either<br>make one-time entity ranking based on distributional similarity, or resort<br>to iterative pattern-based bootstrapping. The core challenge for these<br>methods is how to deal with noisy context features derived from free-text<br>corpora, which may lead to entity intrusion and semantic drifting. In<br>this study, we propose a novel framework, SetExpan, which tackles this<br>problem, with two techniques: (1) a context feature selection method that<br>selects clean context features for calculating entity-entity distributional<br>similarity, and (2) a ranking-based unsupervised ensemble method for<br>expanding entity set based on denoised context features. Experiments on<br>three datasets show that SetExpan is robust and outperforms previous<br>state-of-the-art methods in terms of mean average precision.<br>Keywords: Set Expansion, Information Extraction, Bootstrapping, Unsupervised Ranking-Based Ensemble<br>1 Introduction<br>Set expansion refers to the problem of expanding a small set of seed entities<br>into a complete set of entities that belong to the same semantic class [29]. For<br>example, if a given seed set is {Oregon, Texas, Iowa}, set expansion should return<br>a hopefully complete set of entities in the same semantic class, “U.S. states”.<br>Set expansion can benefit various downstream applications, such as knowledge<br>extraction [8], taxonomy induction [27], and web search [2].<br>One line of work for solving this task includes Google Set [26], SEAL [29], and<br>Lyretail [2]. In this approach, a query consisting of seed entities is submitted to<br>a search engine to mine top-ranked webpages. While this approach can achieve<br>relatively good quality, the required seed-oriented online data extraction is costly.<br>Therefore, more studies [17][23][10][28][21] are proposed in a corpus-based setting<br>where sets are expanded by offline processing based on a specific corpus.<br>? Equal Contribution<br>2 J. Shen, Z. Wu, D. Lei, J. Shang, X. Ren, J. Han<br>For corpus-based set expansion, there are two general approaches, one-time<br>entity ranking and iterative pattern-based bootstrapping. Based on the assumption<br>that similar entities appear in similar contexts, the first approach [17][23][10]<br>makes a one-time ranking of candidate entities based on their distributional<br>similarity with seed entities. A variety of “contexts” are used, including Web<br>table, Wikipedia list, or just free-text patterns, and entity-entity distributional<br>similarity is calculated based on all context features. However, blindly using all<br>such features can introduce undesired entities into the expanded set because<br>many context features are not representative for defining the target semantic class<br>although they do have connections with some of the seed entities. For example,<br>when expanding the seed set {Oregon, Texas, Iowa}, “located in ” can be a<br>pattern feature (the entity is replaced with a placeholder) strongly connected to<br>all the three seeds. However, it does not clearly convey the semantic meaning of<br>“U.S. states.” and can bring in entities like USA or Ontario when being used to<br>calculate candidate entity’s similarity with seeds. This is entity intrusion error.<br>Another issue with this approach is that it is hard to obtain the full set at once<br>without back and forth refinement. In some sense, iteratively bootstrapped set<br>expansion is a more conservative way and leads to better precision.<br>The second approach, iterative pattern-based bootstrapping [22][8][9], starts<br>from seed entities to extract quality patterns, based on a predefined pattern<br>scoring mechanism, and it then applies extracted patterns to obtain even higher<br>quality entities using another entity scoring method. This process iterates and the<br>high-quality patterns from all previous iterations are accumulated into a pattern<br>pool which will be used for the next round of entity extraction. This approach<br>works only when patterns/entities extracted at each iteration are highly accurate,<br>otherwise, it may cause severe semantic shift problem. Suppose in the previous<br>example, “located in ” is taken as a good pattern from the seed set {Oregon,<br>Texas, Iowa}, and this pattern brings in USA and Ontario. These undesired<br>entities may bring in even lower quality patterns and iteratively cause the set<br>shifting farther away. Thus, the pattern and entity scoring methods are crucial<br>but sensitive in iterative bootstrapping methods. If they are not defined perfectly,<br>the semantic shift can cause big problems. However, it is hard to have a perfect<br>scoring mechanism due to the diversity and noisiness of unstructured text data.<br>This study proposes a new set expansion framework, SetExpan, which addresses both challenges posed above for corpus-based set expansion on free text.<br>It carefully and conservatively extracts each candidate entity and iteratively<br>improves the results. First, to overcome the entity intrusion problem, instead of<br>using all context features, context features are carefully selected by calculating<br>distributional similarity. Second, to overcome the semantic drift problem, different<br>from other bootstrapped approaches, our high-quality feature pool will be reset<br>at the beginning of each iteration. Finally, our carefully designed unsupervised<br>ranking-based ensemble method is used at each iteration to further refine entities<br>and make our system robust to noisy or wrongly extracted pattern features.<br>Figure 1 shows the pipeline at each iteration. SetExpan iteratively expands an<br>entity set through a context feature selection step and an entity selection step. At<br>SetExpan 3<br>Quebec 5 (1/3)<br>Baja California 4 (1/2+1/3)<br>California 3 (1/1)<br>Florida 2 (1/1+1/2)<br>Arizona 1 (1/2+1/3+1/1)<br>Entities Rank (Score)<br>Quebec 3 (1/3)<br>Arizona 2 (1/2)<br>California 1 (1/1)<br>Entities Rank (Score)<br>Arizona 3 (1/3)<br>Baja California 2 (1/2)<br>Florida 1 (1/1)<br>Entities Rank (Score)<br>Baja California 3 (1/3)<br>Florida 2 (1/2)<br>Arizona 1 (1/1)<br>Entities Rank (Score)<br>Pre-ranked entity list 1<br>Pre-ranked entity list 2<br>Pre-ranked entity list 3<br>Final ranked list of entities<br>Denoised context sets<br>City , <strong> , USA<br>US state of </strong> ,<br>Texas and <strong> ,<br>City , </strong> , USA<br>US state of <strong> ,<br>City , </strong> , USA<br>Texas and <strong> ,<br>US state of </strong> ,<br>Texas and <strong> ,<br>the former </strong> governor<br>city , <strong> , USA<br>US state of </strong> .<br>Texas and <strong><br>county , </strong> , on<br>Context features<br>Georgia<br>Illinois<br>Currently<br>expanded<br>entity set<br>Virginia<br>. <br>Context Feature Selection step Entity selection step<br>Rank ensemble<br>Fig. 1: An example showing two steps in one iteration of SetExpan.<br>the context feature selection, each context feature is scored based on its strength<br>with currently expanded entities and top-ranked context features are selected. At<br>the entity selection step, multiple subsets of the selected representative context<br>features are sampled and each subset is used to obtain a ranked entity list.<br>Finally, all the ranked lists are collected to compute the final ranking list of each<br>candidate entity for expansion.<br>The major contributions of this paper are: (1) we propose an iterative set<br>expansion framework with a novel context feature selection approach, to handle<br>the issues of entity intrusion and semantic drift; (2) we develop an unsupervised<br>ranking-based ensemble algorithm for entity selection to make our system robust<br>and further reduce the impact of semantic drift. To evaluate the SetExpan method,<br>we use three publicly available datasets and manually label expanded results of<br>65 queries over 13 semantic classes. Empirical results show that SetExpan outperforms the state-of-the-art baselines in terms of Mean Average Precision. Code1<br>and datasets2 described in this paper are publicly.<br>2 Related Work<br>The problem of completing an entity set given several seed entities has attracted<br>extensive research efforts due to its practical importance. Google Sets [26] was<br>among the earliest work dealing with this problem. It used proprietary algorithms<br>and is no longer publicly accessible. Later, Wang and Cohen proposed SEAL<br>system [29], which first submits a query consisting of all seed entities into a<br>general search engine and then mines the top-ranked webpages. Recently, Chen<br>et al. [2] improved this approach by leveraging a “page-specific” extractor built in<br>a supervised manner and showed good performance on long-tail (i.e., rare) term<br>expansion. All these methods need an external search engine and require seedoriented data extraction. In comparison, our approach conducts corpus-based set<br>expansion without resorting to online data extraction from specific webpages.<br>1<br><a href="https://github.com/mickeystroller/SetExpan" target="_blank" rel="noopener">https://github.com/mickeystroller/SetExpan</a><br>2<br><a href="https://tinyurl.com/SetExpan-data" target="_blank" rel="noopener">https://tinyurl.com/SetExpan-data</a><br>4 J. Shen, Z. Wu, D. Lei, J. Shang, X. Ren, J. Han<br>To tackle the corpus-based set expansion problem, Ghahramani and Heller<br>[6] used a Bayesian method to model the probability that a candidate entity<br>belongs to some unknown cluster that contains the input seeds. Pantel et al.<br>[17] developed a web-scale set expansion pipeline by exploiting distributional<br>similarity on context words for each candidate entity. He et al. proposed the<br>SEISA system [10] that used query logs along with web lists as external evidence<br>besides free text, and designed an iterative similarity aggregation function for<br>set expansion. Recently, Wang et al. [28] leveraged web tables and showed very<br>competitive results when not only seed entities but also intended class name<br>were given. While these semi-structured lists and tables are helpful, they are<br>not always available for some specific domain corpus such as PubMed articles<br>or DBLP papers. Perhaps the most relevant work to ours is by Rong [21]. In<br>that paper, the authors used the skip-gram feature combined with additional<br>user-generated ontologies (i.e., Wikipedia list) for set expansion. However, they<br>targeted the multifaceted expansion and exploited all skip-gram features for<br>calculating the similarity because two entities. In our work, we keep the core<br>idea of distributional similarity but calculate such similarity using only carefully<br>selected denoised context features.<br>In a broader sense, our work is also related to information extraction and<br>named entity recognition. Without given enough training data, bootstrapped<br>entity extraction system [5][7][8] is the most popular and effective choice. At each<br>bootstrap iteration, the system will first create patterns around entities; score<br>patterns based on their ability to extract more positive entities and less negative<br>entities (if provided), and use top-ranked patterns to extract more candidate<br>entities. Multiple pattern scoring and entity scoring functions are proposed. For<br>example, Riloff et al. [20] scored each pattern by calculating the ratio of positive<br>entities among all entities extracted by it, and scored each candidate entity by the<br>number and quality of its matched patterns. Gupta et al. [7] scored patterns using<br>the ratio of scaled frequencies of positive entities among all entities extracted by<br>it. All these methods are heuristic and sensitive to different model parameters.<br>More generally, our work is also related to class label acquisition [24][30]<br>which aims to propagate class labels to data instances based on labeled training<br>examples, and entity clustering [1][12] where the goal is to find clusters of entities.<br>However, the class label acquisition methods require a much larger number of<br>training examples than the typical size of user input seed set, and the entity<br>clustering algorithms can only find semantically related entities instead of entities<br>strictly in the same semantic class.<br>3 Our Methodology: The SetExpan Framework<br>This section introduces first the context features and data model used by SetExpan<br>in Sect. 3.1 and then our context-dependent similarity measure in Sect. 3.2. It<br>then discusses how to select context features in Sect. 3.3 and presents our novel<br>unsupervised ranking-based ensemble method for entity selection in Sect. 3.4.<br>SetExpan 5<br>Location<br>city , <strong> , USA<br>US state of </strong> .<br>senator from <strong> ,<br>county , </strong> , on<br>Ontario<br>Texas<br>Illinois<br>Florida<br>Context features Entities<br>Illinois 2/6<br>Texas 2/6<br>Ontario 4<br>Entities Similarity<br>Similarity with entity “Florida”<br>based on all context features<br>Similarity with entity “Florida”<br>based on selected context features<br>pay <strong> sale tax . {“city , </strong> USA”, “US state of <strong> .”}<br>Ontario 0/2<br>Texas 2/2<br>Illinois 2/2<br>Entities Similarity<br>(a) (b)<br>Fig. 2: (a) A simplified bipartite graph data model. (b) Similarity with seed entity<br>conditioned on two different sets of context features.<br>3.1 Data Model and Context Features<br>We explore two types of context features obtained from the plain text: (1) skipgrams [21] and (2) coarse-grained types [8]. Data is modeled as a bipartite graph<br>(Figure 2(a)), with candidate entities on one side and their context features on<br>the other. Each type of context features are described as follows.<br>Skip-gram: Given a target entity ei<br>in a sentence, one of its skip-gram is “w−1<br>w1” where w−1 and w1 are two context words and ei<br>is replaced with a<br>placeholder. For example, one skip-gram of entity “Illinois” in sentence “We need<br>to pay Illinois sales tax.” is “pay sales”. As suggested in [21], we extract up to<br>six skip-grams of different lengths for one target entity ei<br>in each sentence. One<br>advantage of using skip-grams is that it imposes strong positional constraints.<br>Coarse-grained type: Besides the unstructured skip-gram features, we use<br>coarse-grained type to filter those obviously-wrong entities. For examples, when<br>we expand the “U.S. states”, we will not consider any entity that is typed “Person”.<br>After this process, we can obtain a cleaner subset of candidate entities. This<br>mechanism is also adopted in [8].<br>After obtaining the “nodes” in bipartite graph data model, we need to model<br>the edges in the graph. In this paper, we assign the weight between each pair of<br>entity e and context feature c using the TF-IDF transformation [21], which is<br>calculated as follows:<br>fe,c = log(1 + Xe,c)<br>“<br>log |E| − log X<br>e0<br>Xe0<br>,c!# , (1)<br>where Xe,c is the raw co-occurrence count between entity e and context feature<br>c, |E| is the total number of candidate entities. We refer to such scaling as<br>the TF-IDF transformation since it resembles the tf-idf scoring in information<br>retrieval if we treat each entity e as a “document” and each of its context feature<br>c as a “term”. Empirically, we find such weight scaling performs outperforms some<br>other alternatives such as point-wise mutual information (PMI) [10], truncated<br>PMI [15], and BM25 scoring [19].<br>6 J. Shen, Z. Wu, D. Lei, J. Shang, X. Ren, J. Han<br>3.2 Context-dependent Similarity<br>With the bipartite graph data model constructed, the task of expanding an entity<br>set at each iteration can be viewed as finding a set of entities that are most<br>“similar” to the currently expanded set. In this study, we use the weighted Jaccard<br>similarity measure. Specifically, given a set of context features F, we calculate<br>the context-dependent similarity as follows:<br>Sim(e1, e2|F) =<br>P<br>c∈F min(fe1,c, fe2,c)<br>P<br>c∈F max(fe1,c, fe2,c)<br>. (2)<br>Notice that if we change context feature set F, the similarity between entity pair<br>is likely to change, as demonstrated in the following example.<br>Example 1 Figure 2(a) shows a simplified bipartite graph data model where all<br>edge weights are equal to 1 (and thus omitted from the graph for clarity). The<br>entity “Florida” connects with all 6 different context features, while the entity<br>“Ontario” is associated with top 4 context features including 1 type feature and 3<br>skip-gram features. If we add all the 6 possible context features into the context<br>feature set F, the similarity between “Florida” and “Ontario” is 1+1+1+1<br>1+1+1+1+1+1 =<br>4<br>6<br>.<br>On the other hand, if we put only two context features “city , , USA”, “US<br>state of .” into F, the similarity between same pair of entities will change to<br>1+1<br>1+1 =<br>2<br>2<br>. Therefore, we refer such similarity as context-dependent similarity.<br>Finally, we want to emphasize that our proposed method is general in the sense<br>that other common similarity metrics such as cosine similarity can also be used.<br>In practice, we find the performance of a set expansion method depends not<br>really on the exact choice of base similarity metrics, but more on which contexts<br>are selected for calculating context-dependent similarity. Similar results were also<br>reported in a previous study [10].<br>3.3 Context Feature Selection<br>As shown in Example 1, the similarity between two entities really depends on<br>the selected feature set F. The motivation of context feature selection is to find<br>a feature subset F<br>∗ of fixed size Q that best “profiles” the target semantic class.<br>In other words, we want to select a feature set F<br>∗ based on which entities within<br>target class are most “similar” to each other. Given such F<br>∗<br>, the entity-entity<br>similarity conditioned on it can best reflect their distributional similarity with<br>regard to the target class. In some sense, such F<br>∗ best profiles the target semantic<br>class. Unfortunately, to find such F<br>∗ of fixed size Q, we need to solve the following<br>optimization problem which turns out to be NP-Hard, as shown in [3].<br>F<br>∗ = arg max<br>|F |=Q<br>X<br>|X|<br>i=1<br>X<br>|X|<br>j&gt;i<br>Sim(ei, ej |F), (3)<br>where X is the set of currently expanded entities. Initially, we treat the user<br>input seed set S as X. As iterations proceed, more entities will be added into X.<br>SetExpan 7<br>Given the NP-hardness of finding the optimal context feature set, we resort to<br>a heuristic method that first scores each context feature based on its accumulated<br>strength with entities in X and then selects top Q features with maximum scores.<br>This process is illustrated in the following example:<br>Example 2 For demonstration purpose, we again assume all edge weights in<br>Figure 2(a) are equal to 1 and let the currently expanded entity set X be {“Florida”,<br>“Texas”}. Suppose we want to select two “denoised” context features, we will first<br>score each context feature based on its associated entities in X. The top 4 contexts<br>will obtain a score 1 since they match only one entity in X with strength 1, and<br>the 2 contexts below will get a score 2 because they match both entities in X.<br>Then, we rank context features based on their scores and select 2 contexts with<br>highest scores: “city , , USA”, “US state of .” into F.<br>Finally, we want to emphasize two major differences of our context feature<br>selection method from other heuristic “pattern selection” methods. First, most<br>pattern selection methods require either users to explicitly provide the “negative”<br>examples for the target semantic class [11][8][22], or implicitly expand multiple<br>mutually exclusive classes in which instances in one class serve as negative<br>examples for all the other classes [4][15]. Our method requires only a small<br>number of “positive” examples. In most cases, it is hard for humans to find<br>good discriminative negative examples for one class, or to provide both mutually<br>exclusive and somehow related comparative classes. Second, the bootstrapping<br>method will add its selected “quality patterns” during each iteration into a quality<br>pattern pool, while our method will select high quality context features at each<br>iteration from scratch. If one noisy pattern is selected and added into the pool, it<br>will continue to introduce more irrelevant entities at all the following iterations.<br>Our method can avoid such noise accumulation.<br>3.4 Entity Selection via Rank Ensemble<br>Intuitively, the entity selection problem can be viewed as finding those entities<br>that are most similar to the currently expanded set X conditioned on the selected<br>context feature set F. To achieve this, we can rank each candidate entity based<br>on its score in eq. (4) and then add top-ranked ones into the expanded set:<br>score(e|X, F) = 1<br>|X|<br>X<br>e0∈X<br>Sim(e, e<br>0<br>|F). (4)<br>However, due to the ambiguity of natural language in free-text corpora, the<br>selected context feature set F may still be noisy in the sense that an irrelevant<br>entity is ranked higher than a relevant one. To further reduce such errors, we<br>propose a novel ranking-based ensemble method for entity selection.<br>The key insight of our method is that an inferior entity will not appear<br>frequently in multiple pre-ranked entity lists at top positions. Given a selected<br>context set F, we first use sampling without replacement method to generate T<br>subsets of context features Ft, t = 1, 2, . . . , T. Each subset is of size α|F| where α<br>8 J. Shen, Z. Wu, D. Lei, J. Shang, X. Ren, J. Han<br>USA 1/3<br>Quebec 1/3<br>Baja California 1/2<br>California 1/1 + 1/3<br>Florida 1/1 + 1/2<br>Arizona 1/2 + 1/1<br>Entities Score<br>Quebec 3<br>Arizona 2<br>California 1<br>Entities Rank<br>California 3<br>Baja California 2<br>Florida 1<br>Entities Rank<br>USA 3<br>Florida 2<br>Arizona 1<br>Entities Rank<br>Pre-ranked entity list 1<br>Pre-ranked entity list 2<br>Pre-ranked entity list 3<br>Final ranked list of entities<br>Denoised context sets F<br>city , </strong> , USA<br>US state of <strong> ,<br>pay </strong> sale tax .<br>Texas and <strong> ,<br>city , </strong> , USA<br>US state of <strong> ,<br>pay </strong> sale tax .<br>Context subset F2<br>city , <strong> , USA<br>pay </strong> sale tax .<br>Texas and <strong> ,<br>Context subset F3<br>US state of </strong> ,<br>pay <strong> sale tax .<br>Texas and </strong> ,<br>Context subset F1<br>Fig. 3: A toy example to show entity selection via rank ensemble.<br>is a model parameter within range [0, 1]. For each Ft, we can obtain a pre-ranked<br>list of candidate entities Lt based on score(e|X, Ft) defined in eq. (4). We use r<br>i<br>t<br>to denote the rank of entity ei<br>in list Lt. If entity ei does not appear in Lt, we<br>let r<br>i<br>t = ∞. Finally, we collect T pre-ranked lists and score each entity based on<br>its mean reciprocal rank (mrr). All entities with average rank above r, namely<br>mrr(e) ≤ T /r, will be added into entity set X.<br>mrr(ei) = XT<br>t=1<br>1<br>r<br>i<br>t<br>, r<br>i<br>t =<br>X<br>ej∈E<br>I (score(ei|X, Ft) ≤ score(ej |X, Ft)), (5)<br>where I(·) is the indicator function. Naturally, a relevant entity will rank at<br>top position in multiple pre-ranked lists and thus accumulate a high mrr score,<br>while an irrelevant entity will not consistently appear in multiple lists at high<br>position which leads to low mrr score. Finally, we use the following example to<br>demonstrate the whole process of entity selection.<br>Example 3 In Figure 3, we want to expand the “US states” semantic class given<br>a selected context feature set F with 4 features. We first sample a subset of 3 context<br>features F1 = {“city , , USA”, “US state of ,”, “pay sales tax .”}, and then<br>use F1 to obtain a pre-ranked entity list L1 = h“California”, “Arizona”, “Quebec”i.<br>By repeating this process three times, we get 3 pre-ranked lists and ensemble them<br>into a final ranked list in which entity “Arizona” is scored 1.5 because it is ranked<br>in the 2nd position in L1 and 1st position in L3. Finally, we add those entities<br>with mrr score larger than 1, meaning this entity is ranked at 3rd position on<br>average, into the expanded set X. In this simple example, the model parameters<br>T = 3, α =<br>|F1|<br>|F | = 0.75, and r = 3.<br>Put all together. Algorithm 1 summarizes the whole SetExpan process. The<br>candidate entity set E and bipartite graph data model G are pre-calculated and<br>stored. A user needs only to specify the seed set S and the expected size of output<br>set K. There is a total of 4 model parameters: the number of top quality context<br>SetExpan 9<br>Algorithm 1 SetExpan<br>1: Input: Candidate entity set E, initial seed set S, entity-context graph G, expected size of output<br>set K, model parameters {Q, T , α, r}.<br>2: Output: The expanded set X.<br>3: X = S.<br>4: while |X| ≤ K do<br>5: Set F = ∅ // Select denoised contexts from scratch<br>6: Score context features based on X and add top Q denoised contexts into F .<br>7: // Entity-selection via rank ensemble<br>8: for t = 1, 2, . . . , T do<br>9: Uniformly sample αQ contexts and construct feature subset Ft.<br>10: Score entities based on Eq. (4) given Ft and obtain the pre-ranked list Lt.<br>11: Update the mrr score of each entity based on Eq. (5).<br>12: end for<br>13: X = X ∪ {e|mrr(e) ≥ T<br>r<br>} // Add entities into expanded set X .<br>14: end while<br>15: Return X.<br>features selected in each iteration Q, the number of pre-ranked entity lists T, the<br>relative size of feature subset 0 &lt; α &lt; 1, and final mrr threshold r. The tuning<br>and sensitivity of these parameters will be discussed in the experiment section.<br>4 Experiments<br>4.1 Experimental Setup<br>Datasets preparation. SetExpan is a corpus-based entity set expansion system<br>and thus we use three corpora to evaluate its performance. Table 1 lists 3 datasets<br>we used in experiments. (1) APR is constructed by crawling all 2015 news articles<br>from AP and Reuters. (2) Wiki is a subset of English Wikipedia used in [13]. (3)<br>PubMed-CVD is a collection of research paper abstracts about cardiovascular<br>disease retrieved from PubMed.<br>For APR and PubMed-CVD datasets, we adopt a data-driven phrase mining<br>tool [14] to obtain entity mentions and type them using ClusType [18]. Each<br>entity mention is mapped heuristically to an entity based on its lemmatized<br>surface name. We then extract variable-length skip-grams for all entity mentions<br>as features for their corresponding entities, and construct the bipartite graph<br>data model as introduced in the previous section. For Wiki dataset, the entities<br>have already been extracted and typed using distant supervision. For the type<br>information in each dataset, there are 16 coarse-grained types in APR and 4<br>coarse-grained types in PubMed-CVD. For Wiki, since it originally has about 50<br>fine-grained types, which may reveal too much information, we manually mapped<br>them to 11 more coarse-grained types.<br>Query construction. A query is a set of seed entities of the same semantic<br>class in a dataset, serving as the input for each system to expand the set. The<br>process of query generation is as follows. For each dataset, we first extract 2000<br>most frequent entities in it and construct an entity list. Then, we ask three<br>volunteers to manually scan the entity lists and propose a few semantic classes<br>for each list. The proposed class should be interesting, relatively unambiguous<br>and has a reasonable coverage in its corresponding corpus. These semantic classes<br>10 J. Shen, Z. Wu, D. Lei, J. Shang, X. Ren, J. Han<br>Table 1: Datasets statistics and Query descriptions<br>Dataset FileSize #Sentences #Entities #Test queries<br>APR 775MB 1.01M 122K 40<br>Wiki 1.02GB 1.50M 710K 20<br>PubMed-CVD 9.3GB 23M 179K 5<br>cover a wide variety of topics, including locations, companies as well as political<br>parties, and have different degrees of difficulty for set expansion. After finalizing<br>the semantic classes for each dataset, the students randomly select entities of<br>each semantic class from the frequent entity list to form 5 queries of size 3. To<br>select the queries for PubMed-CVD, we seek help from two additional students<br>with biomedical expertise, following the same previous approach. Due to the large<br>size of PubMed-CVD dataset and runtime limitation, we only select 1 semantic<br>class (hormones) with 5 queries.<br>With all queries selected, we have humans to label all the classes and instances<br>returned by each of the following 7 compared methods. For APR and Wiki<br>datasets, the inter-rater agreements (kappa-value) over three students are 0.7608<br>and 0.7746, respectively. For PubMed-CVD dataset, the kappa-value is 0.9236.<br>All entities with conflicting label results are further resolved after discussions<br>among all human labelers. Thus, we have our ground truth datasets.<br>Compared methods. Since the focus on this work is the corpus-based set<br>expansion, we do not compare with other methods that require online data<br>extractions. Also, to further analyze the effectiveness of each module in SetExpan framework. We implement 3 variations of our framework.<br>– word2vec [16]: We use the “skip-gram” model in word2vec to learn the<br>embedding vector for each entity, and then return k nearest neighbors around<br>seed entities as the expanded set.<br>– PTE [25]: We first construct a heterogeneous information network including<br>entity, skip-gram features, and type features. PTE model is then applied to<br>learn the entity embedding which is used to determine the k nearest neighbors<br>around seed entities.<br>– SEISA [10]: An entity set expansion algorithm based on iterative similarity<br>aggregation. It uses the occurrence of entities in web list and query log as<br>entity features. In our experiments, we replace the web list and query log<br>with our skip-gram and coarse-grained context features.<br>– EgoSet [21]: A multifaceted set expansion system based on skip-gram features,<br>word2vec embeddings and WikiList. The original system is proposed to expand<br>a seed set to multiple entity sets, considering the ambiguities in seed set. To<br>achieve this, we use a community detection method to separate the extracted<br>entities into several communities. However, in order to better compare with<br>EgoSet, we carefully select queries that have little ambiguity or at least the<br>seed set in the query is dominating in one semantic class. Thus, we discard<br>the community detection part in EgoSet and treat all extracted entities as in<br>one semantic class.<br>SetExpan 11<br>Table 2: Overall end-to-end performance evaluation on 3 datasets over all queries.<br>Methods APR Wiki PubMed-CVD<br>MAP@10 MAP@20 MAP@50 MAP@10 MAP@20 MAP@50 MAP@10 MAP@20 MAP@50<br>EgoSet 0.3949 0.3942 0.3706 0.5899 0.5754 0.5622 0.0511 0.0410 0.0441<br>SEISA 0.7423 0.6090 0.3892 0.7643 0.6606 0.4998 - - -<br>word2vec 0.6054 0.5385 0.4180 0.7193 0.6289 0.4510 0.8427 0.7701 0.6895<br>PTE 0.3144 0.2777 0.1996 0.6817 0.5596 0.3839 0.9071 0.7654 0.5641<br>SetExpan−cs 0.8240 0.7997 0.7674 0.9540 0.8955 0.7439 1.000 1.000 0.5991<br>SetExpan−re 0.8509 0.7792 0.7681 0.9392 0.8680 0.7291 1.000 0.9605 0.7371<br>SetExpanful l 0.8967 0.8621 0.7885 0.9571 0.9010 0.7457 1.000 1.000 0.7454<br>– SetExpan−cs: Disable the context feature selection module in SetExpan, and<br>use all context features to calculate distributional similarity.<br>– SetExpan−re: Disable the rank ensemble module in SetExpan. Instead, we<br>use all selected context feature to rank candidate entities at one time and<br>add top-ranked ones into the expanded set.<br>– SetExpanful l: The full version of our proposed method, with both context<br>feature selection and rank ensemble components enabled.<br>For fair comparison, we try different combinations of parameters and report the<br>best performance for each baseline method.<br>Evaluation Metrics. For each test case, the input is a query, which is a set<br>of 3 seed entities of the same semantic class. The output will be a ranked list of<br>entities. For each query, we use the conventional average precision APk(c, r) at k<br>(k = 10, 20, 50) for evaluation, given a ranked list of entities c and an unordered<br>ground-truth set r. For all queries under a semantic class, we calculate the mean<br>average precision (MAP) at k as 1<br>N<br>P<br>i APk(ci<br>, r), where N is the number of<br>queries. To evaluate the performance of each approach on a specific dataset,<br>we calculate the mean-MAP (MMAP) at k over all queried semantic classes as<br>MMAPk =<br>1<br>T<br>PT<br>t=1[( 1<br>Nt<br>)<br>P<br>i APk(cti, rt)], where T is the number of semantic<br>classes, Nt is the number of queries of t-th semantic class, cti is the extracted<br>entity list for i-th query for t-th semantic class, and rt is the ground truth set<br>for t-th semantic class.<br>4.2 Experimental Results<br>Comparison with four baseline methods. Table 2 shows the MMAP scores<br>of all methods on 3 datasets3<br>. We can see the MMAP scores of SetExpan outperforms all four baselines a lot. We further look at their performances on each<br>concept class, as shown in Figure 4. We can see that the performance of these<br>baseline methods varies a lot on different semantic classes, while our SetExpan can<br>consistently beat them. One reason is that none of these methods applies context<br>feature selection or rank ensemble, and a single set of unpruned features can lead<br>to various levels of noise in the results. Another reason is the lack of an iterative<br>mechanism in some of those approaches. For example, even if EgoSet includes<br>3 Results of SEISA on PubMed-CVD are omitted due to the scalability issue.<br>12 J. Shen, Z. Wu, D. Lei, J. Shang, X. Ren, J. Han<br>0.0<br>0.2<br>0.4<br>0.6<br>0.8<br>1.0<br>MAP@50<br>PTE<br>word2vec<br>EgoSet<br>SEISA<br>SetExpan-re<br>SetExpan-cs<br>SetExpan-full<br>(a) APR Country<br>0.0<br>0.2<br>0.4<br>0.6<br>0.8<br>1.0<br>MAP@50<br>PTE<br>word2vec<br>EgoSet<br>SEISA<br>SetExpan-re<br>SetExpan-cs<br>SetExpan-full<br>(b) APR Law<br>0.0<br>0.2<br>0.4<br>0.6<br>0.8<br>1.0<br>MAP@50<br>PTE<br>word2vec<br>EgoSet<br>SEISA<br>SetExpan-re<br>SetExpan-cs<br>SetExpan-full<br>(c) APR Party<br>0.0<br>0.2<br>0.4<br>0.6<br>0.8<br>1.0<br>MAP@50<br>PTE<br>word2vec<br>EgoSet<br>SEISA<br>SetExpan-re<br>SetExpan-cs<br>SetExpan-full<br>(d) Wiki Sport League<br>0.0<br>0.2<br>0.4<br>0.6<br>0.8<br>1.0<br>MAP@50<br>PTE<br>word2vec<br>EgoSet<br>SEISA<br>SetExpan-re<br>SetExpan-cs<br>SetExpan-full<br>(e) Wiki TV Channel<br>0.0<br>0.2<br>0.4<br>0.6<br>0.8<br>1.0<br>MAP@50<br>PTE<br>word2vec<br>EgoSet<br>SEISA<br>SetExpan-re<br>SetExpan-cs<br>SetExpan-full<br>(f) Wiki China Province<br>Fig. 4: Evaluation results for each semantic class.<br>the results from word2vec to help it boost the performance, it still achieves low<br>MAP scores in some semantic classes. Finding the nearest neighbors in only one<br>iteration can be a key reason. And although SEISA is applying the iterative<br>technique, instead of adding a small number of new entities in each iteration, it<br>expands a full set in each iteration based on the coherence score of each candidate<br>entity with the previously expanded set. It pre-calculates the size of the expanded<br>set with the assumption that the feature similarities follow a certain distribution,<br>which does not always hold to all datasets or semantic classes. Thus, if the size is<br>far different from the actual size or is too big to extract a confident set at once,<br>each iteration will introduce a lot of noise and cause semantic drift.<br>Comparison with SetExpan−re and SetExpan−cs<br>. At the dataset level,<br>the MMAP scores of SetExpanful l outperforms its two variation approaches. In<br>the semantic class level, we can see that SetExpan−re and SetExpan−cs sometimes<br>have their MAP much lower than SetExpanful l while sometimes they almost<br>achieve the same performance with SetExpanful l. This means they fail to stably<br>extract entities with good quality. The main reason is still that a single set of<br>features or ensembles over unpruned features can lead to various levels of noise<br>in the results. Only under the circumstances that the single set of features or the<br>unpruned features happen to be nicely selected without too much noise, which<br>tends to happen when the query is relatively “easy”, these variation approaches<br>can achieve good results.<br>Effects of Context Feature Selection. We already see that adding the<br>context feature selection component helps improve the performance. What’s also<br>noticeable is that the addition of context selection process becomes more obvious<br>as the size of the corpus increases. The difference between MMAP scores of<br>SetExpan 13<br>0.0 0.2 0.4 0.6 0.8 1.0<br>Recall<br>0.0<br>0.2<br>0.4<br>0.6<br>0.8<br>1.0<br>Precision<br>PTE<br>word2vec<br>EgoSet<br>SEISA<br>SetExpan-re<br>SetExpan-cs<br>SetExpan-full<br>(a) APR Country<br>0.0 0.2 0.4 0.6 0.8 1.0<br>Recall<br>0.0<br>0.2<br>0.4<br>0.6<br>0.8<br>1.0<br>Precision<br>PTE<br>word2vec<br>EgoSet<br>SEISA<br>SetExpan-re<br>SetExpan-cs<br>SetExpan-full<br>(b) APR Law<br>0.0 0.2 0.4 0.6 0.8 1.0<br>Recall<br>0.0<br>0.2<br>0.4<br>0.6<br>0.8<br>1.0<br>Precision<br>PTE<br>word2vec<br>EgoSet<br>SEISA<br>SetExpan-re<br>SetExpan-cs<br>SetExpan-full<br>(c) APR Party<br>0.0 0.2 0.4 0.6 0.8 1.0<br>Recall<br>0.0<br>0.2<br>0.4<br>0.6<br>0.8<br>1.0<br>Precision<br>PTE<br>word2vec<br>EgoSet<br>SEISA<br>SetExpan-re<br>SetExpan-cs<br>SetExpan-full<br>(d) Wiki Sport League<br>0.0 0.2 0.4 0.6 0.8 1.0<br>Recall<br>0.0<br>0.2<br>0.4<br>0.6<br>0.8<br>1.0<br>Precision<br>PTE<br>word2vec<br>EgoSet<br>SEISA<br>SetExpan-re<br>SetExpan-cs<br>SetExpan-full<br>(e) Wiki TV Channel<br>0.0 0.2 0.4 0.6 0.8 1.0<br>Recall<br>0.0<br>0.2<br>0.4<br>0.6<br>0.8<br>1.0<br>Precision<br>PTE<br>word2vec<br>EgoSet<br>SEISA<br>SetExpan-re<br>SetExpan-cs<br>SetExpan-full<br>(f) Wiki China Province<br>Fig. 5: Evaluation results for each concept class on individual query<br>SetExpan−cs and SetExpanful l is much larger in PubMed-CVD compared with<br>APR and Wiki datasets. This is because that as the corpus size increases, we will<br>have more noisy features and more candidate entities while the good features to<br>define the target entity set may be limited. Thus, without context selection, noise<br>can damage the performance much more. The evidence can also be found from the<br>performance of EgoSet across the three datasets. It can achieve reasonably good<br>results in APR and Wiki, however, it performs much worse in PubMed-CVD.<br>Effect of Rank Ensemble. From the above experiments, the effect of rank<br>ensemble has variance across the different semantic classes, however, it seems<br>to be more stable across datasets, compared with the effect of context selection.<br>This is because we apply the default set of parameter values in each test case<br>above. In the parameter analysis part, we will show that the number of ensemble<br>batches and the percentage of features to be randomly sampled can affect the<br>contribution of rank ensemble to the set expansion performance.<br>Parameter Analysis. There are totally 4 parameters in SetExpan – Q (the<br>number of selected context features), α (the percentage of features to be sampled),<br>T (the number of ensemble batches), and r (the threshold of a candidate entity’s<br>average rank). We study the influence of each parameter by fixing all other<br>parameters to default values, and present one graph showing the MMAP scores<br>of SetExpan on APR dataset versus the changes of that parameter.<br>– α: From the graph, the performance increases sharply as α increases until it<br>reaches about 0.6. Then, it starts to stay stable and decreases after 0.7.<br>– Q: In the range of 50 - 150, the performance increases sharply as Q increases,<br>which means the majority of top 150 context features can provide rich<br>information to identify entities belonging to the target semantic class. The<br>14 J. Shen, Z. Wu, D. Lei, J. Shang, X. Ren, J. Han<br>0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0<br>alpha<br>0.0<br>0.2<br>0.4<br>0.6<br>0.8<br>1.0<br>MAP<br>MAP@50<br>MAP@20<br>MAP@10<br>(a) α<br>40 60 80 100 120<br>T<br>0.0<br>0.2<br>0.4<br>0.6<br>0.8<br>1.0<br>MAP<br>MAP@50<br>MAP@20<br>MAP@10<br>(b) T<br>50 100 150 200 250 300 350 400<br>Q<br>0.0<br>0.2<br>0.4<br>0.6<br>0.8<br>1.0<br>MAP<br>MAP@50<br>MAP@20<br>MAP@10<br>(c) Q<br>3 4 5 6 7 8 9 10<br>r<br>0.0<br>0.2<br>0.4<br>0.6<br>0.8<br>1.0<br>MAP<br>MAP@50<br>MAP@20<br>MAP@10<br>(d) r<br>Fig. 6: Parameter Sensitivity on two datesets<br>available information gets more and more saturated after Q reaches 150 and<br>start to introduce noises and hamper the performance after around 300.<br>– r: Our experiments show that the performance is not very sensitive to the<br>threshold of a candidate entity’s average rank.<br>– T: The performance keeps increasing as we increase the ensemble batches,<br>due to the robustness to noise of ensembling. The performance becomes more<br>stable after 60 batches.<br>Case Studies. Figure 7 presents three case studies for SetExpan. We show<br>one query for each dataset. In each case, we show top 3 ranked entities and<br>top/bottom 3 skip-gram features after context feature selection for the first 3<br>iterations as well as the coarse-grained type. In all cases, our algorithm successfully<br>extracts correct entities in each iteration, and the top-ranked skip-grams are<br>representative in defining the target semantic class. On the other hand, we<br>notice that most of the bottom 3 skip-grams selected are very general or not<br>representative at all. These context features could potentially introduce noisy<br>entities and thus the rank ensemble can play a rival role in improving the results.<br>5 Conclusion and Future Work<br>In this paper, we study the problem of corpus-based set expansion. First, we<br>propose an iterative set expansion framework with a context feature selection<br>method, to deal with the problem of entity intrusion and semantic drift. Second,<br>we develop a novel unsupervised ranking-based ensemble algorithm for entity<br>selection, to further reduce context noise in free-text corpora. Experimental<br>results on three publicly available datasets corroborate the effectiveness and<br>robustness of our proposed SetExpan.<br>The proposed framework is general and can incorporate other context features<br>besides skip-grams, such as Part-Of-Speech tags or syntactic head tokens. Besides,<br>it would be interesting to study more rank ensemble methods for aggregating<br>multiple pre-ranked lists. In addition, our current framework treats each feature<br>independently, it would be interesting to study how the interaction of context<br>features can influence the expansion result. We leave it for future work.<br>Acknowledgments. Research was sponsored in part by the U.S. Army Research<br>Lab. under Cooperative Agreement No. W911NF-09-2-0053 (NSCTA), National<br>SetExpan 15<br>APR<br>Dataset<br>PubMed<br>-CVD<br>Wiki Organization<br>Coarsegrained<br>type<br>Proteins<br>and<br>Genes<br>(PRGE)<br>Event<br>Iteration 1:<br>Top 3: “the <strong> provisions”, “provisions of the </strong>”, “defund <strong> .”<br>Bottom 3: “2010 </strong> ,”, “also known as <strong> .”, “under the </strong> , and”<br>Iteration 2:<br>Top 3: “under the <strong> to”, “provisions of the </strong> ,”, “the <strong> into law.”<br>Bottom 3: “the </strong> - which has”, “the _The House”, “the _ , first”<br>Iteration 3:<br>Top 3: “under the <strong> to”, “Under the </strong> ,”, “the <strong> into law”<br>Bottom 3: “of the </strong> passed”, “the <strong> , the most”, “replacing </strong> .”<br>Top/Bottom skip-gram features<br>selected in first 3 iterations<br>Iteration 1:<br>Top 3: “stimulating hormone ( <strong> )“, “hormone ( </strong> ) ,”, “hormone ( <strong> ) and”,<br>…<br>Bottom 3: “g/L , </strong> =”, “, <strong> and prolactin”, “hormone ( </strong> ) -”<br>Iteration 2:<br>Top 3: “hormone ( <strong> ) ,”, “hormone ( </strong> ) and”, “hormone ( <strong> ) .”, …<br>Bottom 3: “, </strong> , estradiol ,”, “, <strong> , and PRL”, “hormone ( </strong> ) -”<br>Iteration 3:<br>Top 3: “hormone ( <strong> ) ,”, “hormone ( </strong> ) and”, “hormone ( <strong> ) .”, …<br>Bottom 3: “( </strong> ) and insulin-like”, “, TSH , <strong> ,”, “levels of </strong> , FSH”<br>Iteration 1:<br>Top 3: “telecast on <strong> .”, “televised on </strong> .”, “televised by <strong> .”<br>Bottom 3: “on </strong> , to the”, “, and perhaps <strong> .”, “from an </strong> website”<br>Iteration 2:<br>Top 3: “the <strong> sitcom”, “the </strong> television network”, “ABC , <strong> ,”<br>Bottom 3: “on </strong> on September”, “broadcast on <strong> on”, “the </strong> soap opera<br>The”<br>Iteration 3:<br>Top 3: “the <strong> sitcom”, “the </strong> soap”, “the <strong> soap opera”, …<br>Bottom 3: “aired on </strong> between”, “of the <strong> show”, “on the </strong> crime”<br>Iteration 1:<br>LH, GH, ACTH, …<br>Iteration 2:<br>LHRH, AMH, GHRH, …<br>Iteration 3:<br>Renin, GnRH-I, AVP, …<br>{FSH,<br>TSH,<br>MSH}<br>Iteration 1:<br>ABC, CBS, NBC, …<br>Iteration 2:<br>BBC, ITV, Channel 4, …<br>Iteration 3:<br>TBS, ITV1, BBC Two, …<br>{ESPN,<br> ESPN2,<br>Spike TV}<br>{Patriot Act,<br>Obamacare,<br>Clery Act}<br>Iteration 1:<br>USA Patriot Act, USA Freedom Act,<br>Voting Rights Act, …<br>Iteration 2:<br>Stock Act, Religious Freedom<br>Restoration Act, Foreign Intelligence<br>Surveillance Act, …<br>Iteration 3:<br>Americans with Disabilities Act, Healthy<br>Families Act, Goonda Act, …<br>Top ranked entities<br>in first 3 iterations Query<br>Fig. 7: Three case studies on each dataset.<br>Science Foundation IIS-1320617, IIS 16-18481, and NSF IIS 17-04532, and grant<br>1U54GM114838 awarded by NIGMS through funds provided by the trans-NIH<br>Big Data to Knowledge (BD2K) initiative (www.bd2k.nih.gov).<br>References</p><ol><li>R. Balasubramanyan, B. B. Dalvi, and W. W. Cohen. From topic models to semisupervised learning: Biasing mixed-membership models to exploit topic-indicative<br>features in entity clustering. In ECML/PKDD, 2013.</li><li>Z. Chen, M. Cafarella, and H. Jagadish. Long-tail vocabulary dictionary extraction<br>from the web. In WSDM, pages 625–634. ACM, 2016.</li><li>F. Chierichetti, R. Kumar, S. Pandey, and S. Vassilvitskii. Finding the jaccard<br>median. In SODA, 2010.</li><li>J. R. Curran, T. Murphy, and B. Scholz. Minimising semantic drift with mutual<br>exclusion bootstrapping. 2007.</li><li>O. Etzioni, M. J. Cafarella, D. Downey, A.-M. Popescu, T. Shaked, S. Soderland,<br>D. S. Weld, and A. Yates. Unsupervised named-entity extraction from the web: An<br>experimental study. Artif. Intell., 165:91–134, 2005.</li><li>Z. Ghahramani and K. A. Heller. Bayesian sets. In NIPS, 2005.</li><li>S. Gupta, D. L. MacLean, J. Heer, and C. D. Manning. Research and applications: Induced lexico-syntactic patterns improve information extraction from online<br>medical forums. JAMIA, 21:902–909, 2014.</li><li>S. Gupta and C. D. Manning. Improved pattern learning for bootstrapped entity<br>extraction. In CoNLL, pages 98–108, 2014.</li><li>S. Gupta and C. D. Manning. Distributed representations of words to guide<br>bootstrapped entity classifiers. In HLT-NAACL, 2015.<br>16 J. Shen, Z. Wu, D. Lei, J. Shang, X. Ren, J. Han</li><li>Y. He and D. Xin. Seisa: set expansion by iterative similarity aggregation. In<br>WWW, 2011.</li><li>P. Jindal and D. Roth. Learning from negative examples in set-expansion. In 2011<br>IEEE 11th International Conference on Data Mining, 2011.</li><li>D. Lin and X. Wu. Phrase clustering for discriminative learning. In ACL/IJCNLP,<br>2009.</li><li>X. Ling and D. S. Weld. Fine-grained entity recognition. In AAAI, 2012.</li><li>J. Liu, J. Shang, C. Wang, X. Ren, and J. Han. Mining quality phrases from<br>massive text corpora. In SIGMOD, pages 1729–1744. ACM, 2015.</li><li>T. McIntosh and J. R. Curran. Weighted mutual exclusion bootstrapping for<br>domain independent lexicon and template acquisition. 2008.</li><li>T. Mikolov, I. Sutskever, K. Chen, G. S. Corrado, and J. Dean. Distributed representations of words and phrases and their compositionality. CoRR, abs/1310.4546,<br>2013.</li><li>P. Pantel, E. Crestan, A. Borkovsky, A.-M. Popescu, and V. Vyas. Web-scale<br>distributional similarity and entity set expansion. In EMNLP, 2009.</li><li>X. Ren, A. El-Kishky, C. Wang, F. Tao, C. R. Voss, and J. Han. Clustype: Effective<br>entity recognition and typing by relation phrase-based clustering. In WWW, pages<br>995–1004. ACM, 2015.</li><li>X. Ren, Y. Lv, K. Wang, and J. Han. Comparative document analysis for large<br>text corpora. CoRR, abs/1510.07197, 2017.</li><li>E. Riloff. Automatically generating extraction patterns from untagged text. In<br>AAAI/IAAI, Vol. 2, 1996.</li><li>X. Rong, Z. Chen, Q. Mei, and E. Adar. Egoset: Exploiting word ego-networks and<br>user-generated ontology for multifaceted set expansion. In WSDM, pages 645–654.<br>ACM, 2016.</li><li>B. Shi, Z. Zhang, L. Sun, and X. Han. A probabilistic co-bootstrapping method for<br>entity set expansion. In COLING, 2014.</li><li>S. Shi, H. Zhang, X. Yuan, and J.-R. Wen. Corpus-based semantic class mining:<br>Distributional vs. pattern-based approaches. In COLING, 2010.</li><li>P. P. Talukdar, J. Reisinger, M. Pasca, D. Ravichandran, R. Bhagat, and F. Pereira.<br>Weakly-supervised acquisition of labeled class instances using graph random walks.<br>In EMNLP, 2008.</li><li>J. Tang, M. Qu, and Q. Mei. Pte: Predictive text embedding through large-scale<br>heterogeneous text networks. In KDD, pages 1165–1174. ACM, 2015.</li><li>S. Tong and J. Dean. System and methods for automatically creating lists, 2008.<br>US Patent 7,350,187.</li><li>P. Velardi, S. Faralli, and R. Navigli. Ontolearn reloaded: A graph-based algorithm<br>for taxonomy induction. Computational Linguistics, 39(3):665–707, 2013.</li><li>C. Wang, K. Chakrabarti, Y. He, K. Ganjam, Z. Chen, and P. A. Bernstein. Concept<br>expansion using web tables. In WWW, 2015.</li><li>R. C. Wang and W. W. Cohen. Language-independent set expansion of named<br>entities using the web. In ICDM, 2007.</li><li>Y.-Y. Wang, R. Hoffmann, X. Li, and J. Szymanski. Semi-supervised learning of<br>semantic classes for query understanding: from the web and for the web. In CIKM,<br>2009.</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>41.Trapping Rain Water</title>
      <link href="/2019/04/19/42-Trapping-Rain-Water/"/>
      <url>/2019/04/19/42-Trapping-Rain-Water/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given <em>n</em> non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.</p><p><img src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png" alt><br>The above elevation map is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped. <strong>Thanks Marcos</strong> for contributing this image!</p><a id="more"></a><p><strong>Example:</strong></p><pre><code>Input: [0,1,0,2,1,0,1,3,2,1,2,1]Output: 6</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>待补充。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> hard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件架构扫盲</title>
      <link href="/2019/04/18/Software-architecture/"/>
      <url>/2019/04/18/Software-architecture/</url>
      
        <content type="html"><![CDATA[<p>面试被问到对架构的理解。老实说，我对这一块本来没有深入思考过。</p><p>之前常常集中精力在一些具体理论或者工具上，对架构这一块的了解仅限于感性意识——即，我知道有这样的理论和结构，但是无法清晰地描述它。</p><p>所以借此机会，在网上找了一些资料，了解了一下现代主流的软件架构。</p><p>本文主要基于O’Relly出版的一本介绍软件架构的<a href="https://www.oreilly.com/programming/free/files/software-architecture-patterns.pdf" target="_blank" rel="noopener">免费小册子</a>。</p><a id="more"></a><p>在介绍架构之前，首先引入评价架构的指标：</p><h3 id="架构评价指标"><a href="#架构评价指标" class="headerlink" title="架构评价指标"></a>架构评价指标</h3><ul><li>是否易于部署</li><li>是否易于拓展和修改功能</li><li>是否易于测试</li><li>是否易于伸缩</li><li>是否易于开发</li></ul><p>下面介绍5种架构，并且会针对这些指标，给出关于这些架构的评价。</p><h3 id="分层架构LA"><a href="#分层架构LA" class="headerlink" title="分层架构LA"></a>分层架构LA</h3><p>这是最常见的软件架构，常见分层为4层：展示层，业务层，持久层，和数据库层。</p><p>每一层之间通过接口相连接。比如，用户访问网页并登陆，经过登陆逻辑，继续往下验证输入的用户名和密码，在数据库层获取数据后在后台验证，返回验证结果并显示在前端界面。用户请求将会被每一层处理。</p><p><img src="/2019/04/18/Software-architecture/layer.jpg" alt></p><p>这个结构的特性很好理解，就如神经网络每一层之间的关系，上一层的输出被当作下一层的输入。缺陷也是显而易见的：耦合度比较高，层与层之间必须接口一致（像神经网络，的层间的输入输出维度必须一致）。</p><p>有些分层模型会适当地开放一些层，使得层与层之间可以跨越式访问，但是这样做会让层次之间联系变得更为复杂，提高了耦合度。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>每层可以单独测试，因为有完整的接口。</li><li>分工简单，因为每个团队（个人）只需要做和他关系最大的那一块就可以。主流的”前端”、”后端”都是根据层来划分技术人员的。</li><li>开发比较容易，只需要面向接口编程就可以了。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>性能比较差。每个用户请求都需要穿越所有的层。</li><li>维护困难。当我修改数据库层或者展现层的时候，就意味着可能上一层或者下一层需要变动，而发生变动的时候需要将服务停止运行。过高的耦合度使得软件变得牵一发而动全身。</li><li>拓展性不好。同上一点，需要添加或者删减一个功能的时候，都会带来所有层的影响。</li><li>部署不灵活。因为分层架构缺一不可，需要完整地部署整个项目，确保每个层都完成部署才能上线。</li></ul><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>常见的网页开发（如普通的课程项目<em>图书管理系统</em>）=前端+后端+数据库。</p><h3 id="事件驱动架构EDA"><a href="#事件驱动架构EDA" class="headerlink" title="事件驱动架构EDA"></a>事件驱动架构EDA</h3><p>高度解耦合的架构，适应性很高。包括中介拓扑结构和代理拓扑结构。</p><h4 id="中介拓扑结构Mediator"><a href="#中介拓扑结构Mediator" class="headerlink" title="中介拓扑结构Mediator"></a>中介拓扑结构Mediator</h4><p>处理事件主要包含的环节：</p><ul><li>事件队列Event Queue：所有事件发生之后会进入队列。队列可以有多个。</li><li>事件调停器Event Mediator：调停器通过拓扑排序等手段确定事件的执行顺序并进行处理（以及并行or串行）</li><li>事件管道Event Channel：调停器运输经过处理后的事件到处理器的路径</li><li>事件处理器Event Processor：事件的终点，负责响应事件。负责独立运作，完成单一的工作。</li></ul><p>⚠️注意，事件处理器收到的事件和在消息队列的事件不是同一个概念。它们有关联，但是后者是调停器生成的，和初始事件不完全一样。</p><p>以搬家举例，搬家是初始事件，当调停器通过事件队列收到事件之后，将其分解为多个子事件（搬家当然有很多事情需要做，比如联系方式、通知保险公司等等）。</p><p>此时，这些新的子事件就会被分配到相应的处理器进行响应。</p><p><img src="/2019/04/18/Software-architecture/2-2.png" alt></p><h4 id="代理拓扑结构Broker"><a href="#代理拓扑结构Broker" class="headerlink" title="代理拓扑结构Broker"></a>代理拓扑结构Broker</h4><p>在代理拓扑结构中，核心的调停器被去除，而是由事件处理器代为转发给下一个事件处理器（如同接力赛跑）。如果这一块不是分内之事，就不操作，转发就可以。</p><p>这一个架构的场景是需要处理的事件逻辑都比较简单，没有很复杂的依赖关系（这是我的理解）。</p><p>由于没有中间的过程，效率会高一些。相当于把分解过程由处理器代劳了，有点去中心化的味道。</p><p>还是以搬家的事件为例说明：</p><p><img src="/2019/04/18/Software-architecture/2-4.png" alt></p><h4 id="另一种架构：Proxy"><a href="#另一种架构：Proxy" class="headerlink" title="另一种架构：Proxy"></a>另一种架构：Proxy</h4><p>这一个说实话我本来没注意到，以为是和代理broker差不多（毕竟proxy也是代理的意思）。</p><p>看到描述，引用在这里。暂时看不明白。<a href="https://github.com/hehonghui/android-tech-frontier/blob/master/software-architecture-patterns/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F.md#appendix" target="_blank" rel="noopener">出处</a></p><blockquote><ul><li>如果我们使用 proxy，那就意味着我自己对需要处理的事件进行了分解，然后把不同的子事件一一委托给不同的 proxy，由被委托的 proxy 帮我完成子事件，从而完成我要做的事件。</li></ul></blockquote><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul><li>便于部署。因为每个处理器是独立的，可以单独部署。当然，如果使用的是中介拓扑结构，那会稍微麻烦一些——修改处理器的同时需要同时修改中介，即调度器。</li><li>性能高。异步处理事件（交付后不必等待其完成处理即可返回），相当于并行操作，提高效率。</li><li>可拓展性强。相比层级结构，易于添加功能。</li></ul><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul><li>实现比较复杂。事件是异步分发处理的。</li><li>难以测试。主要来自其异步的特点。</li></ul><blockquote><p>使用事件驱动架构模式最困难的地方就在于架构的创建、维护、以及对事件处理器的管理。通常每一个事件都拥有其指定的事件处理协议（例如：传递给事件处理器的数据类型、数据格式），这就使得设下标准的数据格式成为使用事件驱动架构模式中至关重要的一环（例如：XML，JSON，Java 对象，等等……），并在架构创建之初就为这些数据格式授权，以便处理。</p></blockquote><h3 id="微核架构MKA"><a href="#微核架构MKA" class="headerlink" title="微核架构MKA"></a>微核架构MKA</h3><p>看到这个就想起操作系统的位内核架构，其实两个差不多——不如说微内核的操作系统也属于一种微核架构的实践？hhh。</p><p>如同微内核操作系统的结构，内核部分只需要提供一个最基本功能的实现即可；而需要什么功能，做相应插件就能够实现。原则上插件相互独立，不应过于依赖彼此，通信也应该少一些。</p><p><img src="/2019/04/18/Software-architecture/microKernal.png" alt></p><blockquote><p>微内核架构是可以被嵌入到其他架构（如层级架构）中间的。</p></blockquote><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul><li>功能拓展性好，需要什么功能开发插件就可以。</li><li>部署较方便，同样是因为插件的特性，可以独立加载或者卸载。</li><li>可定制性高，需要什么就加什么。</li><li>可以渐进式开发。</li></ul><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul><li>内核系统难以做成分布式，只能以独立单元存在。</li><li>开发难度较高。需要设计插件的注册机制，插件与内核通信等等（其实应该是因为这一个领域做的不多？）。</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>说到插件，就自然联想到常见的各种IDE、浏览器了。</p><h3 id="微服务架构MSA"><a href="#微服务架构MSA" class="headerlink" title="微服务架构MSA"></a>微服务架构MSA</h3><p>这一个架构是从SOA（面向服务的架构）发展而来的——SOA也是一种架构，和微服务架构大体相似，也是将功能独立成各种单元，通过良好的接口定义连接起来。与原先的宏模式相比，强调了松耦合和组件化的特征。</p><p>微服务架构将应用的服务分解成不同模块，以管道和用户界面通信。微服务架构模式的另一个关键概念是它是一个<em>分布式</em>的架构，所以所有组件之间是完全解耦的，用户界面层通过某种远程访问协议（如，JMS, AMQP, REST, SOAP, RMI等）进行访问。</p><p>REST、SOAP比较常见，在这里简单介绍一下：</p><ul><li>REST是基于http+json格式传输信息的协议。</li><li>SOAP是基于http+XML格式传输信息的协议。</li></ul><p><img src="/2019/04/18/Software-architecture/4-1.png" alt></p><h4 id="模式的拓扑结构"><a href="#模式的拓扑结构" class="headerlink" title="模式的拓扑结构"></a>模式的拓扑结构</h4><ol><li>基于REST的API拓扑，使用者多为网站，采用粒度非常小的服务分解，每一个小的服务对应一个极小的API。</li><li>基于REST的拓扑，类似上一类，但是将多个REST的API结构进行整合成一个大的REST服务组件。</li><li>集中式拓扑，采用一个代理层分析请求并实现操作。主要是用在控制逻辑比较复杂的场合。</li></ol><p>⚠️注意，使用REST的时候需要合理划分粒度和服务，减少耦合依赖和重复。</p><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ul><li>易于部署。由于服务比较独立，一般采用分布式组件，可以单独部署。由于改变某个组件被隔离，所以避免了月末的爆炸性增长部署工作。</li><li>易于测试。由于服务独立，所以可以分开测试。</li><li>伸缩性好，也就是可以适应不同规模。</li><li>易于开发，因为单个组件功能简单且不会互相影响，所以协调工作减少。</li></ul><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><ul><li>性能较低。分布式特性不适合高性能要求的程序。</li></ul><h3 id="基于空间的架构——云架构SBA"><a href="#基于空间的架构——云架构SBA" class="headerlink" title="基于空间的架构——云架构SBA"></a>基于空间的架构——云架构SBA</h3><blockquote><p>大多数基于网站的商务应用都遵循相同的请求流程：一个请求从浏览器发到web服务器，然后到应用服务器，然后到数据库服务器。虽然这个模式在用户数不大的时候工作良好，但随着用户负载的增加,瓶颈会开始出现，首先出现在web服务器层，然后应用服务器层，最后数据库服务器层。</p><p>通常的解决办法就是<strong>向外扩展</strong>，也就是增加web服务器数量。这个方法相对来说简单和廉价，并能够解决问题。然而扩展应用服务器会更复杂，而且成本更高，并且又只是把问题移动到了数据库服务器，那会更复杂，更贵。</p><p>就算你能扩展数据库服务器，你最终会陷入一个金字塔式的情形，在金字塔最下面是web服务器，它会出现最多的问题，但也最好伸缩。金字塔顶部是数据库服务器，问题不多，但最难伸缩。</p></blockquote><p>从上述描述看来，高并发系统需要解决的主要问题在于数据库服务器较差的伸缩性。</p><p>基于空间的架构模型是专门为了<strong>解决伸缩性和并发问题</strong>而设计的。它对于用户数量不可预测且数量级经常变化的情况同样适用。在架构级别来解决这个伸缩性问题通常是比增加服务器数量或者提高缓存技术更好的解决办法。</p><p>主要包括处理单元和虚拟中间件。</p><p>说实话，从这里开始我已经看不懂了。先贴图，日后看懂了再解释吧……</p><ul><li>处理单元</li><li>虚拟中间件<ul><li><strong>消息中间件</strong>（Messaging Grid）：管理用户请求和session，当一个请求进来以后，决定分配给哪一个处理单元。</li><li><strong>数据中间件</strong>（Data Grid）：将数据复制到每一个处理单元，即数据同步。保证某个处理单元都得到同样的数据。</li><li><strong>处理中间件</strong>（Processing Grid）：可选，如果一个请求涉及不同类型的处理单元，该中间件负责协调处理单元</li><li><strong>部署中间件</strong>（Deployment Manager）：负责处理单元的启动和关闭，监控负载和响应时间，当负载增加，就新启动处理单元，负载减少，就关闭处理单元。</li></ul></li></ul><p><img src="/2019/04/18/Software-architecture/5-1.png" alt></p><h3 id="一图流总结"><a href="#一图流总结" class="headerlink" title="一图流总结"></a>一图流总结</h3><p>把所有5种架构的6个维度的特征用图表概括，就是这样：</p><p><img src="/2019/04/18/Software-architecture/a-1.png" alt></p><p>联系其定义，这些特征也比较好理解。</p><p>当然，纸上得来终觉浅，架构的理论没有具体实践经验的支撑，难以深入理解。</p><p>这一篇就属于扫盲文章了。</p>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> software theory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LuckyMoney——红包分配算法</title>
      <link href="/2019/04/18/LuckyMoney/"/>
      <url>/2019/04/18/LuckyMoney/</url>
      
        <content type="html"><![CDATA[<p>面试被问到这题，记录一下思路～从一开始的复杂算法到后面的简化和优化过程。</p><h3 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h3><ul><li>保证每人有一个金额下限（0.01），以及一个金额上限（占总金额的比重不能超过90%）</li><li>保证结果有2位小数（精确到分），需要考虑浮点数计算误差。</li></ul><a id="more"></a><h3 id="初步思路"><a href="#初步思路" class="headerlink" title="初步思路"></a>初步思路</h3><ol><li>分割法：每次把最大的红包分割成两个小的，进行<code>n-1</code>次操作。<ul><li>注意随机的上界和下界；最后顺序还要shuffle。</li><li>时间复杂度：O(nlogn)​，代码也长，逻辑比较复杂+可读性差。</li></ul></li></ol><pre class="line-numbers language-lang-java"><code class="language-lang-java">public class LuckyMoney {    private static double min = 0.01, maxRate = 0.9;    public static double[] distribute(double total, int n) {        // Corner case: cases with 1 people, or invalid cases.        if (n <= 0 || total <= min * n || maxRate * n < 1)            return new double[]{-1.0};        if (n == 1)            return new double[]{total};        Random rand = new Random();        double[] res = new double[n];        int totalCents = (int) (total * 100), maxCents = (int) (maxRate * totalCents);        // Maximum heap, stores the largest Lucky on the peek.        PriorityQueue<Integer> money = new PriorityQueue<>((o1, o2) -> o2 - o1);        // Split the max Lucky for n - 1 times.        money.offer(totalCents);        for (int i = 0; i < n - 1; ++i) {            int maxMoney = money.poll(), lowerBound = Math.max((int) min * 100, totalCents - (n - i - 1) * maxCents), upperBound = Math.min(maxCents, maxMoney);            int curr = rand.nextInt(upperBound - lowerBound) + lowerBound;            money.offer(curr);            money.offer(maxMoney - curr);        }        // Shuffle the values.        List<Integer> tmpValues = new ArrayList<>(money);        Collections.shuffle(tmpValues);        // Calculate the money.        for (int i = 0; i < n; ++i)            res[i] = tmpValues.get(i) / 100.0;        return res;    }    // This part can also be used for all methods below.    // Check the results.    private static boolean validate(double[] res, double total, int n) {        if (res == null || res.length != n)            return false;        double sum = 0;        for (int i = 0; i < n; ++i)            sum += res[i];        // Check sum.        if (sum - total < 1e-6)            return false;        // Check each.        for (int i = 0; i < n; ++i)            if (res[i] / sum >= maxRate || res[i] < min)                return false;        return true;    }    public static void main(String[] args) {        // test 100.00        double[] test = distribute(100.00, 10);        System.out.println(Arrays.toString(test));        System.out.println(validate(test, 100.00, 10));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>直接随机求每次的值，定好每次上界和下界即可。<ul><li>结果上看，存在前面分钱多，后面分钱少的问题。可以考虑使用shuffle；</li><li>另外，由于使用的是平均分布的随机函数，所以导致大或者小红包出现概率比较大，比较”不公平”。</li><li>时间复杂度：O(n)</li></ul></li></ol><pre class="line-numbers language-lang-java"><code class="language-lang-java">public class LuckyMoney {    private static double min = 0.01, maxRate = 0.9;    public static double[] distribute(double total, int n) {        int remainCents = (int) (total * 100), minCents = (int) (min * 100), maxCents = (int) (maxRate * remainCents);        double[] res = new double[n];        Random rand = new Random();        for (int i = 0; i < n; ++i) {            int lowerBound = Math.max(minCents, remainCents - (n - i - 1) * maxCents);            int upperBound = Math.min(maxCents, remainCents - (n - i - 1) * minCents);            res[i] = rand.nextInt(upperBound - lowerBound) + lowerBound;            remainCents -= res[i];            res[i] /= 100.0;        }        return res;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调整思路"><a href="#调整思路" class="headerlink" title="调整思路"></a>调整思路</h3><p>在上面的实现过程中，我遇到了两个问题：</p><ol><li>大小红包出现概率过大，导致不公平；</li><li>前面红包普遍比后面红包大，不够随机。</li></ol><p>经过一些资料查阅，看到一些针对微信红包的测试实验结果：</p><ul><li>在比较靠后抽取的红包金额方差较大，其分布接近指数，容易抽到手气最佳；</li><li>在比较靠前抽取的红包方差较小，平均值差不多。</li></ul><p>此外，我了解到使用正态分布可以使大家的金额数接近平均值，使得大红包和小红包都不容易出现。</p><p>有一些文章推测，微信红包使用的是截尾正态分布算法，即保留部分正态分布图像在指定区间，而区间以外的概率密度为0；当然，为保证所需区间概率密度和为1，需要拔高整体图像，这在公式上通过乘一个系数得到。</p><p>经过一番思考后写下的代码：</p><ol><li>调整平均分布为截尾正态分布，每个人获得的是以当前余额的平均为均值，并明确上下限的截尾正态分布随机获得的值。<ul><li>结果较好，避免了红包金额不公和前后分布不均问题。</li><li>截尾正态分布实现比较粗暴（如果随机结果不在里面就舍弃重来）。</li><li>在正态分布参数的选择上，直接以均值作为方差的开方，不知是否有更好的参数？</li></ul></li></ol><pre class="line-numbers language-lang-java"><code class="language-lang-java">public class LuckyMoney {    private static double min = 0.01, maxRate = 0.9;    public static double[] distribute(double total, int n) {        int remainCents = (int) (total * 100), minCents = (int) (min * 100), maxCents = (int) (maxRate * remainCents);        double[] res = new double[n];        for (int i = 0; i < n; ++i) {            int lowerBound = Math.max(minCents, remainCents - (n - i - 1) * maxCents);            int upperBound = Math.min(maxCents, remainCents - (n - i - 1) * minCents);            int mean = remainCents / (n - i);            res[i] = truncatedNorm(mean, mean, lowerBound, upperBound);            remainCents -= res[i];            res[i] /= 100.0;        }        return res;    }    // A naive implementation of truncated normal distribution.    private static int truncatedNorm(int m, int sqrtv, int lo, int hi) {        if (lo == hi)            return lo;        int res;        Random rand = new Random();        do {            res = (int) (rand.nextGaussian() * sqrtv) + m;        } while (res < lo || res > hi);        return res;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>修改成实时分配（用性能换空间）</li></ol><pre class="line-numbers language-lang-java"><code class="language-lang-java">public class LuckyMoney {    private static double min = 0.01, maxRate = 0.9;    // Index = 1, 2, 3, ..., n    public static double nextMoney(double remain, double total, int index, int n) {        if (index == n)            return remain;        int remainCents = (int) (remain * 100), minCents = (int) (min * 100), maxCents = (int) (total * 100 * maxRate);        int lowerBound = Math.max(minCents, remainCents - (n - index) * maxCents);        int upperBound = Math.min(maxCents, remainCents - (n - index) * minCents);        int mean = remainCents / (n - index + 1);        return truncatedNorm(mean, mean, lowerBound, upperBound) / 100.0;    }    // Truncated normalize distribution function: omitted.    // main function.    public static void main(String[] args) {        double total = 100.0, remain = total;        int n = 10;        for (int i = 0; i < n; ++i) {            double curr = nextMoney(remain, total, i + 1, n);            remain -= curr;            System.out.println(curr);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>（网传）微信红包算法实现及分析<ul><li>实时分配金额，最小值为0.01，最大值为当前剩余平均值的两倍</li><li>使用红包类，思路清晰；避免了正态计算，时间效率较好。</li><li>当然，这里没有涉及最大红包的数值限制。</li></ul></li></ol><pre class="line-numbers language-lang-java"><code class="language-lang-java">public static double getRandomMoney(LeftMoneyPackage _leftMoneyPackage) {    // remainSize 剩余的红包数量    // remainMoney 剩余的钱    if (_leftMoneyPackage.remainSize == 1) {        _leftMoneyPackage.remainSize--;        return (double) Math.round(_leftMoneyPackage.remainMoney * 100) / 100;    }    Random r     = new Random();    double min   = 0.01; //    double max   = _leftMoneyPackage.remainMoney / _leftMoneyPackage.remainSize * 2;    double money = r.nextDouble() * max;    money = Math.max(money, min);    money = Math.floor(money * 100) / 100;    _leftMoneyPackage.remainSize--;    _leftMoneyPackage.remainMoney -= money;    return money;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浮点数精度问题"><a href="#浮点数精度问题" class="headerlink" title="浮点数精度问题"></a>浮点数精度问题</h3><ul><li>使用<code>BigDecimal</code>确保精度，商业运算常规做法。具体用法同<code>BigInteger</code>。</li></ul><h3 id="多人抢红包实例"><a href="#多人抢红包实例" class="headerlink" title="多人抢红包实例"></a>多人抢红包实例</h3><ul><li>注意<code>synchronized</code>关键字的使用。</li></ul><pre class="line-numbers language-lang-java"><code class="language-lang-java">import java.util.Random;class LuckyMoney {    int totalSize, remainSize;    double totalMoney, remainMoney, minMoney = 0.01, maxRate = 0.9, maxMoney;    public LuckyMoney(double money, int people) {        totalSize = remainSize = people;        totalMoney = remainMoney = (double) Math.round(money * 100) / 100;        maxMoney = (double) Math.round(totalMoney * maxRate * 100) / 100;    }}public class GetLuckyMoney implements Runnable {    private LuckyMoney money;    private int index;    public GetLuckyMoney(LuckyMoney _money) {        money = _money;    }    public synchronized void run() {        ++index;        System.out.println("Man " + index + " get " + getMoney(money));    }    private double getMoney(LuckyMoney money) {        double res;        if (money.remainSize == 1) {            money.remainSize--;            res = (double) Math.round(money.remainMoney * 100) / 100;            return res;        }        double lowerBound = Math.max(money.minMoney, money.remainMoney - (money.remainSize - 1) * money.maxMoney);        double upperBound = Math.min(money.maxMoney, money.remainMoney - (money.remainSize - 1) * money.minMoney);        double mean = money.remainMoney / money.remainSize;        res = truncatedNorm(mean, mean, lowerBound, upperBound);        res = (double) Math.round(res * 100) / 100;        money.remainSize--;        money.remainMoney -= res;        return res;    }    private double truncatedNorm(double m, double sqrtV, double lo, double hi) {        if (lo == hi)            return lo;        double res;        Random rand = new Random();        do {            res = rand.nextGaussian() * sqrtV + m;        } while (res < lo || res > hi);        return res;    }    public static void main(String[] args) {        LuckyMoney money = new LuckyMoney(100.0, 10);        System.out.println("Start to distribute " + money.totalMoney + " to " + money.totalSize + " people.");        GetLuckyMoney test = new GetLuckyMoney(money);        for (int i = 0; i < 10; ++i)            new Thread(test).start();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Start to distribute 100.0 to 10 people.Man 1 get 7.58Man 2 get 3.19Man 3 get 16.73Man 4 get 11.79Man 5 get 6.53Man 6 get 7.53Man 7 get 13.45Man 8 get 1.92Man 9 get 3.62Man 10 get 27.66<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关于提高代码可读性的建议"><a href="#关于提高代码可读性的建议" class="headerlink" title="关于提高代码可读性的建议"></a>关于提高代码可读性的建议</h3><ul><li>避免一行一注释，减少注释冗余。</li><li>命名方案一致。</li><li>不重复写相同代码。</li><li>避免层数过深的逻辑。</li><li>限制每行长度。</li><li>一致的临时变量命名。比如都用<code>i</code>。</li><li>加入块注释，例如：</li></ul><pre class="line-numbers language-lang-java"><code class="language-lang-java">    /**     * Return a truncated normal distribution N(m, v) between [lo, hi].     * @param m:            mean of normal distribution     * @param sqrtV:    square of variance of normal distribution     * @param lo:            lower bound of truncation     * @param hi:         upper bound of truncation     * @return round value of truncated normal distribution.     */    private static int truncatedNorm(int m, int sqrtV, int lo, int hi) {        if (lo == hi)            return lo;        int res;        Random rand = new Random();        do {            res = (int)(rand.nextGaussian() * sqrtV);        } while (res < lo || res > hi);        return res;    }// ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> random </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19届图森杯划水经历</title>
      <link href="/2019/04/15/19%E5%B1%8A%E5%9B%BE%E6%A3%AE%E6%9D%AF%E5%88%92%E6%B0%B4%E7%BB%8F%E5%8E%86/"/>
      <url>/2019/04/15/19%E5%B1%8A%E5%9B%BE%E6%A3%AE%E6%9D%AF%E5%88%92%E6%B0%B4%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<p>⚠️流水账警告⚠️</p><p>因为大三时间比较自由，我和两个关系比较好的同学报了图森杯（acm校赛选拔），然后因为没有准备所以变成了丢人现场……另外两个同学不想去，最后变成我一个人单刷(´･ω･`)喵喵喵？</p><p>不过单刷也有单刷的好处嘛，至少我划水不用有心里负担。体验体验这种感觉也是不错滴。</p><p>于是我愉快地睡过了上午的签到……（其实是前一天<s>打铁</s>只狼太晚了，唉破罐子破摔）好在让一个学长帮忙签到了，除了没有试机以外问题不大。</p><p>于是下午我佛系地到考场，结果还遇到些麻烦——平时刷oj用的都是java，intelliJ美滋滋，但是在这里只有eclipse能用，机房的intellij竟然连java环境都没有配好。想了想写c++还要用dev-c++那种手感，还是拿eclipse凑活。</p><p>（事实证明c++才是刷oj的王道啊）</p><h3 id="以下正式开始做题："><a href="#以下正式开始做题：" class="headerlink" title="以下正式开始做题："></a>以下正式开始做题：</h3><p>我慢悠悠地调试了一会，感觉ok了，于是看了一下提交界面，找了一下最简单的题——怎么看呢，就是提交人数最多的题——然后看了下是题E：portion（<a href="http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5973），嗯没什么好说的，正经签到题，写完就ac。其实我更好奇一些单词的意思，奈何机房的win7没法像mac一样查字典。" target="_blank" rel="noopener">http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5973），嗯没什么好说的，正经签到题，写完就ac。其实我更好奇一些单词的意思，奈何机房的win7没法像mac一样查字典。</a></p><p>接下来嘛，继续看大家做什么，我就跟着做什么。接下来的题也没啥意思，甚至很迷：</p><p>J题：Extended Twin Composite Number（<a href="http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5977），讲的是给定整数n，要求两个合数x和y，x+n=y。第一反应，让x=2*n就行了呗，一看x和y范围是1e18，n范围是1e9，这么做应该没问题。半信半疑地提交了，这么简单？？" target="_blank" rel="noopener">http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5977），讲的是给定整数n，要求两个合数x和y，x+n=y。第一反应，让x=2*n就行了呗，一看x和y范围是1e18，n范围是1e9，这么做应该没问题。半信半疑地提交了，这么简单？？</a></p><p>结果wa。我就纳闷了，什么？这难道不对嘛？立刻回去找答案看是不是我忽略了什么要求，看了一下sample，难道x要比n小？也没说呀。</p><p>emmm想了一会之后，决定先不管它，去做另一个热度很高的题：</p><p>G题：Postman（<a href="http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5975）。这题讲的是邮差在数轴上走，从邮局（坐标0）出发，到指定n个目的地送信的最短距离。每次最多携带k封信。" target="_blank" rel="noopener">http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5975）。这题讲的是邮差在数轴上走，从邮局（坐标0）出发，到指定n个目的地送信的最短距离。每次最多携带k封信。</a></p><p>这题真心不难。看了一下样例就心里有数，首先排序目的地，把正负分开算，然后从每一极向0分割出送信个数为k的区间，算作一次送信（即从绝对值大的一侧往里数k个而不是反过来），每个块最大的距离乘2就是这一个块送信的距离。</p><p>然后最后结果减去最大的那一极的绝对值，因为最后不需要回到邮局所以走到最远的地方就不用回来了，把刚才考虑的来回去掉一半。</p><p>满心欢喜地提交想着这下也差不多算不亏了，结果TLE。(´･ω･`)喵喵喵？</p><p>不会吧？排个序就超时？难道目标算法是线性的？可我看那么多人都过了这题呀……</p><h3 id="可达鸭眉头一皱发现事情并不简单。"><a href="#可达鸭眉头一皱发现事情并不简单。" class="headerlink" title="可达鸭眉头一皱发现事情并不简单。"></a>可达鸭眉头一皱发现事情并不简单。</h3><p>苦思冥想没有线性方案，我开始慌了。周围环境十分吵闹，开场已经一个多小时，我一度有退场的打算——太丢人了，我现在也才一个气球。</p><p>对面的小哥也是单刷，拿到一个气球之后默默地离开了。可能也是来体验一下的吧……</p><p>我又刷新了一下排行榜，没怎么变，做A题的人稍有增加。粗粗一看是二分图匹配，打扰了打扰了。匈牙利算法没背过呀，况且也不知道怎么套求权函数，不然大概要用dp？我只想到dfs+回溯的方法，怕是和八皇后一样复杂。害怕TLE就没做下去……也许这是本场比赛最大的失误吧。</p><p>转了一圈还是想从这两个简单题入手。</p><p>回到J题，我心里想的是可能真的有限制吧，虽然说是1e18但是限制1e9这样子，所以wa了？</p><p>那我不妨优化一下。</p><p>其实，如果n是偶数，那么我只要也取偶数，很容易就能达到目标。所以取x=4，y=n+4。</p><p>那么……奇数？</p><p>奇数不妨凑3的倍数？对三取余，剩下0那我就用6加，剩下1我就用8加，剩下2我就用4加，这样y肯定是三的倍数。</p><p>这样一写一提交，竟然ac了！这个是个振奋的信号，让我恢复精神继续怼G题了。</p><p>这个时候大概两个小时过去了。</p><p>然而，我接下来不管怎么怼G，始终发现：</p><h3 id="它就是没法改进了。"><a href="#它就是没法改进了。" class="headerlink" title="它就是没法改进了。"></a>它就是没法改进了。</h3><p>然而始终是TLE，心态又不好了。这个时候，周围有人的讨论、欢呼，此起彼伏的键盘声，以及换座位的响动，无一不在干扰心神。我佛了。。只好转战其他题目。</p><p>转了半天，发现这个B题：Even Number Theory（<a href="http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5970）还有点思路，于是开始写数字找规律。" target="_blank" rel="noopener">http://acm.zju.edu.cn/onlinejudge/showContestProblem.do?problemId=5970）还有点思路，于是开始写数字找规律。</a></p><p>问题是求偶数n的双阶乘的偶质数分解——偶质数分解是我自己口胡的词，就是一个由2和某奇数相乘的到的数——这样的最大分解有几个。n可达1e1000，看来肯定是数学优化问题，估计有公式。</p><p>双阶乘进行质因数分解，自然就是所有不大于它的偶数的偶质数因子个数相加咯。</p><p>我写了一下，找到初步规律：</p><p>偶数序列：2，4，6，8，10，12，14，16，18，20，22，24，26，28，30，……</p><p>分解个数：1，2，1，3，1，2，1，4，1，2，1，3，1，2，1，……</p><p>我立刻看到一个循环节，12131214……没多想就写了一个简单公式，每16就增加（1+2+1+3+1+2+1+4）个数，而不足16再加单独的和。</p><p>然后因为是1e1000，所以用BigInteger类来操作。幸运的是在code jam早就接触了这个类所以遇到的时候自然而然就想到了。</p><p>一切都看起来很完美，于是提交，wa！</p><p>我有些困惑，于是继续写数字——哇，32对应的不是4而是5诶（16对应的是4，而32=2*16，对所以应5），那就不是循环了。有些挫败的我安慰自己说，没关系反正提交次数不太重要，做出来就可以了。</p><p>于是我开始找规律。结果这个规律还真不明显……循环又不是，但是说它增长有规律我也是不信的。</p><p>干脆采取O(n)递推？可以，但是这么做……你确定不会爆栈？？时间复杂度肯定也会超的吧……</p><p>绝望……</p><p>后来又切了几道，然并卵。</p><p>就这样僵持到了结束也没有A出下一题……</p><h3 id="我好菜呀……"><a href="#我好菜呀……" class="headerlink" title="我好菜呀……"></a>我好菜呀……</h3><p>事后和咕咕的队友讨论了一下，队友拿着逻辑完全一致，但是用cpp写的代码一次就ac了，啥玩意……</p><p>有人说，java读输入要用这个：</p><p><code>Scanner sc = new Scanner (new BufferedInputStream(System.in));</code></p><p>然而当我想起要测试一下的时候，已经out of contest time了，于是TLE变成了永远的谜……</p><p>啥都别说了，我也太菜了……这样下去怎么打code jam呀……</p>]]></content>
      
      
      <categories>
          
          <category> competition </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>bash自动化部署脚本</title>
      <link href="/2019/04/11/bash%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"/>
      <url>/2019/04/11/bash%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>这是18年部署战争游戏时，写自动化部署脚本的一点经验。</p><p>感觉<code>shell</code>写起来和<code>python</code>有点像……</p><h3 id="登录服务器"><a href="#登录服务器" class="headerlink" title="登录服务器"></a>登录服务器</h3><p>开头需要指明使用<code>expect</code>执行脚本，因为这些指令不是<code>bash</code>自带的；</p><p>使用的是<code>spawn</code>指令发送<code>ssh</code>连接请求，然后用<code>expect</code>表示等待对方输出后再做反馈，是一个灵活的指令；</p><pre class="line-numbers language-lang-bash"><code class="language-lang-bash">#! /usr/bin/expect# 如果不想明文写在脚本里，可以设置为命令行参数set ipaddr [lindex $argv 0];set username [lindex $argv 1];set password [lindex $argv 2];set timeout 30 # 超时等待时间set prompt "#" # 这里是登陆成功的输出，linux简单用#匹配最后一个字符就可以spawn ssh $username@$ipaddrexpect {    "yes/no" { send "yes\r"; exp_continue } # 继续执行expect语句    "*assword" { send "$password\r" } # 密码输入提示，忽略p大小写    "Permission denied*" { exit } # 密码错误    timeout { puts "Timed out during login"; exit }}expect "$prompt"interact # 交还控制权<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入服务器后执行指令要用<code>send</code>指令。</p><p>结束时，如果把权限交还用户则需要用<code>interact</code>。</p><pre class="line-numbers language-lang-shell"><code class="language-lang-shell"># ...# 结束连接send "exit\r"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="文件指令"><a href="#文件指令" class="headerlink" title="文件指令"></a>文件指令</h3><p>文件主要使用<code>scp</code>指令进行本地和远程的传输。它是<code>seccure copy</code>的缩写，和<code>cp</code>比较区别在于，前者可以远程传输，而且是加密的；后者只能本机移动。</p><p>以文件上传到远程服务器为例，展示具体使用格式（下一步要输入密码）：</p><pre class="line-numbers language-lang-shell"><code class="language-lang-shell"># 复制单个文件scp $file $username@$ipaddr:$remote_folder# 递归复制整个目录scp -r $folder $username@$ipaddr:$remote_folder<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在脚本中，我们使用<code>expect</code>模块执行<code>scp</code>指令：</p><pre class="line-numbers language-lang-shell"><code class="language-lang-shell">#! /usr/bin/expect# 复制文件spawn scp $file $username@$ipaddr:$remote_folderexpect {  "yes/no" { send "yes\r"; exp_continue }  "*assword" { send "$password\r" }  timeout { exit }}# 等待传输结束expect "100%"expect eof<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对文件夹，只需要把上面<code>spawn scp $file $username…</code>改成<code>spawn scp -r $folder $username…</code>即可。</p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>需要提前在服务器修改nginx配置，并配置好本地python环境（gunicorn+flask等等）。</p><p>这个没什么好说的，常规启动服务即可。</p><pre class="line-numbers language-lang-shell"><code class="language-lang-shell">send "kill -9 $(pidof gunicorn)"send "nginx -s restart && nohup gunicorn -w 1 -b 127.0.0.1:8080 main:app -D"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有关部署的细节，详见<a href="https://riroaki.github.io/2019/03/28/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%EF%BC%9AFlask-gunicorn-nginx/">另一篇文章</a>。</p><p>总体代码：</p><pre class="line-numbers language-lang-shell"><code class="language-lang-shell">#! /usr/bin/expect# 如果不想明文写在脚本里，可以设置为命令行参数set ipaddr [lindex $argv 0];set username [lindex $argv 1];set password [lindex $argv 2];set folder "./war"set remote_folder "~/war"set timeout 30# 复制文件spawn scp $file $username@$ipaddr:$remote_folderexpect {  "yes/no" { send "yes\r"; exp_continue }  "*assword" { send "$password\r" }  timeout { exit }}# 等待传输结束expect "100%"expect eofspawn ssh $username@$ipaddrexpect {    "yes/no" { send "yes\r"; exp_continue } # 继续执行expect语句    "*assword" { send "$password\r" } # 密码输入提示，忽略p大小写    "Permission denied*" { exit } # 密码错误    timeout { puts "Timed out during login"; exit }}expect "#"# 运行send "kill -9 $(pidof gunicorn)\r"send "nginx -s restart && cd ~/war/ && nohup gunicorn -w 1 -b 127.0.0.1:8080 main:app -D\r"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> back end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Easy Painter-iOS绘图实例</title>
      <link href="/2019/04/11/EasyPainter-iOS%E7%BB%98%E5%9B%BE%E5%AE%9E%E4%BE%8B/"/>
      <url>/2019/04/11/EasyPainter-iOS%E7%BB%98%E5%9B%BE%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>这是去年刚接触iOS编程的时候，入门做的一点小项目——第一个是一个支持多种颜色的画板，第二个是玩纪念碑谷2之后，模仿每一关最后的部分实现的画画功能。</p><a id="more"></a><p>先看一下效果图：</p><h3 id="画板"><a href="#画板" class="headerlink" title="画板"></a>画板</h3><p>可以实现多种颜色和阴影，清空画版、分享绘画等等。</p><p><img src="/2019/04/11/EasyPainter-iOS绘图实例/board.JPG" alt></p><h3 id="纪念碑谷"><a href="#纪念碑谷" class="headerlink" title="纪念碑谷"></a>纪念碑谷</h3><p>很直观的效果，画笔有多种样式：</p><ul><li>直接绘制，表现为对称的白色线条（这是纪念碑谷中的效果——除了没有发光以外）</li></ul><p><img src="/2019/04/11/EasyPainter-iOS绘图实例/white.png" alt></p><ul><li>后来觉得线条太单调，于是增加了绘制树叶</li></ul><p><img src="/2019/04/11/EasyPainter-iOS绘图实例/tree.png" alt></p><ul><li>我又加入了多种颜色～</li></ul><p><img src="/2019/04/11/EasyPainter-iOS绘图实例/colorful.png" alt></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>占坑，待补充。</p>]]></content>
      
      
      <categories>
          
          <category> front end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP学习日记1——Set Expan</title>
      <link href="/2019/04/11/NLP-1-Set-Expan/"/>
      <url>/2019/04/11/NLP-1-Set-Expan/</url>
      
        <content type="html"><![CDATA[<p>说来惭愧，其实这是上个学期初实验室的老师布置下来的任务，直到今天才开始认真接触。</p><p>NLP应当是未来大势之一——在视觉、语音等方面已经能够做到炉火纯青的ML和DL，在NLP领域进展却比较慢，可以说是在日渐饱和的AI领域为数不多的未被探索完全的领域了。</p><p>词集拓展的概念和做法来自一篇论文：《SetExpan- Corpus-Based Set Expansion via Context Feature Selection and Rank Ensemble》，指的是根据一些词集种子，从语料库中摘取同一类的词语。作者采用的是英文词语，源代码在<a href="https://github.com/mickeystroller/SetExpan" target="_blank" rel="noopener">这里</a>。</p><p>这个方法说来简单，但是实际做起来并不容易。简单的上下文提取和匹配如果做不好，很容易出现语义漂移的现象，即同一个上下文抽取的词却不一样。</p><p>此外，中文本身的分词难度也为项目带来困难。</p><p>而且分类是重要的一步，为之后建立知识图谱、挖掘联系等等都具有基础性意义。</p><p>那么首先我们来分析一下论文讲的方法。</p><h2 id="理论部分"><a href="#理论部分" class="headerlink" title="理论部分"></a>理论部分</h2><p>所谓词集拓展，就是将一个小的词语集合（如几个国家名称），从语料库拓展到文章中所有的国家名称。</p><p>目前现有的基于小初始集的无监督词集拓展主要包括两种：</p><ol><li>基于和已有实体的分布相似性，一次性提取全部实体<ul><li>盲目地使用所有这些特征可能将不期望的实体引入扩展集合中，因为许多上下文特征不代表用于定义目标语义类，尽管它们确实与一些种子实体具有连接。比如国家和地区都可以接在“位于”之后，容易混为一谈。</li></ul></li><li>迭代性提取模式，用每次带来的新模式进行提取，不断加入词集<ul><li>依靠每次迭代得到的词集质量。由于文本的非结构化以及噪声存在，很难有完美的评分机制。</li><li>需要注意：实体入侵（实体质量不佳）、语义漂移（模式质量不佳）</li></ul></li></ol><p>还有一种取巧的办法，Google Set，即每次从谷歌搜索引擎中搜索关键词，然后提取前面几页搜索结果的关联关键词。这种办法质量不错但是需要在线连接，成本较高。在这里我们实现一种离线的词集拓展。</p><p>这里需要描述的工作是：</p><ol><li>一种迭代集扩展框架，采用新颖的上下文特征选择方法，处理实体入侵和语义漂移问题; </li><li>一种基于无监督排序的集成算法，用于实体选择，使我们的系统具有鲁棒性，进一步降低了语义漂移的影响。</li></ol><p>好，开始描述具体过程：</p><h3 id="模式建立"><a href="#模式建立" class="headerlink" title="模式建立"></a>模式建立</h3><p>针对单词集中的每个单词构建一个模式。</p><h3 id="模式评估"><a href="#模式评估" class="headerlink" title="模式评估"></a>模式评估</h3>]]></content>
      
      
      <categories>
          
          <category> machine learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NLP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>41.First Missing Positive</title>
      <link href="/2019/04/11/41-First-Missing-Positive/"/>
      <url>/2019/04/11/41-First-Missing-Positive/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an unsorted integer array, find the smallest missing positive integer.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: [1,2,0]Output: 3</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: [3,4,-1,1]Output: 2</code></pre><p><strong>Example 3:</strong></p><pre><code>Input: [7,8,9,11,12]Output: 1</code></pre><p><strong>Note:</strong></p><p>Your algorithm should run in <em>O</em>(<em>n</em>) time and uses constant extra space.</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="联想merge-interval"><a href="#联想merge-interval" class="headerlink" title="联想merge interval"></a>联想merge interval</h4><p>虽然不是常数空间的算法，但是时间复杂度是线性的。</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">class Solution {    class Interval {        int left, right;        Interval(int l, int r) {            left = l;            right = r;        }    }    public int firstMissingPositive(int[] nums) {        Arrays.sort(nums);        List<Interval> intervalList = new ArrayList<>();        for (int num : nums) {            if (num <= 0)                continue;            if (intervalList.isEmpty())                intervalList.add(new Interval(num, num));            else {                Interval tmp = intervalList.get(intervalList.size() - 1);                if (tmp.right + 1 == num) {                    tmp.right++;                    intervalList.set(intervalList.size() - 1, tmp);                } else if (tmp.right + 1 < num)                    break;            }        }        if (intervalList.isEmpty() || intervalList.get(0).left > 1)            return 1;        return intervalList.get(intervalList.size() - 1).right + 1;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(n)$</li></ul><h4 id="常数空间的做法：交换"><a href="#常数空间的做法：交换" class="headerlink" title="常数空间的做法：交换"></a>常数空间的做法：交换</h4><p>首先，总共有n个数 ，那么缺失的数最大也是<code>n+1</code>，不然就是<code>1-n</code>中间的数。</p><p>假如我们让所有数归位（即，尽量让所有的数满足<code>a[i] = i + 1</code>）</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int firstMissingPositive(int[] nums) {    int n = nums.length, res = 1;    for (int i = 0; i < n; ++i) {          // 注意这个是循环不是一次判断！          // 最后一个判断条件是必要的，在[1, 1]情况下就会死循环        while(nums[i] > 0 && nums[i] <= n               && nums[nums[i] - 1] != nums[i]) {            int tmp = nums[nums[i] - 1];            nums[nums[i] - 1] = nums[i];            nums[i] = tmp;        }    }    for (int i = 0; i < n; ++i)        if (nums[i] != i + 1)            return i + 1;    return n + 1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$，别看是两层循环，但是每一次交换都能够保证至少一个数归位，所以总共最多只需要交换n次。</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> interval </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>40.Combination Sum II</title>
      <link href="/2019/04/11/40-Combination-Sum-II/"/>
      <url>/2019/04/11/40-Combination-Sum-II/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a collection of candidate numbers (<code>candidates</code>) and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p><p>Each number in <code>candidates</code> may only be used <strong>once</strong> in the combination.</p><p><strong>Note:</strong></p><ul><li>All numbers (including <code>target</code>) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: candidates = [10,1,2,7,6,1,5], target = 8,A solution set is:[  [1, 7],  [1, 2, 5],  [2, 6],  [1, 1, 6]]</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: candidates = [2,5,2,1,2], target = 5,A solution set is:[  [1,2,2],  [5]]</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="回溯-dfs"><a href="#回溯-dfs" class="headerlink" title="回溯+dfs"></a>回溯+dfs</h4><p>和上题类似但是允许重复元素使用。</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">class Solution {    private List<List<Integer>> res;    public List<List<Integer>> combinationSum2(int[] nums, int target) {        Arrays.sort(nums);        res = new ArrayList<>();        backTrack(new ArrayList<>(), nums, target, 0);        return res;    }    private void backTrack(List<Integer> curr, int[] nums, int target, int index) {        if (target < 0)            return;        if (target == 0) {            res.add(new ArrayList<>(curr));            return;        }        for (int i = index; i < nums.length; i++) {            if (i > index && nums[i] == nums[i - 1])                continue;            curr.add(nums[i]);            backTrack(curr, nums, target - nums[i], i + 1);            curr.remove(curr.size() - 1);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^{m/avg(n)})$</li><li>空间复杂度：$O(mn^{m/avg(n)})$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> backtracking </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>39.Combination Sum</title>
      <link href="/2019/04/11/39-Combination-Sum/"/>
      <url>/2019/04/11/39-Combination-Sum/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a <strong>set</strong> of candidate numbers (<code>candidates</code>) <strong>(without duplicates)</strong> and a target number (<code>target</code>), find all unique combinations in <code>candidates</code> where the candidate numbers sums to <code>target</code>.</p><p>The <strong>same</strong> repeated number may be chosen from <code>candidates</code> unlimited number of times.</p><p><strong>Note:</strong></p><ul><li>All numbers (including <code>target</code>) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: candidates = [2,3,6,7], target = 7,A solution set is:[  [7],  [2,2,3]]</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: candidates = [2,3,5], target = 8,A solution set is:[  [2,2,2,2],  [2,3,3],  [3,5]]</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="回溯-dfs"><a href="#回溯-dfs" class="headerlink" title="回溯+dfs"></a>回溯+dfs</h4><p>理论上有2的n种可能；</p><p>排序保证unique。</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public List<List<Integer>> combinationSum(int[] candidates, int target) {    if (candidates == null || candidates.length == 0)          return new ArrayList<>();    return helper(candidates, target, 0);}private List<List<Integer>> helper(int[] candidates, int target, int index) {    List<List<Integer>> res = new ArrayList<>();    if (target < 0)          return res;    for (int i = index; i < candidates.length; i++) {        if (candidates[i] == target) {            List<Integer> tmp = new ArrayList<>();            tmp.add(candidates[i]);            res.add(tmp);        } else if (candidates[i] < target) {            List<List<Integer>> tmp = helper(candidates, target - candidates[i], i);            if (tmp.size() > 0) {                for (List<Integer> vec : tmp)                      vec.add(candidates[i]);                res.addAll(tmp);            }        }    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(2^n)$</li><li>空间复杂度：$O(2^n)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> backtracking </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>38.Count and Say</title>
      <link href="/2019/04/11/38-Count-and-Say/"/>
      <url>/2019/04/11/38-Count-and-Say/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>The count-and-say sequence is the sequence of integers with the first five terms as following:</p><pre><code>1.     12.     113.     214.     12115.     111221</code></pre><p><code>1</code> is read off as <code>&quot;one 1&quot;</code> or <code>11</code>.<br><code>11</code> is read off as <code>&quot;two 1s&quot;</code> or <code>21</code>.<br><code>21</code> is read off as <code>&quot;one 2</code>, then <code>one 1&quot;</code> or <code>1211</code>.</p><p>Given an integer <em>n</em> where 1 ≤ <em>n</em> ≤ 30, generate the <em>n</em>th term of the count-and-say sequence.</p><p>Note: Each term of the sequence of integers will be represented as a string.</p> <a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: 1Output: &quot;1&quot;</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: 4Output: &quot;1211&quot;</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="常规做法"><a href="#常规做法" class="headerlink" title="常规做法"></a>常规做法</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public String countAndSay(int n) {    String s = "1";    for(int i=1;i<n;i++) {        StringBuilder sb = new StringBuilder();        for(int j=0;j<s.length();j++) {            char count = '1';            while(j+1<s.length() && s.charAt(j)==s.charAt(j+1)) {                count++;                j++;            }            sb.append(count);            sb.append(s.charAt(j));        }        s = sb.toString();        // System.out.println(s);    }    return s;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(n)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easy </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>36.Valid Sudoku</title>
      <link href="/2019/04/11/36-Valid-Sudoku/"/>
      <url>/2019/04/11/36-Valid-Sudoku/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated <strong>according to the following rules</strong>:</p><ol><li>Each row must contain the digits <code>1-9</code> without repetition.</li><li>Each column must contain the digits <code>1-9</code> without repetition.</li><li>Each of the 9 <code>3x3</code> sub-boxes of the grid must contain the digits <code>1-9</code> without repetition.</li></ol><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-by-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png" alt="img"><br>A partially filled sudoku which is valid.</p><p>The Sudoku board could be partially filled, where empty cells are filled with the character <code>&#39;.&#39;</code>.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input:[  [&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]Output: true</code></pre><p><strong>Example 2:</strong></p><pre><code>Input:[  [&quot;8&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]]Output: falseExplanation: Same as Example 1, except with the 5 in the top left corner being     modified to 8. Since there are two 8&#39;s in the top left 3x3 sub-box, it is invalid.</code></pre><p><strong>Note:</strong></p><ul><li>A Sudoku board (partially filled) could be valid but is not necessarily solvable.</li><li>Only the filled cells need to be validated according to the mentioned rules.</li><li>The given board contain only digits <code>1-9</code> and the character <code>&#39;.&#39;</code>.</li><li>The given board size is always <code>9x9</code>.</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="分批验证"><a href="#分批验证" class="headerlink" title="分批验证"></a>分批验证</h4><p>按行、列、九宫格验证1～9有且仅有一个即可。</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public boolean isValidSudoku(char[][] board) {    int[] row = new int[10], col = new int[10], grid = new int[10];    for (int i = 0; i < 9; i++) {        // 分批验证9行，9列以及九宫格块        Arrays.fill(row, 0);        Arrays.fill(col, 0);        Arrays.fill(grid, 0);        int tmpRowStart = i - i % 3;        int tmpColStart = i % 3 * 3;        for (int j = 0; j < 9; j++) {            if (board[i][j] != '.') {                if (row[board[i][j] - '0'] != 0)                      return false;                row[board[i][j] - '0'] = 1;            }            if (board[j][i] != '.') {                if (col[board[j][i] - '0'] != 0)                      return false;                col[board[j][i] - '0'] = 1;            }            if (board[tmpRowStart + j / 3][tmpColStart + j % 3] != '.') {                if (grid[board[tmpRowStart + j / 3][tmpColStart + j % 3] - '0'] != 0)                       return false;                grid[board[tmpRowStart + j / 3][tmpColStart + j % 3] - '0'] = 1;            }        }    }    return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(n)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>35.Search Insert Position</title>
      <link href="/2019/04/11/35-Search-Insert-Position/"/>
      <url>/2019/04/11/35-Search-Insert-Position/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><p>You may assume no duplicates in the array.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: [1,3,5,6], 5Output: 2</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: [1,3,5,6], 2Output: 1</code></pre><p><strong>Example 3:</strong></p><pre><code>Input: [1,3,5,6], 7Output: 4</code></pre><p><strong>Example 4:</strong></p><pre><code>Input: [1,3,5,6], 0Output: 0</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><p>啥也别说了，就这样。</p><pre class="line-numbers language-lang-python"><code class="language-lang-python">public int searchInsert(int[] nums, int target) {    int lo = 0, hi = nums.length;    while (lo < hi) {        int mi = lo + (hi - lo) / 2;        if (nums[mi] < target)            lo = mi + 1;        else            hi = mi;    }    return lo;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(log(n))​$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> easy </tag>
            
            <tag> binary search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>34.Find First and Last Position of Element in Sorted Array</title>
      <link href="/2019/04/11/34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/"/>
      <url>/2019/04/11/34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p><p>Your algorithm’s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p><p>If the target is not found in the array, return <code>[-1, -1]</code>.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre><code>Input: nums = [5,7,7,8,8,10], target = 8Output: [3,4]</code></pre><p><strong>Example 2:</strong></p><pre><code>Input: nums = [5,7,7,8,8,10], target = 6Output: [-1,-1]</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>找<code>target + 1</code>的下标，再减1即为<code>target</code>的最后一个下标。</p><ol><li>元素可能不存在。</li><li>找到的元素可能和<code>target</code>相等。</li></ol><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int[] searchRange(int[] nums, int target) {    int[] res = {-1, -1};    if (nums == null || nums.length == 0)        return res;    int first = bs(nums, target);    if (nums[first] != target)        return res;    res[0] = bs(nums, target);    int second = bs(nums, target + 1);    res[1] = nums[second] == target ? second : second - 1;    return res;}private int bs(int[] nums, int target) {    int lo = 0, hi = nums.length - 1;    while (lo < hi) {        int mi = lo + (hi - lo) / 2;        if (nums[mi] < target)            lo = mi + 1;        else            hi = mi;    }    return lo;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(log(n))$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> medium </tag>
            
            <tag> binary serch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML学习日记6——深度学习入门</title>
      <link href="/2019/04/09/ML-6-Intro-to-Deep-Learning/"/>
      <url>/2019/04/09/ML-6-Intro-to-Deep-Learning/</url>
      
        <content type="html"><![CDATA[<p>这一课前半部分是在吹水……</p><a id="more"></a><h2 id="DL的前世今生"><a href="#DL的前世今生" class="headerlink" title="DL的前世今生"></a>DL的前世今生</h2><p>1958到1980年dl的发展。1980年的多层网络其实和现在的DNN已经差不多了。区别在于RBM initialization。</p><p>然而过去的研究表示dl并没有很好的效果……层数多的时候可能效果反而差。</p><p>这个模型，当时看来只是石头汤的石头罢了——其实并无大用，甚至还炒作出来许多虚假人工智能的搞笑的故事（和现在似曾相识？哈哈）。</p><p>2009年GPU是一个关键突破，因为加速了deep learning的过程。</p><p>11年语音辨识使用了这项技术，得到了比较好的结果；12年用在图像识别。这项技术终于火了起来。</p><h2 id="正片开始"><a href="#正片开始" class="headerlink" title="正片开始"></a>正片开始</h2><p>回到上一次的内容，DL其实是把许多小的神经通过sigmoid、softmax等等方法连接起来。</p><p>每一层都有自己的bias和weight。</p><p>最简单的连接方式是全连接前向传播神经网络（<em>Fully Connected FeedForward Network</em>）。</p><p>给定了一个网络结构，而没有确定具体参数，那么就是一个<em>function set</em>；假如参数和结构都确定了，那它就是一个函数。</p><p>我们在一般机器学习过程中，所做的事情也是先确定结构——<em>function set</em>，然后通过梯度下降找到最好的参数。</p><p>神经网络结构：</p><p>input layer、deep layer（指的是中间的许多隐层）、output layer</p><p>network具体做的事情其实就是矩阵运算，如图：</p><p><img src="/2019/04/09/ML-6-Intro-to-Deep-Learning/matrix.png" alt></p><p>写成矩阵运算的形式，这样就可以可以使用GPU执行并行计算加速计算过程。</p><p><img src="/2019/04/09/ML-6-Intro-to-Deep-Learning/matrix2.png" alt></p><h3 id="mnist——手写数字辨识"><a href="#mnist——手写数字辨识" class="headerlink" title="mnist——手写数字辨识"></a>mnist——手写数字辨识</h3><p>input：每个图片的矩阵</p><p>output：10维的one-hot向量</p><ol><li><p>首先，需要决定一个好的<em>function set</em>，即神经网络的结构：</p><ul><li>这一步需要trial&amp;error+intuition</li><li>有一些技巧可以让机器自己确定层数，但是应用暂时不广泛。</li></ul></li><li><p>接下来，找到好的<em>feature</em>，即<em>feature engineering</em>：</p><ul><li>有很多特征不是那么直觉，所以也很难。</li></ul></li><li><p>评估：计算交叉熵</p></li><li>调整：使用梯度下降</li></ol><h3 id="backpropagation反向传播（参数更新过程）"><a href="#backpropagation反向传播（参数更新过程）" class="headerlink" title="backpropagation反向传播（参数更新过程）"></a>backpropagation反向传播（参数更新过程）</h3><p>原理：微分的链式法则。</p><ul><li>每一个神经元更新参数的时候，需要计算<em>loss</em>函数对它的偏微分；</li><li>计算的时候，根据链式法则，继续向下一层寻找与本神经元输出有关的变量的偏微分；</li><li>每一项都依赖下一层，所以计算时从最后向前进行，相当于建立了反向的神经网络进行计算。</li></ul><p><img src="/2019/04/09/ML-6-Intro-to-Deep-Learning/backpropagation.png" alt></p><p>总结图如下：</p><p><img src="/2019/04/09/ML-6-Intro-to-Deep-Learning/summary.png" alt></p><h2 id="Keras实战——mnist"><a href="#Keras实战——mnist" class="headerlink" title="Keras实战——mnist"></a>Keras实战——mnist</h2><p>Keras集成了tensorflow和theano的库，是在这两个基础库上的更好用的接口。</p><p>在希腊语里面，Keras意味着horn——牛角～</p><p>而mnist作为深度学习界的hello world，自然在这里要写一下：</p><p>记住，深度学习和机器学习一样，分成三个步骤：</p><ul><li>确定模型（网络结构）、评估模型（损失函数）、改进模型（挑出最优）</li></ul><p>需要注意的是，tensorflow和keras经过这两年的时间已经有所变化，视频里面的api已经不能用了。</p><p>现在的2.0版本tf和keras竟然会有冲突（<code>AttributeError: module &#39;tensorflow&#39; has no attribute &#39;get_default_graph&#39;</code>），让人很是无语。</p><h3 id="处理输入"><a href="#处理输入" class="headerlink" title="处理输入"></a>处理输入</h3><p>这里需要注意，首先x的data是60000个28*28的0/1矩阵，表示这个格子有没有上色；y的data是60000个0～9的数字，训练前需要变动：</p><ul><li>把x的每个case展平成一个vector（因为特征是一维的）</li><li>把y变成one-hot格式，每个case用一个10维向量表示，原来值对应位置的那一维是1，其余为0。这在NLP中也很常见，主要是用来区分不同的类 ，而原来的数值表示类会有不好的影响（之前在讨论分类器时有涉及到）</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">from tensorflow.keras import Sequentialfrom tensorflow.keras.datasets import mnistfrom tensorflow.keras.layers import Densefrom tensorflow.keras.utils import to_categorical# Load data(x_train, y_train), (x_test, y_test) = mnist.load_data()# Flatten input 28 * 28 matrix into a 784 vectorx_train = x_train.reshape(len(x_train), 28 * 28)x_test= x_test.reshape(len(x_test), 28 * 28)# Make y into one-hot encodingy_train = to_categorical(y_train, 10)y_test = to_categorical(y_test, 10)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设计模型"><a href="#设计模型" class="headerlink" title="设计模型"></a>设计模型</h3><p>这里模型是参考视频中的定义，用了最基本的<em>Sequential</em>模型。</p><p><em>units</em>表示输出的尺寸，和<em>input_dim</em>对应；除了第一层需要定义输入尺寸以外，后面都不需要声明（和上一层的输出尺寸是一样的）。</p><p>使用了<em>sigmoid</em>和<em>softmax</em>用来做层间整合，交叉熵作为<em>loss</em>函数，梯度下降方法的学习率调整使用<em>adam</em>方法，<em>accuracy</em>表示度量方式——一般都会使用这一个选项。</p><pre class="line-numbers language-lang-python"><code class="language-lang-python"># Build modelmodel = Sequential()model.add(Dense(input_dim=28*28, units=500, activation='sigmoid'))# Activation function could also be:# softplus, softsign, relu, tanhm hard_sigmoid, linearmodel.add(Dense(units=500, activation='sigmoid'))model.add(Dense(units=10, activation='softmax'))# Config loss function and gradient descent methodmodel.compile(loss='categorical_crossentropy',             optimizer='adam',             metrics=['accuracy'])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p><code>batch-size</code>表示每次随机选取用于梯度下降的样本数，<code>epochs</code>表示所有样本的迭代次数。</p><h4 id="为什么不计算全部的样本进行迭代？"><a href="#为什么不计算全部的样本进行迭代？" class="headerlink" title="为什么不计算全部的样本进行迭代？"></a>为什么不计算全部的样本进行迭代？</h4><p>这个和之前讨论的BGD与SGD之争如出一辙，其实还是效率和质量的考虑。</p><p>“天下武功，唯快不破”，虽然BGD更为稳定，但是架不住SGD快呀！但是SGD每次只选一个case，随机性太大；所以就使用折衷方案，把所有case分成几个小批量（<em>mini-batch</em>），每次进行一个<em>batch</em>的<em>loss</em>计算，进行一次update。</p><p>另一方面，小批量的梯度下降能够保证一定的随机性，比批量的方法更容易跳出局部极小值。</p><p>而当所有的<em>mini-batch</em>都被计算完，就叫做一个<em>epoch</em>。</p><blockquote><p>虽然一个<em>epoch</em>里面计算<em>loss</em>的次数是一样的，但是可以实现并行计算的加速（也就是说可以同时计算多个case的loss），所以选择适中的<code>batch-size</code>实际效果比<code>batch-size</code>等于1的情况要好。</p><p>具体并行计算加速其实并没有那么复杂：把多个x的向量合并成一个matrix再一起运算，在GPU中矩阵运算得到较好的优化，所以得到了加速。</p></blockquote><pre class="line-numbers language-lang-python"><code class="language-lang-python"># Train modelmodel.fit(x_train, y_train, batch_size=100, epochs=20)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="预测结果"><a href="#预测结果" class="headerlink" title="预测结果"></a>预测结果</h3><p>可以直接计算准确率：</p><pre class="line-numbers language-lang-python"><code class="language-lang-python"># Loss and accuratyscore = model.evaluate(x_test, y_test)print('Total loss on testing set:', score[0])print('Accuracy of testing set:', score[1])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>10000/10000 [==============================] - 0s 40us/sample - loss: 0.1367 - accuracy: 0.9589Total loss on testing set: 0.13666086520701648Accuracy of testing set: 0.9589</code></pre><p>也可以选择导出结果（不知道正确答案是多少的场景）：</p><pre class="line-numbers language-lang-python"><code class="language-lang-python">result = model.predict(x_test)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>因为采取的小批量梯度下降具有一定的随机性，所以准确率和结果每次都会有一点差别。</li></ul><p>～本文完～</p>]]></content>
      
      
      <categories>
          
          <category> machine learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML学习日记5——从贝叶斯到逻辑回归</title>
      <link href="/2019/04/09/ML-5-Logistic-Regression/"/>
      <url>/2019/04/09/ML-5-Logistic-Regression/</url>
      
        <content type="html"><![CDATA[<p>继续上一部分讲解贝叶斯算法的内容，这一次研究一下逻辑回归的分类算法。</p><p>虽然是叫做回归，但是本质是分类，只不过这里的分类方法和线性回归非常相似。</p><p>⚠️前方多图杀猫⚠️    ⚠️前方数学警告⚠️</p><a id="more"></a><h3 id="从二元贝叶斯模型说起"><a href="#从二元贝叶斯模型说起" class="headerlink" title="从二元贝叶斯模型说起"></a>从二元贝叶斯模型说起</h3><p>我们首先看一下如果是<strong>二分类问题</strong>，使用贝叶斯模型的做法：</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/1.PNG" alt></p><p>可以顺着途中的公式变形，得到$P(C1|x)=\sigma(z)$，z是一个比较复杂的变量，而这个函数又叫<em>sigmoid</em>函数，特点是对正的输入，返回的值在0.5到1之间，对负数返回的值在0到0.5之间，而且单调递增。</p><p>中间过程略去，我们可以用x和其他参数表示z（上面部分）：</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/2.PNG" alt></p><p>当我们让协方差矩阵相等的时候（为什么要这么做？一方面是效率的考虑，另一方面就是在某些地方测试得到的结果比原来的好（<strong>这又是为什么？</strong>那我就真的不知道了）），可以化简这个式子，从而得到$z=wx+b$这样一个简洁的形式。</p><p>是不是很眼熟？这不就是线性回归的模型嘛！</p><p>事实上，我们这么操作之后就会发现，之前我们所求的贝叶斯的各个参数其实不过是为了得到概率的线性拟合参数w和b——既然如此，为什么不直接求这些参数？那样做岂不是更加简洁。</p><p>既然如此，我们就顺着这条路探究下去。</p><h3 id="有了新模型，如何评价模型的好坏？"><a href="#有了新模型，如何评价模型的好坏？" class="headerlink" title="有了新模型，如何评价模型的好坏？"></a>有了新模型，如何评价模型的好坏？</h3><p>依然是对训练样本做最大似然估计，即选择使得现有数据的分类可能性最大的模型，如下图。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/3.PNG" alt></p><p>这里实现两个等价的变换：</p><ul><li><p>做符号的等价变化：当我们要求l的值最大，等价于求$-ln(l)$的值最小——取对数是一个技巧，用于将乘法转化为加法。</p></li><li><p>令$\hat{y}^n$表示分类结果，用1表示A类，用0表示B类</p><ul><li><p>这样做和<em>sigmoid</em>函数产生联系，使用A的函数估计A类产生x的概率密度，概率接近1的时候就是A类，概率接近0的时候就是B类</p></li><li><p>另外可以简化函数的形式，把条件改写成数学化的表达。我们原来的形式是这样的：</p><ul><li>如果x属于A类，那就加算A类产生它的概率的负对数；</li><li>否则加算B产生它的概率的负对数；</li></ul><p>当x属于A类的时候，第二项是0；否则第一项是0。所以原式改写成：$\hat{y}^nlnf_{w,b}(x^n)+(1-\hat{y}^nln(1-f_{w,b}(x^n)))$</p></li></ul></li></ul><p>如此一来，变换可得到：</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/4.PNG" alt></p><p>而根据信息论的表述，这一函数的形式就很像我们的估计函数和实际函数的交叉熵。</p><blockquote><p>交叉熵可以估计两个概率分布的相似情况，假如交叉熵越大，那么说明两个分布的值越接近。</p></blockquote><p>我们通过这一形式化的解释，侧面说明了这一个公式的正确性——我们需要求最小的函数值，那么就需要求最大的交叉熵（注意前面的负号），所以此时模型的概率分布和真实数据是最接近的！</p><h3 id="有了评估方法，如何找到最优模型参数？"><a href="#有了评估方法，如何找到最优模型参数？" class="headerlink" title="有了评估方法，如何找到最优模型参数？"></a>有了评估方法，如何找到最优模型参数？</h3><p>老办法，梯度下降。</p><p>不确定这个交叉熵函数L是不是凸函数，我们先对w和b各自求个微分。</p><p>对w求微分化简过程如下图，左右侧同理；</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/6.png" alt></p><p><img src="/2019/04/09/ML-5-Logistic-Regression/7.png" alt></p><p>最终化简结果相当简洁，也就是$\frac{\partial{L}}{\partial{w}}=-\sum_1^n(\hat{y}^i-f_{w,b}(x^i))x^i$，这个形式和线形回归的学习率其实是一样的！</p><ul><li>注意这里w和x都是向量。</li></ul><p><img src="/2019/04/09/ML-5-Logistic-Regression/8.png" alt></p><p>这里b的梯度下降可以并入w，多出一个$x0 = 1$的维度。</p><h2 id="线性回归与逻辑回归的联系与区别"><a href="#线性回归与逻辑回归的联系与区别" class="headerlink" title="线性回归与逻辑回归的联系与区别"></a>线性回归与逻辑回归的联系与区别</h2><p>看下图，模型三步走：选取模型、评估模型、调整模型过程中，两个模型都是十分相似的。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/compare.png" alt></p><h3 id="为什么不用平方损失（square-error）评估逻辑回归模型？"><a href="#为什么不用平方损失（square-error）评估逻辑回归模型？" class="headerlink" title="为什么不用平方损失（square error）评估逻辑回归模型？"></a>为什么不用平方损失（square error）评估逻辑回归模型？</h3><p>这个事情不是很直观，我们需要计算一下。</p><p>如果采用的是平方损失函数，那么得到的梯度是：</p><p>可以看出，采用平方差的时候，假如模型的估计概率很接近分类的一端（接近1，或者接近0），它的梯度都会接近0；这说明，在远离目标和接近目标的地方，梯度都很小，我们很难获得好的结果。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/whyNOTsquare.png" alt></p><p>更直观的图例在这里：</p><ul><li>在图片中可以看到，<em>cross entropy</em>作为损失函数，在离目标比较远的地方梯度较大；在接近目标的地方梯度比较小。</li><li>而使用<em>square error</em>作为损失函数的时候，在离目标比较远和比较近的地方梯度都很小。</li></ul><p><img src="/2019/04/09/ML-5-Logistic-Regression/squareANDCrossEntropy.png" alt></p><h2 id="Discriminative-VS-Generative"><a href="#Discriminative-VS-Generative" class="headerlink" title="Discriminative VS Generative"></a>Discriminative VS Generative</h2><p>现在回头看看，我们从贝叶斯的生成模型走了这么远，到了逻辑回归的判别模型，产生的结果参数是一样的嘛？</p><p>也就是说，我们在这里获得的w和b，和本文一开始把$\sum$统一之后得到的模型是不是同一个？</p><p>答案是：<strong>不是同一个</strong>。</p><p>其实模型的最终表述形式是一样的（即，相同的<em>function set</em>），而最终得到的模型之所以不同，是因为我们一开始做出的假设不同。</p><p>我们在贝叶斯的生成模型的时候，做出了诸如”高斯分布”、”独立概率”等等假设。这些假设其实对模型进行了限制。但是在寻找逻辑回归模型的时候，我们只是直接去做了，其实会更贴近数据一点。</p><p>很多实践告诉我们，Generative的模型表现不如Discriminative的模型。</p><p>实际情况的结论要复杂一些：</p><ul><li>training data比较小的时候，Discriminative受data的影响比较大，很容易失控；而Generative模型主要依据还有自己的假设（自己的脑补），受到数据影响比较小，反而能够比较好地描述数据。<ul><li>在数据量越来越大的时候，贝叶斯渐渐失去优势。</li><li>当然，数据量的多少还是以情况论，没有什么绝对标准。</li></ul></li><li>和第一条相似的情况是noise比较多，label本身有错的时候。此时Generative模型占优。</li><li>另外，如果特征之间明显没有关联，那么还是Generative模型好一些。<ul><li>语音辨识为例。为了预测下一句话的内容，一般采用generative的内容。</li></ul></li></ul><p>所以说，当我们掌握信息比较少的时候，脑补和假设很重要；而信息比较多的时候，自然要尊重事实。嘿嘿，不失为人生哲理一条～</p><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="多类逻辑回归multi-class-classification"><a href="#多类逻辑回归multi-class-classification" class="headerlink" title="多类逻辑回归multi-class classification"></a>多类逻辑回归multi-class classification</h3><p>现在我们把二元的结果向多元拓展：</p><p>假设有C1、C2、C3的类，我们也可以使用逻辑回归，对每个类也有w和b。</p><p>我们需要使用<em>softmax</em>函数（可以通过最大熵理论推导，但是超出了本文的讨论范围）：</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/softmax.png" alt></p><p>这么一做之后，不单考虑到各个概率的大小，也保证各个概率之和为1。</p><p>这样之后，我们还是采用计算交叉熵的方式评估函数的好坏（下图的表达式缺少一个负号，即$-\sum…$）。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/multiCrossEntropy.png" alt="multiCrossEntropy"></p><h3 id="LR的限制：模型是有极限的，我不做LR啦！JOJO！"><a href="#LR的限制：模型是有极限的，我不做LR啦！JOJO！" class="headerlink" title="LR的限制：模型是有极限的，我不做LR啦！JOJO！"></a>LR的限制：<s>模型是有极限的，我不做LR啦！JOJO！</s></h3><p>逻辑回归的模型形式和线性回归是一样的，所以其本质是在高维平面上的直线（平面），不能够把一些复杂的分类表现出来。</p><p>比如图中例子，左上和右下是一类，左下和右上是一类，但是logistic分类只能画出一条直线，无法分割。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/limit.png" alt></p><p>但是，我们可以通过Feature Transformation进行修正：</p><h4 id="Feature-Transformation"><a href="#Feature-Transformation" class="headerlink" title="Feature Transformation"></a>Feature Transformation</h4><p>我们把原有的特征进行变换，得到新的feature，而这个feature可以用直线分类。</p><p>例如在上面这个例子中，可以采用新的feature：$x3=x1^2+x2^2,x4=(1-x1)^2+(1-x2)^2$，即到点<code>(0, 0),(1,1)</code>之间的距离作为新的两个feature。这样一来，我们就可以用直线分割这两组点（图略）。</p><p>但是问题在于，我们往往无法描述属性的特征，不知道如何找到一个好的transformation。如果都是手动修改feature，那就不是人工智能啦！</p><p>我们需要的是让机器自己产生新的feature transformation！所以我们需要：</p><h4 id="Cascading-LR"><a href="#Cascading-LR" class="headerlink" title="Cascading LR"></a>Cascading LR</h4><p>将许多个逻辑回归模型接起来。</p><p>我们做了许多种方式的特征转换之后，再用softmax逻辑回归将他们进行分类。</p><p>是不是有点神经网络的样子？这么一看，其实神经网络就是无数个小的逻辑回归等单元的组合。</p><p>激动，终于学到Deep Learning的内容了。</p><p><img src="/2019/04/09/ML-5-Logistic-Regression/cascading.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> machine learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> classification </tag>
            
            <tag> logistic regression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>33.Search in Rotated Sorted Array</title>
      <link href="/2019/04/09/33-Search-in-Rotated-Sorted-Array/"/>
      <url>/2019/04/09/33-Search-in-Rotated-Sorted-Array/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p><p>You are given a target value to search. If found in the array return its index, otherwise return <code>-1</code>.</p><p>You may assume no duplicate exists in the array.</p><p>Your algorithm’s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: nums = [4,5,6,7,0,1,2], target = 0Output: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: nums = [4,5,6,7,0,1,2], target = 3Output: -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>首先，通过二分找到旋转点（第一个比<code>nums[0]</code>小的元素）；</p><p>然后，确认是否旋转，并确定查找范围；</p><p>最后二分查找元素。</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int search(int[] nums, int target) {    if (nums == null || nums.length == 0)        return -1;    int cut = nums[0], lo = 0, hi = nums.length - 1;      // find rotate point    while (lo < hi) {        int mi = lo + (hi - lo) / 2;        if (nums[mi] >= cut)            lo = mi + 1;        else            hi = mi;    }      // check if truly rotate    if (nums[lo] > cut)        lo = 0;      // if target is on the left side    else if (target >= cut) {        lo = 0;        hi--;    // if target is on the right side    } else        hi = nums.length - 1;      // binary search    while (lo < hi) {        int mi = lo + (hi - lo) / 2;        if (nums[mi] < target)            lo = mi + 1;        else            hi = mi;    }    return nums[lo] == target ? lo : -1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(log(n))$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> medium </tag>
            
            <tag> binary search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code Jam 2019 Qualification Round</title>
      <link href="/2019/04/08/Code-Jam-2019-Qualification-Round/"/>
      <url>/2019/04/08/Code-Jam-2019-Qualification-Round/</url>
      
        <content type="html"><![CDATA[<p>准备打一下今年的code jam和kick start，看了一下code jam是采取连续比赛的机制，kick start是每一轮独立。</p><p>今天写一下关于code jam的资格赛的事情。</p><p>QR在4月5日早上七点开始，持续27小时，只要在难度不大的四题（总分100）里面做出30分就可以。</p><p>贴一下战绩：55分，其实挺低的……还需要加油</p><a id="more"></a><h3 id="Foregone-Solution"><a href="#Foregone-Solution" class="headerlink" title="Foregone Solution"></a>Foregone Solution</h3><blockquote><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Someone just won the Code Jam lottery, and we owe them <strong>N</strong> jamcoins! However, when we tried to print out an oversized check, we encountered a problem. The value of <strong>N</strong>, which is an integer, includes at least one digit that is a <code>4</code>… and the <code>4</code>key on the keyboard of our oversized check printer is broken.</p><p>Fortunately, we have a workaround: we will send our winner two checks for positive integer amounts A and B, such that neither A nor B contains any digit that is a <code>4</code>, and A + B = <strong>N</strong>. Please help us find any pair of values A and B that satisfy these conditions.</p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>The first line of the input gives the number of test cases, <strong>T</strong>. <strong>T</strong> test cases follow; each consists of one line with an integer <strong>N</strong>.</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>For each test case, output one line containing <code>Case #x: A B</code>, where <code>x</code> is the test case number (starting from 1), and <code>A</code> and <code>B</code> are positive integers as described above.</p><p>It is guaranteed that at least one solution exists. If there are multiple solutions, you may output any one of them. (See “What if a test case has multiple correct solutions?” in the Competing section of the <a href="https://codingcompetitions.withgoogle.com/codejam/faq" target="_blank" rel="noopener">FAQ</a>. This information about multiple solutions will not be explicitly stated in the remainder of the 2019 contest.)</p><h3 id="Limits"><a href="#Limits" class="headerlink" title="Limits"></a>Limits</h3><p>1 ≤ <strong>T</strong> ≤ 100.<br>Time limit: 10 seconds per test set.<br>Memory limit: 1GB.<br>At least one of the digits of <strong>N</strong> is a 4.</p><h4 id="Test-set-1-Visible"><a href="#Test-set-1-Visible" class="headerlink" title="Test set 1 (Visible)"></a>Test set 1 (Visible)</h4><p>1 &lt; <strong>N</strong> &lt; 105.</p><h4 id="Test-set-2-Visible"><a href="#Test-set-2-Visible" class="headerlink" title="Test set 2 (Visible)"></a>Test set 2 (Visible)</h4><p>1 &lt; <strong>N</strong> &lt; 109.</p><p>Solving the first two test sets for this problem should get you a long way toward advancing. The third test set is worth only 1 extra point, for extra fun and bragging rights!</p><h4 id="Test-set-3-Hidden"><a href="#Test-set-3-Hidden" class="headerlink" title="Test set 3 (Hidden)"></a>Test set 3 (Hidden)</h4><p>1 &lt; <strong>N</strong> &lt; 10100.</p><h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><div class="table-container"><table><thead><tr><th>Input</th><th>Output</th></tr></thead><tbody><tr><td><code>3 4 940 4444</code></td><td><code>Case #1: 2 2 Case #2: 852 88 Case #3: 667 3777</code></td></tr></tbody></table></div><p>In Sample Case #1, notice that A and B can be the same. The only other possible answers are <code>1 3</code> and <code>3 1</code>.</p></blockquote><p>这题是米斯达保护协会出的（迫真）</p><p>其实就是把一个包含<code>4</code>的数拆分成两个不同的数，但是这两个数不能包含<code>4</code>。</p><p>只要有一个固定的拆分方法就可以：</p><ul><li>对每一个位上的数字<code>a</code>，如果不是<code>4</code>，就拆分成<code>a</code>和<code>0</code>；</li><li>否则拆出两个<code>2</code></li></ul><p>想着很简单就不管了，结果比赛结束一看，竟然没过hidden case……</p><p>想了一会恍然大悟：位数不够！</p><p>那就该用<code>BigInteger</code>库了。</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.Scanner;import java.math.BigInteger;public class Solution {    public static void main(String[] args) {        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));        int t = in.nextInt();        for (int i = 1; i <= t; ++i) {            BigInteger sum = in.nextBigInteger(), num = splitWithout4(sum);            System.out.println("Case #" + i + ": " + num + " " + sum.subtract(num));        }    }    private static BigInteger splitWithout4(BigInteger sum) {        char[] ch = sum.toString().toCharArray();        BigInteger res = new BigInteger("0"),            two = new BigInteger("2"),            ten = new BigInteger("10");        for (char c : ch) {            res = res.multiply(ten);            if (c == '4')                  res = res.add(two);        }        return res;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(log(n))$</li><li>空间复杂度：$O(1)$</li></ul><hr><p>这里插播一下<code>java.math.BigInteger</code>库，好像是1.7版本的jdk开始支持的。</p><p>因为java最大的整数使用<code>long</code>存的，数位最大不过64bit，也就是说最大表示不到2的63次方，最小自然是负的2的63次方。这样计算起来不过就是1e20左右嘛，根本不够看的。</p><p>所以java使用大整数库来操作比较长的数，方法是将数存在<code>String</code>里面，然后对加减乘除模，位运算等等都单独内置了支持（还支持了gcd，好评！）</p><p>因为是使用字符串表示，字符串长度是一个<code>int</code>值，最长就是<code>Integer.MAX_VALUE</code>，一般够用了</p><hr><pre class="line-numbers language-lang-java"><code class="language-lang-java">import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.Scanner;import java.math.BigInteger;public class Solution {    public static void main(String[] args) {        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));        int t = in.nextInt();        for (int i = 1; i <= t; ++i) {            BigInteger sum = in.nextBigInteger(), num = splitWithout4(sum);            System.out.println("Case #" + i + ": " + num + " " + sum.subtract(num));        }    }    private static BigInteger splitWithout4(BigInteger sum) {        char[] ch = sum.toString().toCharArray();        BigInteger res = new BigInteger("0");        BigInteger three = new BigInteger("3"),            two = new BigInteger("2"),            ten = new BigInteger("10");        for (char c : ch) {            res = res.multiply(ten);            if (c >= '4') {                if (c == '6')                    res = res.add(three);                else                    res = res.add(two);            }        }        return res;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="You-Can-Go-Your-Own-Way"><a href="#You-Can-Go-Your-Own-Way" class="headerlink" title="You Can Go Your Own Way"></a>You Can Go Your Own Way</h3><blockquote><h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h3><p>You have just entered the world’s easiest maze. You start in the northwest cell of an <strong>N</strong> by <strong>N</strong> grid of unit cells, and you must reach the southeast cell. You have only two types of moves available: a unit move to the east, and a unit move to the south. You can move into any cell, but you may not make a move that would cause you to leave the grid.</p><p>You are excited to be the first in the world to solve the maze, but then you see footprints. Your rival, Labyrinth Lydia, has already solved the maze before you, using the same rules described above!</p><p>As an original thinker, you do not want to reuse any of Lydia’s moves. Specifically, if her path includes a unit move from some cell A to some adjacent cell B, your path cannot also include a move from A to B. (However, in that case, it is OK for your path to visit A or visit B, as long as you do not go from A to B.) Please find such a path.</p><p>In the following picture, Lydia’s path is indicated in blue, and one possible valid path for you is indicated in orange:</p><p><img src="/2019/04/08/Code-Jam-2019-Qualification-Round/path.svg" alt></p><h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h3><p>The first line of the input gives the number of test cases, <strong>T</strong>. <strong>T</strong> test cases follow; each case consists of two lines. The first line contains one integer <strong>N</strong>, giving the dimensions of the maze, as described above. The second line contains a string <strong>P</strong>of 2<strong>N</strong> - 2 characters, each of which is either uppercase <code>E</code> (for east) or uppercase <code>S</code>(for south), representing Lydia’s valid path through the maze.</p><h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><p>For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is a string of 2<strong>N</strong> - 2 characters each of which is either uppercase <code>E</code> (for east) or uppercase <code>S</code> (for south), representing your valid path through the maze that does not conflict with Lydia’s path, as described above. It is guaranteed that at least one answer exists.</p><h3 id="Limits-1"><a href="#Limits-1" class="headerlink" title="Limits"></a>Limits</h3><p>1 ≤ <strong>T</strong> ≤ 100.<br>Time limit: 15 seconds per test set.<br>Memory limit: 1GB.<br><strong>P</strong> contains exactly <strong>N</strong> - 1 <code>E</code> characters and exactly <strong>N</strong> - 1 <code>S</code> characters.</p><h4 id="Test-set-1-Visible-1"><a href="#Test-set-1-Visible-1" class="headerlink" title="Test set 1 (Visible)"></a>Test set 1 (Visible)</h4><p>2 ≤ <strong>N</strong> ≤ 10.</p><h4 id="Test-set-2-Visible-1"><a href="#Test-set-2-Visible-1" class="headerlink" title="Test set 2 (Visible)"></a>Test set 2 (Visible)</h4><p>2 ≤ <strong>N</strong> ≤ 1000.</p><h4 id="Test-set-3-Hidden-1"><a href="#Test-set-3-Hidden-1" class="headerlink" title="Test set 3 (Hidden)"></a>Test set 3 (Hidden)</h4><p>For at most 10 cases, 2 ≤ <strong>N</strong> ≤ 50000.<br>For all other cases, 2 ≤ <strong>N</strong> ≤ 10000.</p><h3 id="Sample-1"><a href="#Sample-1" class="headerlink" title="Sample"></a>Sample</h3><div class="table-container"><table><thead><tr><th>Input</th><th>Output</th></tr></thead><tbody><tr><td><code>2 2 SE 5 EESSSESE</code></td><td><code>Case #1: ES Case #2: SEEESSES</code></td></tr></tbody></table></div><p>In Sample Case #1, the maze is so small that there is only one valid solution left for us.</p><p>Sample Case #2 corresponds to the picture above. Notice that it is acceptable for the paths to cross.</p></blockquote><p>一开始我想的很复杂，回溯法解决：首先在<code>n*n</code>的格子上标记每个格子走的路线，如果遇到同路那就返回上一步换个方向继续做。时间和空间复杂度是$O(n^2)$，代码也很长：</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.*;public class Solution {    private static char[][] map;    private static List<String> res;    public static void main(String[] args) {        res = new ArrayList<>();        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));        int t = in.nextInt();        for (int ti = 1; ti <= t; ti++) {            int n = in.nextInt();            in.nextLine();            String path = in.nextLine();            map = new char[n][n];            res.clear();            int x = 0, y = 0;            for (int i = 0; i < path.length(); i++) {                map[x][y] = path.charAt(i);                if (path.charAt(i) == 'E')                    y++;                else                    x++;            }            findAnotherPath(0, 0, new StringBuilder());            System.out.println("Case #" + ti + ": " + res.get(0));        }    }    private static boolean findAnotherPath(int x, int y, StringBuilder curr) {        int n = map.length;        if (x == n - 1 && y == n - 1) {            res.add(curr.toString());            return true;        }        boolean goEast = false, goSouth = false;        if (map[x][y] != 'S' && y != n - 1) {            curr.append('S');            goEast = findAnotherPath(x, y + 1, curr);            curr.setLength(curr.length() - 1);        }        if (!goEast && map[x][y] != 'E' && x != n - 1) {            curr.append('E');            goSouth = findAnotherPath(x + 1, y, curr);            curr.setLength(curr.length() - 1);        }        return goEast || goSouth;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后顺利通过了两个visible case。</p><p>比赛结束之后，发现还有hidden case没过。看了一下analysis，才知道有一种更简洁的方法：</p><p>那就是始终走对称路线！</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">import java.io.BufferedReader;import java.io.InputStreamReader;import java.util.*;public class Solution {    public static void main(String[] args) {        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));        int t = in.nextInt();        for (int ti = 1; ti <= t; ti++) {            int n = in.nextInt();            in.nextLine();            String path = in.nextLine();            System.out.println("Case #" + ti + ": " + inversePath(path));        }    }    private static String inversePath(String path) {        StringBuilder res = new StringBuilder();        for (int i = 0; i < path.length(); i++)            res.append(path.charAt(i) == 'S' ? 'E' : 'S');        return res.toString();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Cryptopangrams"><a href="#Cryptopangrams" class="headerlink" title="Cryptopangrams"></a>Cryptopangrams</h3><blockquote><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem"></a>Problem</h3><p>On the Code Jam team, we enjoy sending each other <em>pangrams</em>, which are phrases that use each letter of the English alphabet at least once. One common example of a pangram is “the quick brown fox jumps over the lazy dog”. Sometimes our pangrams contain confidential information — for example, <code>CJ QUIZ: KNOW BEVY OF DP FLUX ALGORITHMS</code> — so we need to keep them secure.</p><p>We looked through a cryptography textbook for a few minutes, and we learned that it is very hard to factor products of two large prime numbers, so we devised an encryption scheme based on that fact. First, we made some preparations:</p><ul><li>We chose 26 different prime numbers, none of which is larger than some integer <strong>N</strong>.</li><li>We sorted those primes in increasing order. Then, we assigned the smallest prime to the letter <code>A</code>, the second smallest prime to the letter <code>B</code>, and so on.</li><li>Everyone on the team memorized this list.</li></ul><p>Now, whenever we want to send a pangram as a message, we first remove all spacing to form a plaintext message. Then we write down the product of the prime for the first letter of the plaintext and the prime for the second letter of the plaintext. Then we write down the product of the primes for the second and third plaintext letters, and so on, ending with the product of the primes for the next-to-last and last plaintext letters. This new list of values is our ciphertext. The number of values is one smaller than the number of characters in the plaintext message.</p><p>For example, suppose that <strong>N</strong> = 103 and we chose to use the first 26 odd prime numbers, because we worry that it is too easy to factor even numbers. Then <code>A</code> = 3, <code>B</code> = 5, <code>C</code> = 7, <code>D</code> = 11, and so on, up to <code>Z</code> = 103. Also suppose that we want to encrypt the <code>CJ QUIZ</code>… pangram above, so our plaintext is <code>CJQUIZKNOWBEVYOFDPFLUXALGORITHMS</code>. Then the first value in our ciphertext is 7 (the prime for <code>C</code>) times 31 (the prime for <code>J</code>) = <code>217</code>; the next value is <code>1891</code>, and so on, ending with <code>3053</code>.</p><p>We will give you a ciphertext message and the value of <strong>N</strong> that we used. We will not tell you which primes we used, or how to decrypt the ciphertext. Do you think you can recover the plaintext anyway?</p><h3 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h3><p>The first line of the input gives the number of test cases, <strong>T</strong>. <strong>T</strong> test cases follow; each test case consists of two lines. The first line contains two integers: <strong>N</strong>, as described above, and <strong>L</strong>, the length of the list of values in the ciphertext. The second line contains <strong>L</strong> integers: the list of values in the ciphertext.</p><h3 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h3><p>For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is a string of <strong>L</strong> + 1 uppercase English alphabet letters: the plaintext.</p><h3 id="Limits-2"><a href="#Limits-2" class="headerlink" title="Limits"></a>Limits</h3><p>1 ≤ <strong>T</strong> ≤ 100.<br>Time limit: 20 seconds per test set.<br>Memory limit: 1 GB.<br>25 ≤ <strong>L</strong> ≤ 100.<br>The plaintext contains each English alphabet letter at least once.</p><h4 id="Test-set-1-Visible-2"><a href="#Test-set-1-Visible-2" class="headerlink" title="Test set 1 (Visible)"></a>Test set 1 (Visible)</h4><p>101 ≤ <strong>N</strong> ≤ 10000.</p><h4 id="Test-set-2-Hidden"><a href="#Test-set-2-Hidden" class="headerlink" title="Test set 2 (Hidden)"></a>Test set 2 (Hidden)</h4><p>101 ≤ <strong>N</strong> ≤ 10100.</p><h3 id="Sample-2"><a href="#Sample-2" class="headerlink" title="Sample"></a>Sample</h3><div class="table-container"><table><thead><tr><th>Input</th><th></th></tr></thead><tbody><tr><td><code>2 103 31 217 1891 4819 2291 2987 3811 1739 2491 4717 445 65 1079 8383 5353 901 187 649 1003 697 3239 7663 291 123 779 1007 3551 1943 2117 1679 989 3053 10000 25 3292937 175597 18779 50429 375469 1651121 2102 3722 2376497 611683 489059 2328901 3150061 829981 421301 76409 38477 291931 730241 959821 1664197 3057407 4267589 4729181 5335543</code></td><td></td></tr><tr><td></td><td></td></tr><tr><td>Output</td><td></td></tr><tr><td><code>Case #1: CJQUIZKNOWBEVYOFDPFLUXALGORITHMS Case #2: SUBDERMATOGLYPHICFJKNQVWXZ</code></td></tr></tbody></table></div></blockquote><p>思路很简单，找到两个相邻的数的最大公因数，例如相邻两个数是<code>a * b</code>和<code>b*c</code>，那么最大公因数就是<code>b</code></p><p>后面hidden case比较大，1e100的数据量，一开始想的是先别考虑了</p><p>然后我就掉入了巨坑……</p><p>简单写了一下使用<code>Integer</code>存保存数组的代码，gcd用的是欧几里得算法的加强版，对较大的数提高了一点效率。</p><p>运行了一下sample，ok</p><p>结果在visible case上面<code>re(runtime error)</code>了。</p><p>冥思苦想，可能是数据太大溢出了？我寻思这也不是什么大的数据啊？？</p><p>索性上<code>BigInteger</code>库改写了一下代码，正好可以解决hidden case的问题：</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">import java.io.BufferedReader;import java.io.InputStreamReader;import java.math.BigInteger;import java.util.*;public class Solution {    public static void main(String[] args) {        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));        int t = in.nextInt();        for (int i = 1; i <= t; ++i) {            BigInteger up = in.nextBigInteger();            int n = in.nextInt();            BigInteger[] product = new BigInteger[n];            for (int j = 0; j < n; j++)                product[j] = in.nextBigInteger();            System.out.println("Case #" + i + ": " + decrypt(n, product));        }    }    private static String decrypt(int n, BigInteger[] product) {        BigInteger[][] factor = new BigInteger[n][2];        StringBuilder res = new StringBuilder();        Set<BigInteger> primes = new HashSet<>();        factor[0][1] = product[0].gcd(product[1]);        factor[0][0] = product[0].divide(factor[0][1]);        primes.add(factor[0][0]);        for (int i = 1; i < n; i++) {            factor[i][0] = factor[i - 1][1];            factor[i][1] = product[i].divide(factor[i][0]);            primes.add(factor[i][0]);        }        primes.add(factor[n - 1][1]);        List<BigInteger> nums = new ArrayList<>(primes);        Collections.sort(nums);        Map<BigInteger, Character> dict = new HashMap<>();        for (int i = 0; i < nums.size(); i++)            dict.put(nums.get(i), (char) ('A' + i));        for (int i = 0; i < n; i++)            res.append(dict.get(factor[i][0]));        res.append(dict.get(factor[n - 1][1]));        return res.toString();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自我感觉良好～sample ok之后就立马去attempt了。</p><p>结果：<code>RE</code></p><p>心态略崩，那说明不是刚才说的问题咯？</p><p>于是去查了一下<code>RE</code>都有哪些错误——除了数组越界（这个不会吧，sample都过了），最可能的就是算数除0错误？</p><h3 id="喵喵喵？哪里有0啊？"><a href="#喵喵喵？哪里有0啊？" class="headerlink" title="喵喵喵？哪里有0啊？"></a>喵喵喵？哪里有0啊？</h3><p>苦恼地改进了一下代码，把原来两行的数组改成一行了。话说本来就该用一行做的……</p><p>虽然很奇怪，但是我还是顺着这个想法，在代码中除的部分用了一次catch，捕捉之后返回错误的结果。</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">private static String decrypt(int n, BigInteger[] product) {    BigInteger[] factor = new BigInteger[n + 1];    StringBuilder res = new StringBuilder();    Set<BigInteger> primes = new HashSet<>();    try {        factor[0] = product[0].divide(product[0].gcd(product[1]));    } catch (ArithmeticException e) {        return "ERROR";// 如果出现除0错误，那么提交结果就会变成WA    }    primes.add(factor[0]);    for (int i = 0; i < n; i++) {        try {            factor[i + 1] = product[i].divide(factor[i]);        } catch (ArithmeticException e) {            return "ERROR";// 如果出现除0错误，那么提交结果就会变成WA        }        primes.add(factor[i]);    }    primes.add(factor[n]);    List<BigInteger> tmp = new ArrayList<>(primes);    Collections.sort(tmp);    Map<BigInteger, Character> dict = new HashMap<>();    for (int i = 0; i < tmp.size(); i++)        dict.put(tmp.get(i), (char) ('A' + i));    for (BigInteger num : factor)        res.append(dict.getOrDefault(num, '@'));    return res.toString();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这次提交果然变成了<code>WA</code>，真的是除0的结果……</p><p>然而还是百思不得其解。</p><p>心态崩了一会，只好上ide了。</p><p>在intellij里面写了一下用0～1000的质数生成case的代码：</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public static void generate(int n, int m) {    System.out.println(n);    int[] nums = {2, 89, 109, 211, 239, 353, 479, 601, 701, 827, 883, 1021, 1051, 1087, 1277, 1381, 1531, 1571, 1669, 1861, 1973, 1997, 2137, 2213, 2281, 2411};    Map<Character, Integer> dict = new HashMap<>();    int[] res = new int[m + 1], product = new int[m];    for (int i = 0; i < 26; i++)        dict.put((char) (i + 'A'), nums[i]);    Random r = new Random();    for (int ti = 0; ti < n; ti++) {        for (int i = 0; i < m + 1; i++) {            char c = (char) ('A' + r.nextInt(26));            res[i] = dict.get(c);        }        for (int i = 0; i < m; i++)            product[i] = res[i] * res[i + 1];        System.out.println("10000 " + m);        for (int i = 0; i < m; i++)            System.out.print(product[i] + " ");        System.out.println();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果做了几次实验，还真撞到一个error的case！</p><p>这还不赶紧保存下来，一看生成的case……</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">...10000 1004419361 4419361 2325863 1073071 2181877 4566769 4874497 4562 3994 2098847 371003 311699 618983 1498037 3566653 3338 4 706 704941 3...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第一个数和第二个数是相等的！这样一来它们的公因数就是本身——意味着我会认为第一个数对应的质数是1，第二个数的质数是它本身，第三个数的质数就是它除以第二个数，而如果它还比第二个数小，那么除法就会返回0！</p><p>终于想明白这一点之后，我开始思考解决方案：</p><ul><li>遇到这种情况，排列肯定出现了<code>aba</code>型的序列，导致前后两个乘积是相等的，得出的公因数就无效了。</li><li>每个字母在每段明文都出现至少一次，那么明文肯定出现了至少三个字母，那么肯定在某一处会有<code>abc</code>型的序列，他们保证乘积不相等。</li><li>那么就在找到不同的数之后，从他们入手解出公因数，然后向两侧【传播】。</li></ul><p>做到这点，终于做出了。比赛结束后一看，hidden case也搞定了，真不错。</p><p>最终完整代码如下：</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">import java.io.BufferedReader;import java.io.InputStreamReader;import java.math.BigInteger;import java.util.*;public class Solution {    public static void main(String[] args) {        Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));        int t = in.nextInt();        for (int i = 1; i <= t; ++i) {            BigInteger up = in.nextBigInteger();            int n = in.nextInt();            BigInteger[] product = new BigInteger[n];            for (int j = 0; j < n; j++)                product[j] = in.nextBigInteger();            System.out.println("Case #" + i + ": " + decrypt(n, product));        }    }    private static String decrypt(int n, BigInteger[] product) {        BigInteger[] factor = new BigInteger[n + 1];        StringBuilder res = new StringBuilder();        Set<BigInteger> primes = new HashSet<>();        int mid = 0;        while (mid < n - 1 && product[mid].equals(product[mid + 1]))            mid++;        factor[mid] = product[mid].divide(product[mid].gcd(product[mid + 1]));        primes.add(factor[mid]);          // 向右计算        for (int i = mid; i < n; i++) {            factor[i + 1] = product[i].divide(factor[i]);            primes.add(factor[i + 1]);        }          // 向左计算        for (int i = mid; i > 0; i--) {            factor[i - 1] = product[i - 1].divide(factor[i]);            primes.add(factor[i - 1]);        }          // set中质数排序后和对应字母构成字典        List<BigInteger> tmp = new ArrayList<>(primes);        Collections.sort(tmp);        Map<BigInteger, Character> dict = new HashMap<>();        for (int i = 0; i < tmp.size(); i++)            dict.put(tmp.get(i), (char) ('A' + i));          // 这里以防万一嘛，虽然题目要求肯定不会出现get不到的字母        for (BigInteger num : factor)            res.append(dict.getOrDefault(num, '@'));        return res.toString();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O( n)$</li></ul><h3 id="Dat-Bae"><a href="#Dat-Bae" class="headerlink" title="Dat Bae"></a>Dat Bae</h3><blockquote><h3 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem"></a>Problem</h3><p>A research consortium has built a new database system for their new data center. The database is made up of one master computer and <strong>N</strong> worker computers, which are given IDs from 0 to <strong>N</strong>-1. Each worker stores exactly one bit of information… which seems rather wasteful, but this is very important data!</p><p>You have been hired to evaluate the following instruction for the database:</p><ul><li><code>TEST_STORE</code> <bits>: The master reads in <bits>, which is a string of <strong>N</strong> bits, and sends the i-th bit to the i-th worker for storage. The master will then read the bits back from the workers and return them to the user, in the same order in which they were read in.</bits></bits></li></ul><p>During normal operation, <code>TEST_STORE</code> should return the same string of bits that it read in, but unfortunately, <strong>B</strong> of the workers are broken!</p><p>The broken workers are correctly able to store the bits given to them, but whenever the master tries to read from a broken worker, no bit is returned. This causes the <code>TEST_STORE</code> operation to return only <strong>N</strong>-<strong>B</strong> bits, which are the bits stored on the non-broken workers (in ascending order of their IDs). For example, suppose <strong>N</strong> = 5 and the 0th and 3rd workers are broken (so <strong>B</strong> = 2). Then:</p><ul><li><code>TEST_STORE 01101</code> returns <code>111</code>.</li><li><code>TEST_STORE 00110</code> returns <code>010</code>.</li><li><code>TEST_STORE 01010</code> returns <code>100</code>.</li><li><code>TEST_STORE 11010</code> also returns <code>100</code>.</li></ul><p>For security reasons, the database is hidden in an underground mountain vault, so calls to <code>TEST_STORE</code> take a very long time. You have been tasked with working out which workers are broken using at most <strong>F</strong> calls to <code>TEST_STORE</code>.</p><h3 id="Input-and-output"><a href="#Input-and-output" class="headerlink" title="Input and output"></a>Input and output</h3><p>This is an interactive problem. You should make sure you have read the information in the Interactive Problems section of our <a href="https://codingcompetitions.withgoogle.com/codejam/faq" target="_blank" rel="noopener">FAQ</a>.</p><p>Initially, your program should read a single line containing a single integer <strong>T</strong>indicating the number of test cases. Then, you need to process <strong>T</strong> test cases.</p><p>For each test case, your program will first read a single line containing three integers <strong>N</strong>, <strong>B</strong>, and <strong>F</strong>, indicating the number of workers, the number of broken workers, and the number of lines you may send (as described below).</p><p>Then you may send the judge up to <strong>F</strong> lines, each containing a string of exactly <strong>N</strong>characters, each either <code>0</code> or <code>1</code>. Each time you send a line, the judge will check that you have not made more than <strong>F</strong> calls. If you have, the judge will send you a single line containing a single <code>-1</code>, and then finish all communication and wait for your program to finish. Otherwise, the judge will send a string of length <strong>N</strong>-<strong>B</strong>: the string returned by <code>TEST_STORE</code>, as described above.</p><p>Once your program knows the index of the <strong>B</strong> broken workers, it can finish the test case by sending <strong>B</strong> space-separated integers: the IDs of the broken workers, in sorted order. This does not count as one of your <strong>F</strong> calls.</p><p>If the <strong>B</strong> integers are not exactly the IDs of the <strong>B</strong> broken workers, you will receive a Wrong Answer verdict, and the judge will send a single line containing <code>-1</code>, and then no additional communication. If your answer was correct, the judge will send a single line with <code>1</code>, followed by the line that begins the next test case (or exit, if that was the last test case).</p><h3 id="Limits-3"><a href="#Limits-3" class="headerlink" title="Limits"></a>Limits</h3><p>Time limit: 20 seconds per test set.<br>Memory limit: 1GB.<br>1 ≤ <strong>T</strong> ≤ 100.<br>2 ≤ <strong>N</strong> ≤ 1024.<br>1 ≤ <strong>B</strong> ≤ min(15, <strong>N</strong>-1).</p><h4 id="Test-set-1-Visible-3"><a href="#Test-set-1-Visible-3" class="headerlink" title="Test set 1 (Visible)"></a>Test set 1 (Visible)</h4><p><strong>F</strong> = 10.</p><h4 id="Test-set-2-Hidden-1"><a href="#Test-set-2-Hidden-1" class="headerlink" title="Test set 2 (Hidden)"></a>Test set 2 (Hidden)</h4><p><strong>F</strong> = 5.</p><h3 id="Testing-Tool"><a href="#Testing-Tool" class="headerlink" title="Testing Tool"></a>Testing Tool</h3><p>You can use this testing tool to test locally or on our servers. To test locally, you will need to run the tool in parallel with your code; you can use our <a href="https://storage.googleapis.com/coding-competitions.appspot.com/interactive_runner.py" target="_blank" rel="noopener">interactive runner</a> for that. For more information, read the Interactive Problems section of the <a href="https://codingcompetitions.withgoogle.com/codejam/faq" target="_blank" rel="noopener">FAQ</a>.</p><h3 id="Local-Testing-Tool"><a href="#Local-Testing-Tool" class="headerlink" title="Local Testing Tool"></a>Local Testing Tool</h3><p>To better facilitate local testing, we provide you the following script. Instructions are included inside. You are encouraged to add more test cases for better testing. Please be advised that although the testing tool is intended to simulate the judging system, it is <strong>NOT</strong> the real judging system and might behave differently.</p><p>If your code passes the testing tool but fails the real judge, please check <a href="https://code.google.com/codejam/resources/faq#language-details" target="_blank" rel="noopener">here</a> to make sure that you are using the same compiler as us.</p><p><a href="https://codingcompetitions.withgoogle.com/codejam/round/0000000000051705/00000000000881de#" target="_blank" rel="noopener"><em>file_download</em>Download testing_tool.py</a></p><h3 id="Sample-Interaction"><a href="#Sample-Interaction" class="headerlink" title="Sample Interaction"></a>Sample Interaction</h3><p>The following interaction meets the limits for Test set 1.</p><pre class="line-numbers language-lang-python"><code class="language-lang-python">  t = readline_int()           // Reads 2 into t  n, b, f = readline_int_list()  // Reads 5, 2, 10 into n, b, f  printline 01101 to stdout    // The next four outputs match the example in                               // the problem statement.  flush stdout  response = readline_str()    // Reads 111 into response. (At this point, we                               // could determine the answer; the remaining                               // queries are just examples!)  printline 00110 to stdout  flush stdout  response = readline_str()    // Reads 010 into response  printline 01010 to stdout  flush stdout  response = readline_str()    // Reads 100 into response  printline 11010 to stdout  flush stdout  response = readline_str()    // Reads 100 into response  printline 0 3 to stdout      // Guesses the answer. Notice that we were                               // not required to use all 10 of our allowed                               // queries.  flush stdout  verdict = readline_int()     // Reads 1 into verdict. We got that test case                               // right!  n, b, f = readline_int_list()  // Reads 2, 1, 10 into n, b, f.  printline 01 to stdout       // 01 is a query, not a guess at the final                               // answer (if we wanted to guess that just                               // worker 1 were broken, we would have to                               // send 1 as we do below)  flush stdout  response = readline_str()    // Reads 1 into response.  printline 1 to stdout        // Makes a (bad) wild guess.  verdict = readline_str()     // Reads -1 into verdict.  exit                         // exits to avoid an ambiguous TLE error<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>这题比赛的时候没有做，现在研究一下。</p><p>少见的交互题，其实就是和控制台输入输出的交互。</p><p>说的是如何在有限次收发信息中确定缺失的机子有哪些。</p><p>这题可以说是四道题里面最难的一道了，也是做的人最少的。以下思路和代码来自分析：</p><ol><li><p>首先，介绍一下这题的交互方式：</p><ul><li>开头输入和其他题目一样，先输入次数，然后每轮输入N，B和F；</li><li>程序需要输出F行，每行是测试数据（也就是长度为N的0和1的字符串）</li><li>此时交互端读取程序输出，并依次返回测试结果到输出。</li><li>程序需要读入结果，分析出出错的序号，中间用空格分开。</li><li>交互端会根据读入的结果，返回-1或者1，前者表示错误而后者表示正确。</li></ul></li><li><p>思路？</p><ul><li><p>首先，如果一台机器坏了，那么它接下来的反馈不论如何都会缺失，所以导致整列数据缺失；</p></li><li><p>在case1中，长度是1024，允许猜测10次；那么我们需要构造出一个序列，使得每一列都具有一个独特的标示，而我们读出缺少的列就可以判断缺少的数。幸运的是，1024是2的10次方，所以我们能够如此构造：</p><ul><li>由01重复构成的串</li><li>由0011节重复构成的串</li><li>由00001111节重复构成的串</li><li>……</li><li>由16个0和16个1组成的节重复构成的串</li></ul><p>为什么要这么构造呢？那是因为我们可以惊奇的发现，这样做之后，从左到右的列，它们从下往上排列的串——比如，第一列是0000000000，第二列是0000000001——刚好是列的序号的二进制表示。最后一个串是1111111111，即1023。如此一来，我们可以通过判断某个数字是否存在来判断列是否缺失。</p></li><li><p>在case2中，我们最多只能请求5次，这就不像第一部分一样直接，但是思路是类似的。由于我们只能够使用5次，那么我们只能表示从0到2的5次，也就是0～15的范围。我们无法直接用列的数字和列关联起来，但是我们可以把所有的列分为16个一组，通过组号和组内缺失的数字来确定丢失的数字。</p><ul><li>注意，因为坏掉的机器最多只有15台，所以不会出现整个组都坏掉，或者本来在两组的部分被当作一组来看待——举个例子，如果最坏情况出现，那就是连续的15台机器坏掉，从某组的1号开始一直坏到15号，那么它和下一组将会有2个0，我们依然能够将它们区分成两组（因为没有一组会包含两个相同的数字）。</li></ul></li></ul></li></ol><p>代码来源：<a href="https://github.com/arthtyagi/Google-Code-Jam" target="_blank" rel="noopener">https://github.com/arthtyagi/Google-Code-Jam</a></p><p>遗憾的是，这段代码测试是re。目前没有找到简洁的代码。</p><p>有时间我自己写一份吧😠</p><pre class="line-numbers language-lang-python"><code class="language-lang-python">import sysdef solve():    N, B, F = map(int, input().split())    mask = (1 << F) - 1    for i in range(F):        send = "".join(map(str, [(((mask & x) >> i) & 1) for x in range(N)]))        print(send)    sys.stdout.flush()    recv = [list(map(int, input())) for _ in range(F)]      ans = []    i = 0    for x in range(N):        if i == N - B:            ans.append(x)            continue        xx = 0        for j in range(F):            xx |= (recv[j][i]) << j        if xx == (x & mask):            i += 1        else:            ans.append(x)    print(" ".join(map(str, ans)))    sys.stdout.flush()    return int(input()) == 1if __name__ == "__main__":    T = int(input())    for _ in range(T):        if not solve():            break<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> competition </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code jam </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML学习日记4——以少女前线为例讲解贝叶斯分类算法</title>
      <link href="/2019/04/07/ML-4-Bayesian/"/>
      <url>/2019/04/07/ML-4-Bayesian/</url>
      
        <content type="html"><![CDATA[<p>看了李宏毅老师讲解classification的视频，决定以少女前线的枪种分类为例，试做一个贝叶斯分类器。</p><p>前半段理论主要来自李宏毅老师的视频，后半段是自己实现的贝叶斯分类器代码。</p><p><img src="/2019/04/07/ML-4-Bayesian/head.jpg" alt></p><p><s>找这张配图的时间比码字时间还长</s></p><p>我永远喜欢忤逆小队！</p><a id="more"></a><h2 id="理论部分"><a href="#理论部分" class="headerlink" title="理论部分"></a>理论部分</h2><h3 id="话题引入"><a href="#话题引入" class="headerlink" title="话题引入"></a>话题引入</h3><p>首先做一个题。</p><p>我有两个抽屉A和B，里面放着白球和红球；</p><p>A中红球和白球的个数比为1:3，B中红球和白球的个数比为2:3；</p><p>现在要从两个抽屉中抽一个球，从A抽屉和B抽屉中选择的概率比为1:2；</p><p>如果抽中红球，问：求抽到的球来自A抽屉的概率？</p><p>答案很简单，$P(A|red)=\frac{P(A)P(red|A)}{P(A)P(red|A)+P(B)P(red|B)}$</p><h3 id="分类思想"><a href="#分类思想" class="headerlink" title="分类思想"></a>分类思想</h3><p>首先，我们知道类和类之间是有联系的，我们不能完全确定x是否属于A或者B类，而是只能把归属可能性最大的类作为我们对x的分类。</p><p>现在我们不妨脑洞大开一下，把一个抽屉当作一个类别，把球当做一个需要分类的对象，我们需要找到这个球是哪一类的，其实就是找到这个球最有可能来自哪个抽屉，这样就和上面的公式是一回事了。</p><p>换言之，对某一个待归类的x，我们把它当作是已经取出的”球”，通过计算某个类别（抽屉）产生出case（从这一抽屉中抽球）的概率，以及各个类别（抽屉）产生出这一个x的概率，就可以计算出x属于每一类的概率。</p><p>当它属于某一类A的概率最大的时候，我们就将它分类为A类。</p><p>这一模型又被称为<em>generative model</em>——生成模型，也就是说这个模型其实不单可以归类，也可以用于产生case。</p><h3 id="具体分析产生的模型是什么样的？"><a href="#具体分析产生的模型是什么样的？" class="headerlink" title="具体分析产生的模型是什么样的？"></a>具体分析产生的模型是什么样的？</h3><p>根据刚才的模型，我们需要两类参数才能计算分类概率：</p><ol><li>某个类生产case的概率（从这个抽屉抽球的概率）</li><li>这个类产生出的case是x的概率（抽到的球是红球的概率）</li></ol><p>对1，使用训练集中该类的数据量占总数据量的个数作为这个类生产case的概率。</p><p>比较复杂的是2：</p><h4 id="生成的数据是x的概率如何计算？"><a href="#生成的数据是x的概率如何计算？" class="headerlink" title="生成的数据是x的概率如何计算？"></a>生成的数据是x的概率如何计算？</h4><p>我们以少前各个枪种为例：每一把枪具有血量、伤害、命中、回避、射速等等数值属性，它们都是一定范围内的整数，可以看作连续变量，而且同一类枪种的某一属性值都比较接近（比如，rf狙击枪的满级伤害普遍在120+，而射速普遍在40以下），可以认为是一个多维的正态分布生成的。</p><p>这样一来，我们可以以x属性在这一正态分布下的概率密度（注意，离散变量谈概率而连续变量谈概率密度）作为生成数据是x的概率。</p><h4 id="那么，怎样求出这一个正态分布的参数？"><a href="#那么，怎样求出这一个正态分布的参数？" class="headerlink" title="那么，怎样求出这一个正态分布的参数？"></a>那么，<strong>怎样求出这一个正态分布的参数</strong>？</h4><p>方法是极大似然估计：选取让过去发生的事情可能性最大的参数。</p><p>对一个正态分布$f_{\mu,\sum}$，它得出之前的case的概率越大，它就越好。</p><p>所以把最大似然作为目标函数，取微分为0的参数为最好的参数（过程略）：</p><ul><li><p>对一类train data，取它们的平均值作为$\mu$即$\mu=\frac{\sum_{i=1}^nx^i}{n}$，而$\sum=\frac{\sum^n_{i=1}(x^i-\mu)(x^i-\mu)^T}{n}​$。</p></li><li><p>注意这里的$\mu$是维度等于属性个数的向量，$\sum$是属性的协方差矩阵。</p></li></ul><h4 id="有了参数，如何评估产生x的可能性？"><a href="#有了参数，如何评估产生x的可能性？" class="headerlink" title="有了参数，如何评估产生x的可能性？"></a>有了参数，<strong>如何评估产生x的可能性</strong>？</h4><p>套公式呗。高斯分布的概率密度公式：</p><p>$P(C_i) * P(x | C_i) = \frac{1}{(2\pi)^{D/2}}\frac{1}{|\sum^i|^{1/2}}exp({-\frac{1}{2}(x-\mu^i)(\sum^i)^{-1}(x-\mu^i)})$</p><blockquote><p>【补充】多元正态分布的参数：</p><p>先从各维度不相关的多元正态分布入手，数据点通过d维的列向量描述$x=\left[ x_1,x_2,\cdots,x_d \right]^T$，各个维度的均值方差分别为$[\mu_1,\mu_2,\cdots,\mu_d]$ , $[\sigma_1,\sigma_2,\cdots,\sigma_d]$ 来描述，高斯概率密度函数可以表示为：</p><p>$f(x)=\frac{1}{(\sqrt{2\pi})^d\sigma_1\sigma_2\cdots\sigma_d}e^{-\frac{1}{2}[(\frac{x_1-\mu_1}{\sigma_1})^2+(\frac{x_2-\mu_2}{\sigma_2})^2+\cdots+(\frac{x_d-\mu_1}{\sigma_d})^2]}​$</p><p>前面多出的项是为了让概率之和为1，其实这个方程可以这样子去解读：</p><p>$f(x)=\frac{1}{(\sqrt{2\pi})\sigma_1}e^{-\frac{1}{2}(\frac{x_1-\mu_1}{\sigma_1})^2}\frac{1}{(\sqrt{2\pi})\sigma_2}e^{-\frac{1}{2}(\frac{x_2-\mu_2}{\sigma_2})^2}\cdots\frac{1}{(\sqrt{2\pi})\sigma_d}e^{-\frac{1}{2}(\frac{x_d-\mu_d}{\sigma_d})^2}$</p><p>而当我们考虑变量之间的并不独立的情况，我们可以用$\sum$相关矩阵取代$\sigma$向量（其实原本的$\sigma$向量可以看作是一个主对角阵，而$\sum$是它的一般化，其他位置表示的是各个维度之间的关系）</p></blockquote><h2 id="实践部分"><a href="#实践部分" class="headerlink" title="实践部分"></a>实践部分</h2><p>多说无益，开始写代码。</p><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><ul><li>选取了数据的6-10列，即血量、伤害、命中、回避、射速属性。<a href="https://drive.google.com/file/d/1AKcKtE_YvYDCMFMOojWJ5I-z0KOiWVPh/view?usp=sharing" target="_blank" rel="noopener">数据在这里哦</a></li><li>切分成test和train两部分。</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">import numpy as npfrom random import randintdef loadData(file):    content = np.loadtxt(file, dtype=np.str, delimiter=',')[1:]    types = [line[2] for line in content]    attrs = [[float(num) for num in line[6:11]] for line in content]    return types, attrsdef splitCases(x, y):    if len(x) != len(y):        return [], [], [], []    trainX, trainY, testX, testY = [], [], [], []    for i in range(len(x)):        if randint(1, 4) > 3:            testX.append(x[i])            testY.append(y[i])        else:            trainX.append(x[i])            trainY.append(y[i])    return trainX, trainY, testX, testYtypes, attrs = loadData('./data/gf.csv')TrainX, TrainY, TestX, TestY = splitCases(attrs, types)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求高斯分布参数"><a href="#求高斯分布参数" class="headerlink" title="求高斯分布参数"></a>求高斯分布参数</h3><ul><li>按照枪种分类形成字典，并且计算出每一类枪的高斯分布参数（协方差矩阵）：</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">def splitByType(x, y):    _groups = {}    for _i in range(len(x)):        if y[_i] not in _groups:            _groups[y[_i]] = []        _groups[y[_i]].append(x[_i])    return _groupsdef gaussianFit(_attr):    _n, _m = len(_attr), len(_attr[0])    _mean = np.zeros(_m)    _sigma = np.mat(np.zeros((_m, _m)))    for _j in range(_m):        for _i in range(_n):            _mean[_j] += _attr[_i][_j]        _mean[_j] /= _n    for _i in range(_n):        _tmp = np.mat([_attr[_i][_j] - _mean[_j] for _j in range(_m)])        _sigma += np.transpose(_tmp) * _tmp    return _mean, _sigmaGroup = splitByType(TrainX, TrainY)names, pClass, means, sigmas = [], [], [], []count = 0for name, attr in Group.items():    names.append(name)    pClass.append(len(attr))    count += len(attr)    mean, sigma = gaussianFit(attr)    means.append(mean)    sigmas.append(sigma)pClass = [num / count for num in pClass]# 查看一下协方差矩阵：for i in range(len(sigmas)):    print('Covariance matrix for %s' % names[i])    print(sigmas[i])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Covariance matrix for HG[[ 53742.96875   1333.28125  -4061.875   -11030.78125  -2615.46875] [  1333.28125    556.46875    327.875     -609.96875   -432.78125] [ -4061.875      327.875     2283.5       1339.125     -111.125  ] [-11030.78125   -609.96875   1339.125     4815.46875    176.28125] [ -2615.46875   -432.78125   -111.125      176.28125   1193.96875]]Covariance matrix for SMG[[ 2.20652679e+05  7.09821429e+02 -1.90000000e+02 -1.86701786e+04  -1.24607143e+03] [ 7.09821429e+02  1.52678571e+02 -2.90000000e+01 -1.96321429e+02  -1.50928571e+02] [-1.90000000e+02 -2.90000000e+01  5.20000000e+01  1.15000000e+02  -6.80000000e+01] [-1.86701786e+04 -1.96321429e+02  1.15000000e+02  2.51867857e+03   3.66071429e+02] [-1.24607143e+03 -1.50928571e+02 -6.80000000e+01  3.66071429e+02   1.58042857e+03]]Covariance matrix for RF[[15886.95652174  -578.26086957  -984.13043478 -1459.13043478   -256.73913043] [ -578.26086957  7262.43478261   811.2173913   -451.7826087   -885.43478261] [ -984.13043478   811.2173913   1592.60869565   257.60869565    -75.2173913 ] [-1459.13043478  -451.7826087    257.60869565   586.60869565    -42.2173913 ] [ -256.73913043  -885.43478261   -75.2173913    -42.2173913    250.43478261]]Covariance matrix for AR[[ 5.72460e+04 -1.57880e+03 -3.07180e+03 -1.26440e+03  9.71200e+02] [-1.57880e+03  1.36664e+03  7.20400e+01 -2.80680e+02 -1.31936e+03] [-3.07180e+03  7.20400e+01  1.00344e+03  5.11520e+02 -2.59600e+01] [-1.26440e+03 -2.80680e+02  5.11520e+02  5.10160e+02  2.51320e+02] [ 9.71200e+02 -1.31936e+03 -2.59600e+01  2.51320e+02  1.81864e+03]]Covariance matrix for MG[[189016.66666667   4573.33333333  -6338.33333333  -9428.33333333  -14030.        ] [  4573.33333333    811.80952381   -404.80952381   -442.52380952   -1365.42857143] [ -6338.33333333   -404.80952381    533.80952381    589.52380952    1174.42857143] [ -9428.33333333   -442.52380952    589.52380952    777.80952381    1376.57142857] [-14030.          -1365.42857143   1174.42857143   1376.57142857    5124.28571429]]Covariance matrix for SG[[ 4.89192308e+04  7.96153846e+02  1.40000000e+02 -9.53461538e+02   1.29230769e+02] [ 7.96153846e+02  1.32769231e+02 -1.00000000e+01 -3.43076923e+01  -1.13846154e+02] [ 1.40000000e+02 -1.00000000e+01  1.20000000e+01  1.40000000e+01   4.00000000e+00] [-9.53461538e+02 -3.43076923e+01  1.40000000e+01  7.09230769e+01  -5.46153846e+00] [ 1.29230769e+02 -1.13846154e+02  4.00000000e+00 -5.46153846e+00   1.59230769e+02]]</code></pre><h3 id="分类器核心代码"><a href="#分类器核心代码" class="headerlink" title="分类器核心代码"></a>分类器核心代码</h3><ul><li><p>这里的<code>calcPossibility</code>使用的公式：</p><p>$P(C_i) * P(x | C_i) = \frac{1}{(2\pi)^{D/2}}\frac{1}{|\sum^i|^{1/2}}exp({-\frac{1}{2}(x-\mu^i)(\sum^i)^{-1}(x-\mu^i)})​$</p><p>（省略和pi相关的第一项常数，以及分母部分）</p></li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">def calcPossibility(x, i: int):    _tmp = np.mat(x - means[i])    _inv = np.linalg.inv(sigmas[i])    _exp = np.exp(-0.5 * _tmp * _inv * np.transpose(_tmp))    return pClass[i] * _exp / np.sqrt(np.linalg.det(sigmas[i]))def classifier(x):    _maxId, _maxP = 0, -1    for _i in range(len(names)):        _currP = calcPossibility(x, _i)        if _maxP < _currP :            _maxId, _maxP = _i, _currP    return names[_maxId]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试数据："><a href="#测试数据：" class="headerlink" title="测试数据："></a>测试数据：</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">correct = 0for i in range(len(TestX)):    guess = classifier(TestX[i])    print('predict: %s, answer: %s' % (guess, TestY[i]))    if guess == TestY[i]:        correct += 1print('Rate of correct predictions: %f' % (correct / len(TestX)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>predict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: SMG, answer: SMGpredict: SMG, answer: SMGpredict: RF, answer: RFpredict: RF, answer: RFpredict: RF, answer: RFpredict: RF, answer: RFpredict: RF, answer: RFpredict: RF, answer: RFpredict: AR, answer: ARpredict: AR, answer: ARpredict: AR, answer: ARpredict: AR, answer: ARpredict: AR, answer: ARpredict: AR, answer: ARpredict: AR, answer: ARpredict: MG, answer: MGpredict: MG, answer: MGpredict: MG, answer: MGpredict: MG, answer: MGpredict: MG, answer: MGpredict: HG, answer: HGpredict: HG, answer: HGpredict: SMG, answer: SMGpredict: AR, answer: ARpredict: MG, answer: MGpredict: MG, answer: MGpredict: MG, answer: MGpredict: HG, answer: HGpredict: HG, answer: HGpredict: SMG, answer: SMGpredict: HG, answer: HGpredict: RF, answer: RFpredict: SMG, answer: SMGpredict: SG, answer: SGpredict: SG, answer: SGpredict: SG, answer: SGpredict: HG, answer: HGpredict: MG, answer: MGpredict: SMG, answer: SMGpredict: AR, answer: ARpredict: HG, answer: HGpredict: RF, answer: RFpredict: AR, answer: ARpredict: SG, answer: SGpredict: AR, answer: ARpredict: SG, answer: SGpredict: RF, answer: RFRate of correct predictions: 1.000000</code></pre><p>竟然是100%？？这么高的准确率，我佛了。。。</p><p>大概是因为少前里面每一种枪的特征太好区分了吧。</p><p>这里用sklearn库的朴素贝叶斯再试试：</p><pre class="line-numbers language-lang-python"><code class="language-lang-python">from sklearn.naive_bayes import GaussianNBmodel = GaussianNB()model.fit(TrainX, TrainY)res = model.predict(TestX)count = 0for i in range(len(res)):    print('predict: %s, answer: %s' % (res[i], TestY[i]))    if res[i] == TestY[i]:        count += 1print('Rate of correct predictions: %f' % (count / len(TestY)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>predict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: HG, answer: HGpredict: SMG, answer: SMGpredict: SMG, answer: SMGpredict: RF, answer: RFpredict: RF, answer: RFpredict: RF, answer: RF...Rate of correct predictions: 1.000000</code></pre><ul><li>毫无悬念的100%……好吧这说明少前的数据确实特征很明显=。=</li></ul><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="什么是朴素贝叶斯分类？"><a href="#什么是朴素贝叶斯分类？" class="headerlink" title="什么是朴素贝叶斯分类？"></a>什么是朴素贝叶斯分类？</h3><p>假设所有特征是比较独立的情况下，上面的$\sum$矩阵退化为对角阵，可以用$\sigma$向量表示；</p><p>这个时候就是朴素贝叶斯分类，也就是上面sklearn库所做的事情。</p><p>但是在属性特征相关性比较好的时候，NB的分类效果就比较差。</p><p>上面的方法使用的是多个特征的联合概率密度，在维度较高的时候模型就会比较复杂，同时也会造成稀疏的情况。</p><h3 id="可不可以用回归的方法直接做分类？"><a href="#可不可以用回归的方法直接做分类？" class="headerlink" title="可不可以用回归的方法直接做分类？"></a>可不可以用回归的方法直接做分类？</h3><p>一般这么做不好。</p><p>举个例子，用一个回归函数的值和分类对应，函数值接近1就是A类，接近2就是B类，以此类推。</p><p>这样固然可以训练出拟合train data的模型，但是数值上的接近关系不一定就能反映出分类之间的关系（比如，1和2比起1和3更接近，但是A和B不一定就能够比A和C的关系更接近），这样的拟合是不符合分类规律的。</p><h3 id="贝叶斯算法一定是用高斯（正态）分布嘛？"><a href="#贝叶斯算法一定是用高斯（正态）分布嘛？" class="headerlink" title="贝叶斯算法一定是用高斯（正态）分布嘛？"></a>贝叶斯算法一定是用高斯（正态）分布嘛？</h3><p>不一定。这里是根据变量的分布特征决定的，其他还有如多项式模型和伯努利模型都是常见的分布模型。</p><p>特征是离散的时候，一般使用多项式模型；</p><p>特征是离散而且只有0和1两种分布的时候，一般采用伯努利模型。</p><p>特征是连续的时候，一般使用高斯分布模型；</p><h3 id="其他分类器有哪些？"><a href="#其他分类器有哪些？" class="headerlink" title="其他分类器有哪些？"></a>其他分类器有哪些？</h3><p>逻辑回归，SVM，和决策树等等。</p><p>逻辑回归适合线性数据（什么是线性数据？）。</p><p>SVM非常耗时间，工业上不推荐。</p><p>决策树适合用在特征是离散型的变量上。</p><p>贝叶斯通常是用在NLP里面用来做文本分类等等的事情（用在这里也只是因为李宏毅老师讲了这个）</p><p>我暂时说不清楚它们的具体优劣，可以参考<a href="https://blog.csdn.net/July_sun/article/details/53088673" target="_blank" rel="noopener">这里</a>。</p><hr><p>其实个人有几个问题：</p><ul><li><p>混合参数如何建模？比如又有数值型，又有离散型，应该用什么模型？</p></li><li><p>协方差矩阵对比朴素贝叶斯的方差向量效果会提高多少？</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> machine learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> naive bayesian </tag>
            
            <tag> classification </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>32.Longest Valid Partheses</title>
      <link href="/2019/04/07/32-Longest-Valid-Partheses/"/>
      <url>/2019/04/07/32-Longest-Valid-Partheses/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: "(()"Output: 2Explanation: The longest valid parentheses substring is "()"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: ")()())"Output: 4Explanation: The longest valid parentheses substring is "()()"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="暴力求解全部序列找最长"><a href="#暴力求解全部序列找最长" class="headerlink" title="暴力求解全部序列找最长"></a>暴力求解全部序列找最长</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int longestValidParentheses(String s) {        if (s == null)          return 0;      int n = s.length(), res = 0;    for (int start = 0; start < n; start++) {          int balance = 0;        for (int end = start; end < n; end++) {              balance = s.charAt(end) == '(' ? 1 :  -1;              if (balance == 0)                  res = Math.max(res, end - start + 1);        }    }      return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(1)​$</li></ul><h4 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h4><p>公式理解起来有点困难，下面是解释。</p><ul><li>dp数组记录从0开始，以i位结尾的最长的合法序列长度。</li><li>只有右括号才能形成合法的括号对，所以左括号的dp值为0，在遇到右括号的时候检查：<ul><li>如果前一个括号是左括号，那么长度就是往前找的一位（假如有）+2</li><li>如果前一个括号是右括号，而且往前的一个完整序列之前那一位是左括号（如果没有或者是右括号，那么也不能匹配当前位置），那么长度等于从这个左括号开始到当前位的长度。<ul><li>额外注意⚠️如果在这个左括号之前还存在匹配，那么需要加上这一段的长度！</li></ul></li></ul></li></ul><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int longestValidParentheses(String s) {    if (s == null)        return 0;    int res = 0;    int dp[] = new int[s.length()];    for (int i = 1; i < s.length(); i++) {        if (s.charAt(i) == ')') {            if (s.charAt(i - 1) == '(')                dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;            else if (i - dp[i - 1] > 0 && s.charAt(i - dp[i - 1] - 1) == '(') {                if (i - dp[i - 1] >= 2)                    dp[i] = dp[i - 1] + dp[i - dp[i - 1] - 2] + 2;                else                    dp[i] = dp[i - 1] + 2;            }            res = Math.max(res, dp[i]);        }    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(n)$</li></ul><h4 id="使用栈"><a href="#使用栈" class="headerlink" title="使用栈"></a>使用栈</h4><p>这个做法旨在通过栈维护平衡，把所有不平衡的下标压栈。</p><ul><li>遇到左括号就压栈；</li><li>遇到右括号，如果栈内记录了待匹配的左括号，则出栈；否则（待匹配的是右括号，或者栈是空的情况下）压栈。</li></ul><p>这样一来，栈中所有的下标就是不平衡处的位置，而相邻的下标之间（包括头和尾的-1和n）的字符串就是平衡的，我们只要依次出栈并计算，找到最大值就可以。</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int longestValidParentheses(String s) {      if (s == null)          return 0;    int res = 0, n = s.length();    Stack<Integer> stack = new Stack<>();    stack.push(-1);// 这里的-1是为计算方便    for (int i = 0; i < n; i++) {        if (s.charAt(i) == '(')            stack.push(i);        else {              int last = stack.peek();            if (last == -1 || s.charAt(last) == ')')                  stack.push(i);            else                    stack.pop();        }    }      // 计算包括-1和n在内所有非平衡下标之间的长度      int right = n;    while (!stack.isEmpty()) {            int left = stack.pop();          res = Math.max(res, right - left - 1);          right = left;    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(n)​$</li></ul><h4 id="双扫描，无额外空间"><a href="#双扫描，无额外空间" class="headerlink" title="双扫描，无额外空间"></a>双扫描，无额外空间</h4><p>这一做法受到最大子序列和的启发——最大子序列和的做法是，累加遇到负数就重置当前的和为0，扫描一遍数组即可得出答案——贪心的思路。</p><p>在这里，我们需要扫描两次：</p><ul><li>从左向右，左括号为1、右括号为-1，和为0时则平衡，和为负时归零；</li><li>从右向左，左括号为-1、右括号为1，其余同上。</li></ul><p>这样得出的最大的长度就是答案。</p><p>那么，如何解释？</p><ul><li>考虑从左向右的情况，在遇到右括号多于左括号的时候归零是合理的。因为不论从那一位开始，以这一位结尾的字符串肯定是不平衡的。而我们无法顾及的情况在于左括号偏多的情形：很有可能开头的几个左括号一直到最后都没有匹配的右括号，而中间潜在的合法匹配被我们忽略（因为和一直是正数）。</li><li>上面描述的这个情形，从右向左的扫描能够帮我们解决。相应的，从右到左的扫描无法解决的右括号偏多的情形，这在左括号里面得以解决。</li><li>两次扫描分别解决了两种情形，比较得出长度最大的是哪一种，就是答案。</li></ul><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int longestValidParentheses(String s) {    if (s == null)        return 0;    int sum = 0, res = 0, len = 0, n = s.length();    for (int i = 0; i < n; i++) {        sum += s.charAt(i) == '(' ? 1 : -1;        if (sum < 0)            sum = len = 0;        else {            len++;            if (sum == 0)                res = Math.max(res, len);        }    }    sum = len = 0;    for (int i = n - 1; i >= 0; i--) {        sum += s.charAt(i) == ')' ? 1 : -1;        if (sum < 0)            sum = len = 0;        else {            len++;            if (sum == 0)                res = Math.max(res, len);        }    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hard </tag>
            
            <tag> dp </tag>
            
            <tag> string </tag>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>31.Next Permutation</title>
      <link href="/2019/04/07/31-Next-Permutation/"/>
      <url>/2019/04/07/31-Next-Permutation/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Implement <strong>next permutation</strong>, which rearranges numbers into the lexicographically next greater permutation of numbers.</p><p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p><p>The replacement must be <strong>in-place</strong> and use only constant extra memory.</p><a id="more"></a><p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">1,2,3 → 1,3,23,2,1 → 1,2,31,1,5 → 1,5,1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="暴力求解全排列"><a href="#暴力求解全排列" class="headerlink" title="暴力求解全排列"></a>暴力求解全排列</h4><ul><li><p>时间复杂度：$O(n!)$</p></li><li><p>空间复杂度：$O(n)$</p></li></ul><h4 id="寻找排列规律"><a href="#寻找排列规律" class="headerlink" title="寻找排列规律"></a>寻找排列规律</h4><ul><li>找到前一个排列和后一个排列的关系<ul><li>例如，<code>1234</code>—&gt;<code>1243</code></li><li><code>3124</code>—&gt;<code>3214</code></li><li><code>4321</code>—&gt;<code>1234</code></li><li>从右到左，找到第一个违反【非降序规律】的数，将它和右边第一个比它大的数交换（交换其实是让它插入合适的位置）（这里可以用二分查找），然后逆序排列（也就是让剩下来的数按照从左到右非降序排列）</li></ul></li><li>注意⚠️，可能出现重复数字</li></ul><pre class="line-numbers language-lang-java"><code class="language-lang-java">class Solution {    private void swap(int[] nums, int a, int b) {        int tmp = nums[a];        nums[a] = nums[b];        nums[b] = tmp;    }    private void reverse(int[] nums, int from, int to) {        for (int i = from, j = to - 1; i < j; i++, j--)              swap(nums, i, j);    }    public void nextPermutation(int[] nums) {        int n = nums.length, iter, last = n - 2;        if (n < 2)              return;        while (last >= 0 && nums[last] >= nums[last + 1])            last--;        if (last >= 0) {            int minBigger = last + 1;            while (minBigger < n - 1                    && nums[minBigger + 1] > nums[last])                minBigger++;            swap(nums, last, minBigger);        }        reverse(nums, last + 1, n);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> string </tag>
            
            <tag> medium </tag>
            
            <tag> permutation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML学习日记3——梯度下降技巧</title>
      <link href="/2019/04/03/ML-3-Gradient-Descent/"/>
      <url>/2019/04/03/ML-3-Gradient-Descent/</url>
      
        <content type="html"><![CDATA[<p>一些改进梯度下降方法的要点。</p><a id="more"></a><h3 id="自适应学习率：Adagrad-learning-rate"><a href="#自适应学习率：Adagrad-learning-rate" class="headerlink" title="自适应学习率：Adagrad learning rate"></a>自适应学习率：Adagrad learning rate</h3><ul><li>学习率太大或者太小，都会导致问题<ul><li>太小会收敛过慢</li><li>太大会不收敛</li></ul></li><li>自适应学习率可以较好地改变情况</li></ul><p><img src="/2019/04/03/ML-3-Gradient-Descent/IMG_2209.PNG" alt="IMG_2209"></p><p><img src="/2019/04/03/ML-3-Gradient-Descent/IMG_2210.PNG" alt="IMG_2210"></p><p><img src="/2019/04/03/ML-3-Gradient-Descent/IMG_2211.PNG" alt="IMG_2211"></p><h3 id="随机梯度下降：Stochastic-gradient-descent"><a href="#随机梯度下降：Stochastic-gradient-descent" class="headerlink" title="随机梯度下降：Stochastic gradient descent"></a>随机梯度下降：Stochastic gradient descent</h3><ul><li>每次选取少量样本进行梯度下降</li><li>每一步未必朝着正确的方向，但是在全局一步的时间里可以进行多次迭代从而到达终点</li></ul><h3 id="特征归一化：Feature-scaling"><a href="#特征归一化：Feature-scaling" class="headerlink" title="特征归一化：Feature scaling"></a>特征归一化：Feature scaling</h3><ul><li>将所有维度统一到0和1（作为例子）的尺度，避免单一维度的weight变化影响全局太多或者太少</li></ul><p><img src="/2019/04/03/ML-3-Gradient-Descent/IMG_2212.PNG" alt="IMG_2212"></p>]]></content>
      
      
      <categories>
          
          <category> machine learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradient descent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Microsoft 2019暑期OA题目</title>
      <link href="/2019/04/03/Microsoft-2019%E6%9A%91%E6%9C%9FOA%E9%A2%98%E7%9B%AE/"/>
      <url>/2019/04/03/Microsoft-2019%E6%9A%91%E6%9C%9FOA%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<p>做了一晚上，心态崩了。。两小时4题，这难度堪比acm。</p><a id="more"></a><p>不说了，下面贴题目吧：</p><h3 id="Playing-with-beads"><a href="#Playing-with-beads" class="headerlink" title="Playing with beads"></a>Playing with beads</h3><blockquote><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/1-1.png" alt="1-1"></p><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/1-2.png" alt="1-2"></p></blockquote><h3 id="Archer"><a href="#Archer" class="headerlink" title="Archer"></a>Archer</h3><blockquote><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/2-1.png" alt="2-1"></p><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/2-2.png" alt="2-2"></p></blockquote><h3 id="Line"><a href="#Line" class="headerlink" title="Line"></a>Line</h3><blockquote><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/3-1.png" alt="3-1"></p><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/3-2.png" alt="3-2"></p></blockquote><h3 id="Honey-Madness"><a href="#Honey-Madness" class="headerlink" title="Honey Madness"></a>Honey Madness</h3><blockquote><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/4-1.png" alt="4-1"></p><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/4-2.png" alt="4-2"></p><p><img src="/2019/04/03/Microsoft-2019暑期OA题目/4-3.png" alt="4-3"></p></blockquote><p>做出了1和3（但也不是全对），2和4完全没有思路。佛了。</p><p>之后如果有机会再补上吧。</p>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> intern </tag>
            
            <tag> oa </tag>
            
            <tag> microsoft </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML学习日记2——泛化误差：方差与偏差</title>
      <link href="/2019/04/02/ML-2-Variance-and-Bias/"/>
      <url>/2019/04/02/ML-2-Variance-and-Bias/</url>
      
        <content type="html"><![CDATA[<p>首先引用一段<a href="https://zhuanlan.zhihu.com/p/38853908" target="_blank" rel="noopener">知乎</a>上的描述：</p><blockquote><p>在机器学习中，我们用训练数据集去训练一个模型，通常的做法是定义一个误差函数，通过将这个误差的最小化过程，来提高模型的性能。</p><p>然而我们学习一个模型的目的是为了解决训练数据集这个领域中的一般化问题，单纯地将训练数据集的损失最小化，并不能保证在解决更一般的问题时模型仍然是最优，甚至不能保证模型是可用的。这个训练数据集的损失与一般化的数据集的损失之间的差异就叫做<strong>泛化误差（generalization error）</strong>。</p><p>泛化误差为偏差、方差与噪声之和。</p></blockquote><a id="more"></a><h3 id="Variance（方差）"><a href="#Variance（方差）" class="headerlink" title="Variance（方差）"></a>Variance（方差）</h3><ul><li><strong>Variance</strong>是<strong>不同的训练数据集训练出的模型</strong>输出值之间的差异。</li><li>越复杂的模型，它的variance就越大，表现出来就是过拟合。</li><li>越简单的模型，variance越小</li><li><strong>方差度量了同样大小的训练集的变动所导致的学习性能的变化，即刻画了数据扰动所造成的影响。</strong></li><li>解决方案：<ol><li>collect more data，至少不会让variance更大；但是一般比较难获得（可以从现有数据修改等获得）。</li><li>或者使用regularization，使曲线平滑；代价是增大bias。</li></ol></li></ul><h3 id="Bias（偏差）"><a href="#Bias（偏差）" class="headerlink" title="Bias（偏差）"></a>Bias（偏差）</h3><ul><li><strong>Bias</strong>是用<strong>所有可能的训练数据集</strong>训练出的<strong>所有模型</strong>的输出的<strong>平均值</strong>与<strong>真实模型</strong>的输出值之间的差异。</li><li>比较简单的模型，bias越大，表现出来是underfitting</li><li>较大的bias说明甚至没有很好拟合training data</li></ul><h3 id="Noise（噪声）"><a href="#Noise（噪声）" class="headerlink" title="Noise（噪声）"></a>Noise（噪声）</h3><ul><li><strong>噪声</strong>的存在是学习算法所无法解决的问题，数据的质量决定了学习的上限。假设在数据已经给定的情况下，此时上限已定，我们要做的就是尽可能的接近这个上限。</li></ul><hr><h3 id="Cross-Validation"><a href="#Cross-Validation" class="headerlink" title="Cross Validation"></a>Cross Validation</h3><p>待补充。</p>]]></content>
      
      
      <categories>
          
          <category> machine learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> regression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ML学习日记1——线性回归与梯度下降</title>
      <link href="/2019/04/02/ML-1-LinearRegression/"/>
      <url>/2019/04/02/ML-1-LinearRegression/</url>
      
        <content type="html"><![CDATA[<p>今天开始学习台大李宏毅教授的机器学习视频。</p><p>这篇文章是自己写的一个简单的多元线性回归模型：$y = \sum{w_i*x_i}+b$，基于批量梯度下降方法。</p><a id="more"></a><h3 id="准备阶段：生成训练数据和测试数据，选取多元一次的线性关系"><a href="#准备阶段：生成训练数据和测试数据，选取多元一次的线性关系" class="headerlink" title="准备阶段：生成训练数据和测试数据，选取多元一次的线性关系"></a>准备阶段：生成训练数据和测试数据，选取多元一次的线性关系</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python"># 生成train data和test data# 随机选择一些x和w，bfrom random import randint, uniformfrom numpy import randomdef genCase(n: int, m: int):    x = random.uniform(-10, 10, (m, n))    w = random.uniform(0, 10, (n, 1))    b = uniform(0, 10)    # 加入噪音    y = [sum(x[i1].dot(w)) + b + uniform(-0.5, 0.5) for i1 in range(len(x))]    print("Generated %d cases with %d features." % (m, n))    return x, y, w, bdef splitCase(x, y):    n = len(x)    if len(y) != n:        return [], [], [], []    trainX, trainY, testX, testY = [], [], [], []    for j in range(n):        if randint(1, 4) > 2:            testX.append(x[j])            testY.append(y[j])        else:            trainX.append(x[j])            trainY.append(y[j])    print("Split data into 2 parts: %d train data and %d test data" % (len(trainX), len(testX)))    return trainX, trainY, testX, testYX, Y, OriginW, OriginB = genCase(10, 1000)TrainX, TrainY, TestX, TestY = splitCase(X, Y)# 导出到文件with open('./data/train.txt', 'w') as f:    for i in range(len(TrainX)):        f.write('\t'.join(list(map(str, TrainX[i]))) + '\t' + str(TrainY[i]) + '\n')with open('./data/test.txt', 'w') as f:    for i in range(len(TestX)):        f.write('\t'.join(list(map(str, TestX[i]))) + '\t' + str(TestY[i]) + '\n')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Generated 1000 cases with 10 features.Split data into 2 parts: 484 train data and 516 test data</code></pre><h3 id="训练阶段：采用批量梯度下降方法拟合"><a href="#训练阶段：采用批量梯度下降方法拟合" class="headerlink" title="训练阶段：采用批量梯度下降方法拟合"></a>训练阶段：采用批量梯度下降方法拟合</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">from numpy import loadtxt, onesdef h(x, w, b):    return sum(x.dot(w)) + bdef loss(x, y, w, b):    return sum([(h(x[i1], w, b) - y[i1]) ** 2 for i1 in range(len(x))])def batchGradientDescent(x, y, rate=0.1, iterBound=100000, gradBound=1e-6):    m = len(x)    if m == 0 or len(y) != m:        return [], -1    n = len(x[0])    w, b = ones((n, 1)), 1    print("Learning ratio: %f" % rate)    for k in range(iterBound):        gradW = [sum([x[i][j] * (y[i] - h(x[i], w, b)) for i in range(m)]) / m for j in range(n)]        gradB = sum([(y[i] - h(x[i], w, b)) for i in range(m)]) / m        # 跳出循环的条件：梯度值较小        if abs(gradB) <= gradBound:            print("Converges after %d rounds of batch gradient descent." % k)            return w, b        for i in range(n):            w[i] += gradW[i] * rate        b += gradB * rate    print("After %d rounds of gradient descent, the loss is %f" % (k, loss(x, y, w, b)))    return w, bdef readData(file: str):    with open(file, 'r') as f:        data = loadtxt(f)    return [data[i1][:-1] for i1 in range(len(data))], [data[i1][-1] for i1 in range(len(data))]trainX, trainY = readData("./data/train.txt")testX, testY = readData("./data/test.txt")%time W, B = batchGradientDescent(trainX, trainY, 0.02)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Learning ratio: 0.020000Converges after 608 rounds of batch gradient descent.CPU times: user 5.72 s, sys: 23 ms, total: 5.75 sWall time: 5.76 s</code></pre><h3 id="预测阶段：使用test数据测试模型准确率"><a href="#预测阶段：使用test数据测试模型准确率" class="headerlink" title="预测阶段：使用test数据测试模型准确率"></a>预测阶段：使用test数据测试模型准确率</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">print("Loss for test data: %f" % loss(testX, testY, W, B))print("Loss for test data with original w and b: %f" % loss(testX, testY, OriginW, OriginB))print("Difference for w and b:", OriginW - W, OriginB - B)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>Loss for test data: 47.161984Loss for test data with original w and b: 46.188546Difference for w and b: [[-0.00095575] [ 0.0001872 ] [ 0.00153668] [ 0.00050082] [-0.00034511] [-0.00396764] [-0.00295501] [ 0.00099687] [ 0.00369943] [ 0.00379453]] -0.003807025307413836</code></pre><ul><li>经过梯度下降之后，达到了较好的精度。</li><li>时间上存在改进空间。</li></ul><h3 id="自适应learning-rate：Adagrad"><a href="#自适应learning-rate：Adagrad" class="headerlink" title="自适应learning rate：Adagrad"></a>自适应learning rate：Adagrad</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">from math import sqrtdef improvedBGD(x, y, iterBound=10000, gradBound=1e-6):    m = len(x)    if m == 0 or len(y) != m:        return [], -1    n = len(x[0])    w, b = ones((n, 1)), 1    rateW, rateB = [0 for _ in range(n)], 0    for k1 in range(iterBound):        gradW = [sum([x[i][j] * (y[i] - h(x[i], w, b)) for i in range(m)]) / m for j in range(n)]        gradB = sum([(y[i] - h(x[i], w, b)) for i in range(m)]) / m        # 跳出循环的条件：梯度值较小        if abs(gradB) <= gradBound:            print("Converges after %d rounds of batch gradient descent." % k1)            return w, b        for i in range(n):            rateW[i] += gradW[i] ** 2            w[i] += gradW[i] / sqrt(rateW[i])        rateB += gradB ** 2        b += gradB / sqrt(rateB)    print("After %d rounds of gradient descent, the loss is %f" % (k1, loss(x, y, w, b)))    return w, b%time W, B = improvedBGD(trainX, trainY)print("Loss for test data: %f" % loss(testX, testY, W, B))print("Loss for test data with original w and b: %f" % loss(testX, testY, OriginW, OriginB))print("Difference for w and b:", OriginW - W, OriginB - B)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Converges after 251 rounds of batch gradient descent.CPU times: user 2.55 s, sys: 9.66 ms, total: 2.56 sWall time: 2.57 sLoss for test data: 43.177537Loss for test data with original w and b: 41.600574Difference for w and b: [[ 0.00108563] [-0.00580816] [ 0.00122102] [-0.002008  ] [-0.00198998] [-0.0003545 ] [ 0.00242942] [-0.00419475] [-0.00064363] [ 0.00016461]] -0.009286649191009438</code></pre><h3 id="使用高次拟合，查看loss变化"><a href="#使用高次拟合，查看loss变化" class="headerlink" title="使用高次拟合，查看loss变化"></a>使用高次拟合，查看loss变化</h3><pre class="line-numbers language-lang-python"><code class="language-lang-python">def generateAll(x, n):    if n == 1:        return x    res = ones((len(x), n * len(x[0])))    count = len(x[0])    for i1 in range(len(x)):        for j1 in range(n):            for k1 in range(count):                res[i1][k1 + j1 * count] = x[i1][k1] ** (j1 + 1)    return res# 拟合过程可以直接使用batchGradientDescent函数解决# 为了节约时间（一方面learning rate不能高，一高就不收敛；另一方面太低可能半小时都跑不出来）trainLoss = [loss(trainX, trainY, W, B)]testLoss = [loss(testX, testY, W, B)]for i in range(2, 6):    exTrainX, exTestX = generateAll(trainX, i), generateAll(testX, i)    %time Wi, Bi = improvedBGD(exTrainX, trainY)    trainLoss.append(loss(exTrainX, trainY, Wi, Bi))    testLoss.append(loss(exTestX, testY, Wi, Bi))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>After 9999 rounds of gradient descent, the loss is 36.904122CPU times: user 3min 50s, sys: 1.34 s, total: 3min 51sWall time: 3min 52sAfter 9999 rounds of gradient descent, the loss is 35.874497CPU times: user 5min 39s, sys: 1.56 s, total: 5min 40sWall time: 5min 42sAfter 9999 rounds of gradient descent, the loss is 261.607271CPU times: user 7min 28s, sys: 2.38 s, total: 7min 31sWall time: 7min 33sAfter 9999 rounds of gradient descent, the loss is 181030.524181CPU times: user 9min 20s, sys: 3.25 s, total: 9min 24sWall time: 9min 27s</code></pre><pre class="line-numbers language-lang-python"><code class="language-lang-python">import matplotlib.pyplot as pltfrom numpy import arangex_axis = arange(len(trainLoss))plt.axis('on')plt.plot(x_axis, trainLoss, label='train')plt.plot(x_axis, testLoss, label='test')plt.legend()plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2019/04/02/ML-1-LinearRegression/LinearRegression.png" alt="png"></p><ul><li>出现了明显的overfitting现象</li></ul><pre class="line-numbers language-lang-python"><code class="language-lang-python">print(testLoss)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>[43.17753677246426, 46.221044463400624, 47.5150256435928, 295.13051190429354, 216220.90071215943]</code></pre><h3 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h3><h4 id="减少变量"><a href="#减少变量" class="headerlink" title="减少变量"></a>减少变量</h4><p>可以人工检查每一项变量，保留重要的变量。</p><h4 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h4><p>过拟合之后，可以采用<code>regularization</code>方法，加入新的一项：$\lambda * \sum{w^2_i}$</p><p>这一项表示曲线的平滑程度：</p><ul><li>如果这一项越小，那么对输入的小幅度变化越不敏感，所以在小范围内波动比较稳定，不会偏离太多，从而对噪声不敏感，做到更好的拟合。</li><li><p>本质是对高次项作出惩罚，因为所有的w都是一样的系数，但是惩罚项带来变化对高次项影响更大。</p></li><li><p>随着$\lambda​$值变大而变得平滑，拟合度更高；但是高到一定程度的时候，引入的项造成的error越大。我们当然不喜欢太平滑的函数，极端一点就变成水平直线，没有任何意义。</p></li><li><p>这一项不需要加入<code>bias</code>这一项——因为它是常数项，只会把曲线抬高，不会影响曲线的形状。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> machine learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> regression </tag>
            
            <tag> gradient descent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VOI</title>
      <link href="/2019/03/28/VOI/"/>
      <url>/2019/03/28/VOI/</url>
      
        <content type="html"><![CDATA[<p>VOI：一个来自iOS应用移植的小游戏，主体在canvas实现</p><p>目前尚在施工中(´･ω･`)</p><p>点击👉<a href="/voi/index.html">这里</a><br>代码在<a href="https://github.com/Riroaki/VOI" target="_blank" rel="noopener">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> wheels </category>
          
          <category> front end </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Google实习面试经历</title>
      <link href="/2019/03/28/Google%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/"/>
      <url>/2019/03/28/Google%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<ul><li>3月29更新：</li></ul><blockquote><p><strong>Your Current Stage:</strong>  Pending. Unfortunately, your current interview result is not strong enough to proceed to next step, we will try to strive opportunity for you. If there is any update about proceed or reject, I’ll definitely let you know.</p></blockquote><p>今天发邮件催了一下hr，对面表示面试成绩不够好被挂着，然而也没有直接刷……学长说其实基本就是算凉了，我也不抱希望。</p><p>总体来说二面发挥较好，一面比较失败。等有空再补一下这两次面试的经历。<br><a id="more"></a></p><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>上来先自我介绍，然而我并没有好好准备这部分，并没有说明自己的项目经历等等……现在看来真的太蠢了。</p><p>然后，开始码代码。结果一上来就遇到之前在lc讨论区看到的题，具体链接在<a href="https://leetcode.com/discuss/interview-question/236898/google-phone-interview/237669" target="_blank" rel="noopener">这里</a>：</p><blockquote><p>Given a complete(virtual) binary tree, return true/false if the given target node exists in the tree or not.<br>Here, the “virtual” means the tree nodes are numbered assuming the tree is a complete binary tree.</p><p>For example:</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">                1            /        \          2              3       /   \           /  \      4   (5)nil      6  (7)nil   //function signature   // bool doesNodeExist(root *TreeNode, target int)   doesNodeExist(root, 4) -> true   doesNodeExist(root, 7) -> false, Given the node on #7 is a nil node.   //Think of a better solution.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><p>这题，我之前就想到一个简单的做法，采用的是将数字二进制表示后，利用0和1定位，每次排除一半的搜索空间，总的时间效率是$O(log(n))$：</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public boolean doesNodeExist(TreeNode root, int id) {    if (id <= 0) return false;    char[] binary = Integer.toBinaryString(id).toCharArray();    for (int i = 1; i < binary.length; i++) {        if (root == null) return false;        if (binary[i] == '0') root = root.left;        else root = root.right;    }    return root != null;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写的差不多了，然而还是有点bug（我在之前没有练好白板orz，估计就是跪在这里）</p><p>然后修修补补，花了不少时间。之后他提出follow up（其实应该是另一个问题）：</p><blockquote><p>Given a complete(virtual) binary tree, return the number of nodes in the tree.</p></blockquote><p>这个首先当然是给出trivial做法，时间复杂度$O(n)$：</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int countNodes(TreeNode root) {      return root == null ? 0 : 1 + countNodes(root.left) + countNodes(root.right);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我想了一会，想到结合第一题的思路：使用二分的方法，用第一题的函数确认某个结点是否存在于这个树上，然后不断二分搜索空间，时间复杂度为$O(log^2(n))$</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int countNodes(TreeNode root) {    if (root == null)        return 0;    int lo = 1, hi = 1;    TreeNode tmp = root;    while (tmp.right != null) {        tmp = tmp.right;        hi = (hi << 1) + 1;    }    hi = (hi << 1) + 1;    while (lo < hi) {        int mi = lo + (hi - lo) / 2;        if (exist(root, mi))            lo = mi + 1;        else            hi = mi;    }    return exist(root, lo) ? lo : lo - 1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我觉得这个思路真的是，完美啊！！！但是写的过程还是出了一点bug……最后还是运算符陷阱，java的位运算优先级问题太坑。</p><p>然后写完，时间也差不多了，就这样不明不白地结束了。</p><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><p>二面前又刷了一会题，还在一亩三分地看了一些面经，结果看的题<strong>完全没用</strong>，呵呵</p><p>二面面试官给人不善言辞的木讷感觉，我也和第一次不一样，自我介绍的时候说了一下自己的项目。</p><p>对面：有这么多项目经历啊……</p><p>我：嗯嗯（其实心里一脸懵逼）</p><p>然后，话不多说开始做题。</p><blockquote><p>Split an array such that the sum of each split &gt;= target.</p><p>The array consists of only integers in [0, 9].</p><p>Write a function to check whether the array could be split into k parts.</p><p>boolean canSplit(int[] nums, int k, int target)</p></blockquote><p>这题开始的时候他没讲清楚，让我以为是随意的切分，想了半天没话可说，正要和他求个提示，结果他看不下去让我先尝试一下比如<code>nums = [1,2,3,3,2,4,4], k = 3, x = 5</code></p><p>然后贪心地切下去，切成：<code>[1, 2, 3/ 3, 2/ 4, 4]</code>，能够切分三份，所以返回<code>true</code></p><p>好嘛，你直接说连续的切分不就好了。我就说我之前也问了这个问题，然后他没讲清楚。</p><p>这就开始写代码，时间复杂度$O(n)$：</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">boolean canSplit(int[] a, int k, int x) {      int n = a.length;    if (n < k || x < 0 || k <= 0)        return false;        int currSum = 0, curr = 0, index = 0;    for (; index < n; index++) {        if (currSum >= x) {            curr += 1;            currSum = 0;        }        currSum += a[index];    }    if (currSum >= x)        curr++;    return curr >= k;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一次我边写边讲了这一步做什么，那一步做什么，遇到全0的case等等怎么处理。</p><p>对方说ok，没有问题，就是把那个<code>currSum += a[index]</code>放在前面会比较好，避免循环外面再判断一次，代码更简洁。我说嗯嗯，确实如此。</p><p>接着是follow up：</p><blockquote><p>Now given the array and k, return what’s the maximum target.</p></blockquote><p>这里理解题目就比较麻烦，因为这个maximum其实是某一个切分中，每一份的和的最小值；但是又是不同切分中的最大值。</p><p>我想起以前周赛的一个题，给定天数要求和物品列表，每天载货一次，问最小的单次载货量是多少（题目在<a href="https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/" target="_blank" rel="noopener">这里</a>）——其实这两题比较像，稍加分析就可以看出：</p><ul><li>在这里是从<code>0</code>开始找到<code>sum</code>，前面都是可以的，到某一个值开始不能拆分成k份；</li><li>在上面那个载货题，从<code>0</code>开始找到<code>sum</code>，前面的<code>capacity</code>不能在<code>k</code>天载完，在某一个值开始可以载完。</li></ul><p>联想到这一题用的是二分，我就打算在这里也用二分，使用上一个题目的<code>canSplit</code>进行判断。</p><p>我一提出二分，对方就大为赞赏，这让我有些振奋，于是确定地提出想法，然后开始码，时间复杂度$O(nlogn)$：</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">int maxSplit(int[] a, int k) {    int sum = 0, n = a.length;      if (n < k || k <= 0)        return -1;// indicating invalid error    for (int num : a)        sum += num;    int lo = 0, hi = sum;    while (lo < hi) {        int mi = lo + (hi - lo) / 2;        if (canSplit(a, k, mi))            lo = mi + 1;        else            hi = mi;    }    return canSplit(a, k, lo) ? lo : lo - 1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写完一看，和一面的思路也太像了吧！不过我没有说，检查了很多<code>case</code>之后对方说很好，代码没有问题，而且风格也不错。</p><p>接下来提出进一步的follow up：</p><blockquote><p>What if the array contains minus numbers?</p></blockquote><p>这里我一开始没明白，负数会有影响吗？</p><p>后来才发现，对这种例子，就会对<code>canSplit</code>函数产生影响：<code>nums = [1, 2, 3, -1, 4, 1], target = 5</code></p><p>在这里，如果我们在<code>3</code>后面分割，那么后面就不能组成一个split，只能分成1份；但是如果我们在<code>-1</code>后面切分，那么就可以分成2份。然而我并没有想出来……</p><p>看到我的窘况，他说没关系，提示我用dp，并且贴心地换了一个follow up：</p><blockquote><p>What if the maxSplit function is called many times on the same array?</p></blockquote><p>也就是如何优化的问题。我这个时候脑子是糊的，但是盲猜了一个方法（套路啊）：前缀和数组。</p><p>这个概念一提出来，对方就很满意，接下来补全了思路：在前缀和数组上作二分找到下一个可切分的位置，将<code>canSplit</code>原来遍历数组的过程转化为二分，提高效率。</p><p>这样做之后，总时间效率就是$O(log^2(n))$，和一面的解法结构也很像——只能说我运气实在太好了吧。</p><p>然而这样还是没有利用好机会……orz</p><p>经过这样两次面试，我只能说，二分天下无敌！</p>]]></content>
      
      
      <categories>
          
          <category> interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> intern </tag>
            
            <tag> google </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重置系统和ssh连接</title>
      <link href="/2019/03/28/%E9%87%8D%E7%BD%AE%E7%B3%BB%E7%BB%9F%E5%92%8Cssh%E8%BF%9E%E6%8E%A5/"/>
      <url>/2019/03/28/%E9%87%8D%E7%BD%AE%E7%B3%BB%E7%BB%9F%E5%92%8Cssh%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>之前不小心更新了Ubuntu18.0，结果没法ssh连接了。。。</p><p>无奈之下重置了系统，知乎查了一下Ubuntu和其他Linux系统，感觉相对于服务器来说Debian更加稳定些，Ubuntu太倒腾了。重置完了之后，再ssh连接，咦？为啥还是不能连。。。</p><a id="more"></a><pre class="line-numbers language-lang-shell"><code class="language-lang-shell">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!Someone could be eavesdropping on you right now (man-in-the-middle attack)!It is also possible that a host key has just been changed.The fingerprint for the ECDSA key sent by the remote host isSHA256:2R1nMbHLVDbkj8Q564B1ZwsBkDMm92bJtL4hhb5FSr4.Please contact your system administrator.Add correct host key in /Users/Aki/.ssh/known_hosts to get rid of this message.Offending ECDSA key in /Users/Aki/.ssh/known_hosts:2ECDSA host key for 120.79.161.245 has changed and you have requested strict checking.Host key verification failed.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这应该是我自己电脑对对面系统做了检测，发现ecdsa的验证码不一样了（因为重置了系统啊，感觉不安全就不让我连接了（这个@@@……是我乔鲁诺哒！</p><p>于是谷歌了一下，发现可以通过这个指令移除：<code>ssh-keygen -R [ip]</code></p><p>系统回复：</p><pre class="line-numbers language-lang-shell"><code class="language-lang-shell"># Host 120.79.161.245 found: line 2/Users/Aki/.ssh/known_hosts updated.Original contents retained as /Users/Aki/.ssh/known_hosts.old<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ok了。现在可以重新连接。</p><p>重新连接后会询问你是否信任，yes之后就会重新将域名加入列表。</p>]]></content>
      
      
      <categories>
          
          <category> back end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>收报名表过程出现的bug以及解决方案</title>
      <link href="/2019/03/28/%E6%94%B6%E6%8A%A5%E5%90%8D%E8%A1%A8%E8%BF%87%E7%A8%8B%E5%87%BA%E7%8E%B0%E7%9A%84bug%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/03/28/%E6%94%B6%E6%8A%A5%E5%90%8D%E8%A1%A8%E8%BF%87%E7%A8%8B%E5%87%BA%E7%8E%B0%E7%9A%84bug%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<ul><li>校友文件名太长的问题</li><li>文件太大的问题（60m出错，姓名未填写错误）</li><li>校友文件名过长（因命名规则：账号+下划线+账号的md5值）</li><li>文件传不了，未知原因</li><li>文件无法覆盖，未知原因</li></ul><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>无法覆盖<ul><li>数据库里已经有相应文件名，只需要在文件目录<code>/var/www/File/applyfile</code>中替换文件即可。</li></ul></li><li>无法上传<ul><li>数据库中修改对应学号的<code>profile</code>属性为文件名。</li><li>在文件目录中加入文件。 </li></ul></li><li>备注：文件名默认为<code>账户名+下划线+账户名的哈希值</code>，其中账户名可能是学号（本科生）、邮箱（研究生、校友）</li></ul><h3 id="mysql远程连接"><a href="#mysql远程连接" class="headerlink" title="mysql远程连接"></a>mysql远程连接</h3><p>直接在终端建立ssh和mysql连接不安全，而且服务器不支持中文输入，有时候操作不便。</p><h4 id="更新配置"><a href="#更新配置" class="headerlink" title="更新配置"></a>更新配置</h4><pre class="line-numbers language-lang-sql"><code class="language-lang-sql">grant all privileges on *.* to 'root'@'%' identified by 'password';flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>*. *</code>：表示所有数据库（第一个 <em>）和表（第二个 </em>）。</li><li><code>root</code>：表示允许访问时登陆用的用户名。</li><li><code>%</code>：表示允许来自任何地址的访问。如果要指定一个ip，那么把%换成相应ip。</li><li><code>password</code>：表示设定密码。</li><li><code>flush privileges</code>：表示立即刷新使权限生效。</li></ul><p>这一步之后可以在表中查看结果：</p><pre class="line-numbers language-lang-sql"><code class="language-lang-sql">> use mysql> select * from user;-- 可以看到密码是经过md5加密之后的值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="修改cnf文件"><a href="#修改cnf文件" class="headerlink" title="修改cnf文件"></a>修改cnf文件</h4><ul><li>mysql的配置文件在目录<code>/etc/mysql/</code>下，需要编辑其开放的端口。</li><li>将<code>bind-address = 127.0.0.1</code>注释掉，因为它的意思是默认本地端口访问。</li></ul><h4 id="重启mysql服务"><a href="#重启mysql服务" class="headerlink" title="重启mysql服务"></a>重启mysql服务</h4><p><code>service mysql restart</code></p><h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><ul><li>打开mysqlworkbench，建立新的连接，输入用户名和密码、服务器ip。端口号默认3306即可。</li><li>进行连接之后就可以远程操作了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> back end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>27.Remove Element</title>
      <link href="/2019/03/28/27-Remove-Element/"/>
      <url>/2019/03/28/27-Remove-Element/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an array <em>nums</em> and a value <em>val</em>, remove all instances of that value <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> and return the new length.</p><p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array in-place</strong> with O(1) extra memory.</p><p>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Given nums = [3,2,2,3], val = 3,Your function should return length = 2, with the first two elements of nums being 2.It doesn't matter what you leave beyond the returned length.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Given nums = [0,1,2,2,3,0,4,2], val = 2,Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4.Note that the order of those five elements can be arbitrary.It doesn't matter what values are set beyond the returned length.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="双指针，快慢操作"><a href="#双指针，快慢操作" class="headerlink" title="双指针，快慢操作"></a>双指针，快慢操作</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int removeElement(int[] nums, int val) {    int slow = 0, fast = 0;    for (; fast < nums.length; fast++)          if (nums[fast] != val) nums[slow++] = nums[fast];    return slow;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul><h4 id="双指针——改进"><a href="#双指针——改进" class="headerlink" title="双指针——改进"></a>双指针——改进</h4><ul><li>在val元素较少的时候，为了避免过多的移动，采用交换机制；</li><li>这里的交换十分巧妙：将末尾的数替换当前的i，同时下一轮又会检查i位置的数；而n也会随交换缩小。</li></ul><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int removeElement(int[] nums, int val) {    int i = 0, n = nums.length;    while (i < n) {        if (nums[i] == val) {            nums[i] = nums[n - 1];              n--;            // reduce array size by one        } else            i++;    }    return n;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> two pointers </tag>
            
            <tag> easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26.Remove Duplicates from Sorted Array</title>
      <link href="/2019/03/28/26-Remove-Duplicates-from-Sorted-Array/"/>
      <url>/2019/03/28/26-Remove-Duplicates-from-Sorted-Array/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a sorted array <em>nums</em>, remove the duplicates <a href="https://en.wikipedia.org/wiki/In-place_algorithm" target="_blank" rel="noopener"><strong>in-place</strong></a> such that each element appear only <em>once</em> and return the new length.</p><p>Do not allocate extra space for another array, you must do this by <strong>modifying the input array in-place</strong> with O(1) extra memory.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Given nums = [1,1,2],Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.It doesn't matter what you leave beyond the returned length.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Given nums = [0,0,1,1,1,2,2,3,3,4],Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.It doesn't matter what values are set beyond the returned length.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="双指针，快慢操作。"><a href="#双指针，快慢操作。" class="headerlink" title="双指针，快慢操作。"></a>双指针，快慢操作。</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int removeDuplicates(int[] nums) {    if (nums.length == 0) return 0;    int slow = 0, fast = 1;    for (; fast < nums.length; fast++)        if (nums[fast] != nums[slow]) nums[++slow] = nums[fast];    return slow + 1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> two pointers </tag>
            
            <tag> easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器部署：Flask + gunicorn + nginx</title>
      <link href="/2019/03/28/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%EF%BC%9AFlask-gunicorn-nginx/"/>
      <url>/2019/03/28/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%EF%BC%9AFlask-gunicorn-nginx/</url>
      
        <content type="html"><![CDATA[<h3 id="服务器参数"><a href="#服务器参数" class="headerlink" title="服务器参数"></a>服务器参数</h3><ul><li>服务器ip：120.79.161.245（阿里云轻量级服务器，学生机）</li><li>阿里管理控制台：<a href="https://swas.console.aliyun.com/" target="_blank" rel="noopener">https://swas.console.aliyun.com/</a></li><li>os：Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-93-generic x86_64)</li></ul><a id="more"></a><h3 id="连接脚本："><a href="#连接脚本：" class="headerlink" title="连接脚本："></a>连接脚本：</h3><pre class="line-numbers language-lang-shell"><code class="language-lang-shell">#!/usr/bin/expectspawn ssh root@120.79.161.245expect "*password*" send "*****"expect "Welcome*"send "cd /data/www/\r"interact<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><pre class="line-numbers language-lang-shell"><code class="language-lang-shell">sudo apt-get install nginxsudo apt-get install python3.6python3 -V  # --version# 导出自己电脑上安装的库pip3 freeze > requirements.txt# 把requirements.txt拷贝到服务器上...# 按照库列表依次安装库pip3 install -r requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><ul><li>这个应该不用多说了吧。指定FLASK的app入口，之后run就可以了。</li></ul><pre class="line-numbers language-lang-shell"><code class="language-lang-shell">FLASK_APP=war.pyflask run# 在war项目下目录结构是这样的：.|____app| |______init__.py| |______pycache__| | |____*.pyc| |____templates| | |____*.html| |____routes.py|______pycache__| |____*.pyc|____war.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ul><li><code>nginx</code>配置文件：</li></ul><pre class="line-numbers language-lang-shell"><code class="language-lang-shell">vi /etc/nginx/nginx./conf# 在http的大括号内加入如下内容：server {    listen 80;  # 监听80号端口（默认访问端口）    server_name _;  # 自身ip，下划线代替；和端口号组成外网监听地址    location / {        proxy_pass http://127.0.0.1:8080;  # 转接到本机地址和端口，挑一个没有被占用的端口        proxy_redirect off;        proxy_set_header Host $host;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>gunicorn</code>操作指令：</li></ul><pre class="line-numbers language-lang-shell"><code class="language-lang-shell">nohup gunicorn -w 1 -b 127.0.0.1:8080 main:app -D# nohup表示不输出任何信息，并将log存到当前目录下nohup.out文件；# -w指定开启的进程数量，一般推荐：【核数】 * 2 + 1，全写是--workers=1；# -b指定转到本机的接口，必须和nginx配置文件的内容一致；# 127.0.0.1即localhost，本地端口；# main:app指定gunicorn要代理的app入口，表示main.py里面的app；# -D表示daemon，守护进程，也就是后台运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>常用指令：</li></ul><pre class="line-numbers language-lang-shell"><code class="language-lang-shell"># 进程相关kill -s 9 [pid]ps aux    # 查看所有进程grep [string]  # 查看所有包含[string]的文件ps aux | grep nginx  # 管道，将显示nginx相关进程信息# 文件相关tree  # linux自带指令      # BTW，macOS如果想优雅地使用tree，需要如下操作：      # vi ～/.bash_profile  ## 在个人目录下创建/更改配置文件      # i  ## 插入模式      # alias tree="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"  ## 设置同义词组      # wq  ## 退出编辑      # source .bash_profile  ## 重新加载配置文件cat [filename]vi [filename]# nginx相关/etc/init.d/nginx start/etc/init.d/nginx stop/etc/init.d/nginx restart# 或者也可以 service nginx start.stop.restart# 再或者可以 nginx -s start.stop.restartvi /etc/nginx/nginx.conf  # 也可以选择 /etc/nginx/conf.d/default.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>关于配置文件</p><ul><li>在配置nginx的时候，网上的资料告诉我配置文件位于<code>/etc/nginx/sites-available/default</code>，我改了半天却并无卯月……然后在zh的帮助下查看了配置文件的路径，我的路径不在参考范围内。</li><li>这个指令既可以测试配置文件的有效性，也可以看到当前运行的配置文件的位置：</li></ul><pre class="line-numbers language-lang-shell"><code class="language-lang-shell">/etc/init.d/nginx -tnginx: configuration file /etc/nginx/nginx.conf test is successful# 于是我们看到/etc/nginx/nginx.conf就是配置文件（这应该是默认的配置文件）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>接着，在这个nginx.conf里面还有一段文字表明nginx会参考的配置文件路径，如果不修改上面第一个文件，修改下面几个路径下的文件也是可以的：</li></ul><pre class="line-numbers language-lang-shell"><code class="language-lang-shell">    ##    # Virtual Host Configs    ##    include /etc/nginx/conf.d/*.conf;    include /etc/nginx/sites-enabled/*;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>记一次bug</p><ul><li>10月6日晚，这个ip发生了一次神秘的bug：刷新index页面的时候，游戏轮数时而显示第一轮，时而显示第二轮，但是总是和文件game.txt里面不一致。</li><li>调整了一晚上都没有找到问题的核心，终于在一次调试中偶然发现-w改成1之后就不会出错（后来知道不是这个原因），因此提出一个假说：是不是多个gunicorn进程引发的混乱？</li><li>可惜好景不长，第二天重新使用workers=1的参数测试的时候，发现问题依然存在。最终查看系统所有进程突然发现，关于gunicorn的进程数（每个的workers都是1）出现好几个，分别是不同的时间段开启的……等等，我好像明白了什么。</li><li>最终真相大白：是因为不同时间开启的gunicorn进程未能有效关闭（每一次我都是重启nginx再重新输入gunicorn指令），从而前几次的gunicorn维护的页面和这一次的页面产生了冲突……导致后来的每一次测试都是在几个不同时段的gunicorn进程中辗转，时而进入这个进程时而进入那一个……</li><li>至于昨晚的结果，则应该是因为那一次尝试恰好伴随着服务器的重启的缘故。</li><li>这一次的<strong>教训</strong>：以后，每次结束测试都要把所有gunicorn的进程关闭。nginx也不例外。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> back end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gunicorn </tag>
            
            <tag> shell </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25.Reverse Nodes in k-Group</title>
      <link href="/2019/03/27/25-Reverse-Nodes-in-k-Group/"/>
      <url>/2019/03/27/25-Reverse-Nodes-in-k-Group/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a linked list, reverse the nodes of a linked list <em>k</em> at a time and return its modified list.</p><p><em>k</em> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of <em>k</em> then left-out nodes in the end should remain as it is.</p><a id="more"></a><p><strong>Example:</strong></p><p>Given this linked list: <code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p><p>For <em>k</em> = 2, you should return: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p><p>For <em>k</em> = 3, you should return: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p><p><strong>Note:</strong></p><ul><li>Only constant extra memory is allowed.</li><li>You may not alter the values in the list’s nodes, only nodes itself may be changed.</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="用k大小的数组存节点，并依次翻转"><a href="#用k大小的数组存节点，并依次翻转" class="headerlink" title="用k大小的数组存节点，并依次翻转"></a>用k大小的数组存节点，并依次翻转</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public ListNode reverseKGroup(ListNode head, int k) {    if (k == 1)        return head;    ListNode dummy = new ListNode(0);    dummy.next = head;    ListNode[] group = new ListNode[k + 2];// 保存k集团的前一个，k集团，以及k集团的后一个    group[0] = dummy;    while (true) {        int i;        for (i = 1; i < k + 2 && group[i - 1] != null; i++)            group[i] = group[i - 1].next;        if (group[i - 1] == null)            break;        group[0].next = group[k];        group[1].next = group[k + 1];        for (int j = 2; j < k + 1; j++)            group[j].next = group[j - 1];        group[0] = group[1];    }    return dummy.next;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(k)​$</li><li>空间复杂度：$O(n)​$</li></ul><h4 id="只使用常数个节点的做法"><a href="#只使用常数个节点的做法" class="headerlink" title="只使用常数个节点的做法"></a>只使用常数个节点的做法</h4><ul><li>问题的关键在于如何反转一个k大小的链表；这里使用的是将每次的第一个插到末尾的做法。</li></ul><pre class="line-numbers language-lang-java"><code class="language-lang-java">public ListNode reverseKGroup(ListNode head, int k) {      if (head == null || head.next == null || k < 2)          return head;      ListNode dummy = new ListNode(0);      dummy.next = head;      ListNode tail = dummy, prev = dummy, temp;      int count;      while (true) {        count = k;        while (count > 0 && tail != null) {            count--;            tail = tail.next;        }        if (tail == null)// 剩下来节点不够k个              break;          // 此时tail指向k集团的最后一个节点        head = prev.next;// head指向的是k集团的第一个节点，将会是翻转后最后一个节点，                                          // 同时也是下一个k集团的前一个节点        // prev-->temp-->...--->....--->tail-->....        // Delete @temp and insert to the next position of @tail        // prev-->...-->...-->tail-->head-->...        // Assign @temp to the next node of @prev        // prev-->temp-->...-->tail-->...-->...        // Keep doing until @tail is the next node of @prev        while (prev.next != tail) {            temp = prev.next;//Assign            prev.next = temp.next;//Delete，从左侧删除temp            temp.next = tail.next;            tail.next = temp;//Insert，在右侧末尾插入temp        }        tail = prev = head;    }    return dummy.next;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)​$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hard </tag>
            
            <tag> linked list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24.Swap Nodes in Pairs</title>
      <link href="/2019/03/27/24-Swap-Nodes-in-Pairs/"/>
      <url>/2019/03/27/24-Swap-Nodes-in-Pairs/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a linked list, swap every two adjacent nodes and return its head.</p><p>You may <strong>not</strong> modify the values in the list’s nodes, only nodes itself may be changed.</p> <a id="more"></a><p><strong>Example:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Given 1->2->3->4, you should return the list as 2->1->4->3.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="直接做就可以了；小心边界情况"><a href="#直接做就可以了；小心边界情况" class="headerlink" title="直接做就可以了；小心边界情况"></a>直接做就可以了；小心边界情况</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public ListNode swapPairs(ListNode head) {    ListNode dummy = new ListNode(0), pre = dummy, first = head;    dummy.next = head;    while (first != null) {        ListNode tmp = first.next;        // 无视没有配对的点        if (tmp == null)            break;        pre.next = tmp;        first.next = tmp.next;        tmp.next = first;        // 下一对节点        pre = first;        first = first.next;    }    return dummy.next;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> medium </tag>
            
            <tag> linked list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23.Merge k Sorted Lists</title>
      <link href="/2019/03/27/23-Merge-k-Sorted-Lists/"/>
      <url>/2019/03/27/23-Merge-k-Sorted-Lists/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Merge <em>k</em> sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p><a id="more"></a><p><strong>Example:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input:[  1->4->5,  1->3->4,  2->6]Output: 1->1->2->3->4->4->5->6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="将全部元素加入list，排序后转回链表"><a href="#将全部元素加入list，排序后转回链表" class="headerlink" title="将全部元素加入list，排序后转回链表"></a>将全部元素加入list，排序后转回链表</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public ListNode mergeKLists(ListNode[] lists) {      List<Integer> tmp = new ArrayList<>();    for (ListNode curr : lists) {        while (curr != null) {                tmp.add(curr.val);              curr = curr.next;        }    }      Collections.sort(tmp);      ListNode dummy = new ListNode(0), curr = dummy;      for (int num : tmp) {          curr.next = new ListNode(num);          curr = curr.next;    }      return dummy.next;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(nlog(n))$，其中n是总节点数</li><li>空间复杂度：$O(n)$</li></ul><h4 id="使用最小堆（优先队列）"><a href="#使用最小堆（优先队列）" class="headerlink" title="使用最小堆（优先队列）"></a>使用最小堆（优先队列）</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public ListNode mergeKLists(ListNode[] lists) {    PriorityQueue<ListNode> nodeHeap = new PriorityQueue<>((o1, o2) -> o1.val - o2.val);    ListNode dummy = new ListNode(0), curr = dummy;    for (ListNode head: lists)        if (head != null)              nodeHeap.offer(head);    while (!nodeHeap.isEmpty()) {        curr.next = nodeHeap.poll();        curr = curr.next;        if (curr.next != null)              nodeHeap.add(curr.next);    }    return res.next;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(nlogk)$</li><li>空间复杂度：$O(n+k)​$</li></ul><h4 id="一个接一个合并"><a href="#一个接一个合并" class="headerlink" title="一个接一个合并"></a>一个接一个合并</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public ListNode mergeKLists(ListNode[] lists) {      ListNode res;      if (lists == null || lists.length == 0)          return null;      res = lists[0];      for (int i = 1; i < lists.length; i++)          res = merge(res, lists[i]);      return res;}// code from 21.Merge two listsprivate ListNode merge(ListNode l1, ListNode l2) {    ListNode l = new ListNode(-1), tmp = l;    while (l1 != null && l2 != null) {        if (l1.val > l2.val) {            tmp.next = l2;            l2 = l2.next;        } else {            tmp.next = l1;            l1 = l1.next;        }        tmp = tmp.next;    }    tmp.next = l1 != null ? l1 : l2;    return l.next;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(kn)​$</li><li>空间复杂度：$O(n)$</li></ul><h4 id="分治法，两两合并，然后再合并……"><a href="#分治法，两两合并，然后再合并……" class="headerlink" title="分治法，两两合并，然后再合并……"></a>分治法，两两合并，然后再合并……</h4><ul><li><strong>这是实践效果最快的！</strong></li></ul><pre class="line-numbers language-lang-java"><code class="language-lang-java">public ListNode mergeKLists(ListNode[] lists) {      if (lists == null || lists.length == 0)          return null;      return helper(lists, 0, lists.length - 1);}private ListNode helper(ListNode list[], int from, int to) {      if (from == to)          return list[from];      if (from == to - 1)          return merge(list[from], list[to]);      int mid = from + (to - from) / 2;      return merge(helper(list, from, mid), helper(list, mid + 1, to));}// code from 21.Merge two listsprivate ListNode merge(ListNode l1, ListNode l2) {    ListNode l = new ListNode(-1), tmp = l;    while (l1 != null && l2 != null) {        if (l1.val > l2.val) {            tmp.next = l2;            l2 = l2.next;        } else {            tmp.next = l1;            l1 = l1.next;        }        tmp = tmp.next;    }    tmp.next = l1 != null ? l1 : l2;    return l.next;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(nlogk)​$</li><li>空间复杂度：$O(n+log(k))$，其中$log(k)$为递归的栈深度</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hard </tag>
            
            <tag> divide and conquer </tag>
            
            <tag> linked list </tag>
            
            <tag> priority queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22.Generate Parentheses</title>
      <link href="/2019/03/27/22-Generate-Parentheses/"/>
      <url>/2019/03/27/22-Generate-Parentheses/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given <em>n</em> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p><a id="more"></a><p>For example, given <em>n</em> = 3, a solution set is:</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">[  "((()))",  "(()())",  "(())()",  "()(())",  "()()()"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="递归-回溯，记录开闭括号数量保持平衡"><a href="#递归-回溯，记录开闭括号数量保持平衡" class="headerlink" title="递归+回溯，记录开闭括号数量保持平衡"></a>递归+回溯，记录开闭括号数量保持平衡</h4><ul><li>使用char数组，节约空间、提高效率。</li></ul><pre class="line-numbers language-lang-java"><code class="language-lang-java">private List<String> res;private int bound;private char[] word;private void helper(int left, int right) {    if (left == bound && right == bound) {        res.add(String.valueOf(word));        return;    }    if (left < bound) {        word[left + right] = '(';        helper(left + 1, right);    }    if (right < bound && right < left) {        word[left + right] = ')';        helper(left, right + 1);    }}public List<String> generateParenthesis(int n) {    res = new ArrayList<>();    bound = n;    word = new char[n + n];    helper(0, 0);    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(\dfrac{4^n}{\sqrt{n}})$，这个论证比较复杂，详见<a href="https://zh.wikipedia.org/wiki/%E5%8D%A1%E5%A1%94%E5%85%B0%E6%95%B0" target="_blank" rel="noopener">卡塔兰数</a></li><li>空间复杂度：$O(\dfrac{4^n}{\sqrt{n}})​$</li></ul><h4 id="递归的风骚写法！"><a href="#递归的风骚写法！" class="headerlink" title="递归的风骚写法！"></a>递归的风骚写法！</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public List<String> generateParenthesis(int n) {    List<String> ans = new ArrayList();    if (n == 0)        ans.add("");    else {        for (int c = 0; c < n; ++c)            for (String left: generateParenthesis(c))                for (String right: generateParenthesis(n-1-c))                    ans.add("(" + left + ")" + right);    }    return ans;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(\dfrac{4^n}{\sqrt{n}})$</li><li>空间复杂度：$O(\dfrac{4^n}{\sqrt{n}})$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> string </tag>
            
            <tag> medium </tag>
            
            <tag> permutation </tag>
            
            <tag> backtracking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21.Merge Two Sorted Lists</title>
      <link href="/2019/03/27/21-Merge-Two-Sorted-Lists/"/>
      <url>/2019/03/27/21-Merge-Two-Sorted-Lists/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p><a id="more"></a><p><strong>Example:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: 1->2->4, 1->3->4Output: 1->1->2->3->4->4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="归并常规做法。"><a href="#归并常规做法。" class="headerlink" title="归并常规做法。"></a>归并常规做法。</h4><ul><li>这里如果不能指向原来的元素就不能这样写，需要重新创造node。</li></ul><pre class="line-numbers language-lang-java"><code class="language-lang-java">public ListNode mergeTwoLists(ListNode l1, ListNode l2) {    ListNode dummy = new ListNode(0), curr = dummy;    while (l1 != null && l2 != null) {        if (l1.val > l2.val) {            curr.next = l2;            l2 = l2.next;        } else {            curr.next = l1;            l1 = l1.next;        }        curr = tmp.next;    }    curr.next = l1 != null ? l1 : l2;    return dummy.next;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n1 + n2)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> two pointers </tag>
            
            <tag> easy </tag>
            
            <tag> linked list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20.Valid Parentheses</title>
      <link href="/2019/03/27/20-Valid-Parentheses/"/>
      <url>/2019/03/27/20-Valid-Parentheses/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code>and <code>&#39;]&#39;</code>, determine if the input string is valid.</p><p>An input string is valid if:</p><ol><li>Open brackets must be closed by the same type of brackets.</li><li>Open brackets must be closed in the correct order.</li></ol><p>Note that an empty string is also considered valid.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: "()"Output: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: "()[]{}"Output: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 3:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: "(]"Output: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 4:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: "([)]"Output: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 5:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: "{[]}"Output: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="stack，使用栈保存未匹配的符号"><a href="#stack，使用栈保存未匹配的符号" class="headerlink" title="stack，使用栈保存未匹配的符号"></a>stack，使用栈保存未匹配的符号</h4><ul><li>遇到左括号就压入栈；</li><li>遇到右括号，如栈为空或者栈顶元素不是匹配的左括号，则返回false；否则将匹配的左括号弹出。</li></ul><pre class="line-numbers language-lang-java"><code class="language-lang-java">public boolean isValid(String s) {    if (s == null)          return false;    int n = s.length();    if (n % 2 == 1)// 如果奇数个符号，显然不能匹配          return false;    Stack<Integer> stack = new Stack<>();    HashMap<Character, Integer> symbolVal = new HashMap<>();    symbolVal.put('{', 3);    symbolVal.put('}', -3);    symbolVal.put('[', 2);    symbolVal.put(']', -2);    symbolVal.put('(', 1);    symbolVal.put(')', -1);    for (char c : s.toCharArray()) {        int tmp = symbolVal.get(c);        if (!stack.empty() && stack.peek() + tmp == 0)              stack.pop();        else if (tmp < 0)              return false;        else              stack.push(tmp);    }    return stack.empty();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(n)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash map </tag>
            
            <tag> easy </tag>
            
            <tag> string </tag>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19.Remove Nth Node From End of List</title>
      <link href="/2019/03/27/19-Remove-Nth-Node-From-End-of-List/"/>
      <url>/2019/03/27/19-Remove-Nth-Node-From-End-of-List/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p><a id="more"></a><p><strong>Example:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Given linked list: 1->2->3->4->5, and n = 2.After removing the second node from the end, the linked list becomes 1->2->3->5.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Note:</strong></p><p>Given <em>n</em> will always be valid.</p><p><strong>Follow up:</strong></p><p>Could you do this in one pass?</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="遍历获得节点个数，并直接计算出从head出发需要的步数，即可获得所求节点"><a href="#遍历获得节点个数，并直接计算出从head出发需要的步数，即可获得所求节点" class="headerlink" title="遍历获得节点个数，并直接计算出从head出发需要的步数，即可获得所求节点"></a>遍历获得节点个数，并直接计算出从head出发需要的步数，即可获得所求节点</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public ListNode removeNthFromEnd(ListNode head, int n) {    ListNode dummy = new ListNode(0);    dummy.next = head;    int length  = 0;    ListNode first = head;    while (first != null) {        length++;        first = first.next;    }    length -= n;    first = dummy;    while (length > 0) {        length--;        first = first.next;    }    first.next = first.next.next;    return dummy.next;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(L)​$，但是需要2 passes。</li><li>空间复杂度：$O(1)$</li></ul><h4 id="快慢指针，快的比慢的多走k步即可，当快节点到头，慢节点将指向正确的位置。"><a href="#快慢指针，快的比慢的多走k步即可，当快节点到头，慢节点将指向正确的位置。" class="headerlink" title="快慢指针，快的比慢的多走k步即可，当快节点到头，慢节点将指向正确的位置。"></a>快慢指针，快的比慢的多走k步即可，当快节点到头，慢节点将指向正确的位置。</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public ListNode removeNthFromEnd(ListNode head, int n) {    ListNode dummy = new ListNode(0);    dummy.next = head;    ListNode fast = dummy, slow = dummy;    for (int i = 1; i < n; i++) {        fast = fast.next;        // Invalid n        if (fast == null)            return head;    }    while (fast.next.next != null) {        slow = slow.next;        fast = fast.next;    }    slow.next = slow.next.next;    return dummy.next;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(L)$，1 pass</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> two pointers </tag>
            
            <tag> medium </tag>
            
            <tag> linked list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18.4Sum</title>
      <link href="/2019/03/27/18-4Sum/"/>
      <url>/2019/03/27/18-4Sum/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p><p><strong>Note:</strong></p><p>The solution set must not contain duplicate quadruplets.</p><a id="more"></a><p><strong>Example:</strong></p><pre><code>Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.A solution set is:[  [-1,  0, 0, 1],  [-2, -1, 1, 2],  [-2,  0, 0, 2]]</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="暴力搜索"><a href="#暴力搜索" class="headerlink" title="暴力搜索"></a>暴力搜索</h4><ul><li>时间复杂度：$O(n^4)$</li><li>空间复杂度：$O(n^4)$</li></ul><h4 id="排序-递归-双指针"><a href="#排序-递归-双指针" class="headerlink" title="排序+递归+双指针"></a>排序+递归+双指针</h4><ul><li>这里给出n-sum版本</li><li>使用最小值和最大值进行剪枝可以避免无效计算</li></ul><pre class="line-numbers language-lang-java"><code class="language-lang-java">public List<List<Integer>> fourSum(int[] nums, int target) {    Arrays.sort(nums);    return nSum(nums, target, 4, 0);}private int maxSum(int nums[], int n) {    int res = 0, len = nums.length;    for (int i = 1; i <= n; i++)        res += nums[len - i];    return res;}private int minSum(int[] nums, int n, int index) {    int res = 0;    for (int i = 0; i < n; i++)        res += nums[i + index];    return res;}private List<List<Integer>> nSum(int[] nums, int target, int n, int index) {    if (nums.length - index < n || maxSum(nums, n) < target || minSum(nums, n, index) > target)        return new ArrayList<>();    List<List<Integer>> res = new ArrayList<>();    int len = nums.length;    // 2 sum    if (n == 2) {        int lo = index, hi = len - 1;        while (lo < hi) {            if (nums[lo] + nums[hi] < target) {                do {                    lo++;                } while (lo < hi && nums[lo] == nums[lo - 1]);            } else {// >= target                if (nums[lo] + nums[hi] == target) {                    List<Integer> tmp = new ArrayList<>();                    tmp.add(nums[lo]);                    tmp.add(nums[hi]);                    res.add(tmp);                }                do {                    hi--;                } while (lo < hi && nums[hi] == nums[hi + 1]);            }        }    } else {// n sum        int start = index;        while (start <= len - n) {            List<List<Integer>> tmp = nSum(nums, target - nums[start], n - 1, start + 1);            for (List<Integer> a : tmp) {                a.add(nums[start]);                res.add(a);            }              // remove duplicates            do {                start++;            } while (start <= len - n && nums[start] == nums[start - 1]);        }    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^3)$</li><li>空间复杂度：$O(n^3)$</li></ul><hr><p>事实上，双指针法可以将复杂度降一个n的幂次。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> two pointers </tag>
            
            <tag> medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17.Letters Combinations of a Phone Number</title>
      <link href="/2019/03/27/17-Letters-Combinations-of-a-Phone-Number/"/>
      <url>/2019/03/27/17-Letters-Combinations-of-a-Phone-Number/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent.</p><p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p><a id="more"></a><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt="img"></p><p><strong>Example:</strong></p><pre><code>Input: &quot;23&quot;Output: [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</code></pre><p><strong>Note:</strong></p><p>Although the above answer is in lexicographical order, your answer could be in any order you want.</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="递归-回溯"><a href="#递归-回溯" class="headerlink" title="递归+回溯"></a>递归+回溯</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">private String[] keys = new String[]{"abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};private void helper(List<String> res, String curr, String digits, int index) {    if (index >= digits.length()) {            res.add(curr);          return;    }    for (char c : keys[digits.charAt(index) - '2'].toCharArray())            helper(res, curr + String.valueOf(c), digits, index + 1);}public List<String> letterCombinations(String digits) {      List<String> res = new ArrayList<>();      if (digits.length() == 0)          return res;      helper(res, "", digits, 0);      return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(3^n4^m)​$，n和m分别是对应3个和4个字符的数字在原字符串出现的个数。</li><li>空间复杂度：$O(3^n4^m)$，解的大小；其中栈的深度为原字符串长度。</li></ul><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><ul><li>这里注意，不能直接在遍历时修改。一方面答案会出错，另一方面会遇到concurrentModification的异常。</li></ul><pre class="line-numbers language-lang-java"><code class="language-lang-java">public List<String> letterCombinations(String digits) {    List<String> res = new ArrayList<>();      if (digits.length() == 0)          return res;    res.add("");    String[] keys = new String[]{"abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};    for (char c : digits.toCharArray()) {        List<String> tmp = new ArrayList<>();        for (String s : res) {            for (char d : keys[c - '2'].toCharArray())                tmp.add(s + String.valueOf(d));        }        res = tmp;    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(3^n4^m)$</li><li>空间复杂度：$O(3^n4^m)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> string </tag>
            
            <tag> medium </tag>
            
            <tag> permutation </tag>
            
            <tag> backtracking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16.3Sum Closest</title>
      <link href="/2019/03/27/16-3Sum-Closest/"/>
      <url>/2019/03/27/16-3Sum-Closest/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p><a id="more"></a><p><strong>Example:</strong></p><pre><code>Given array nums = [-1, 2, 1, -4], and target = 1.The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="暴力三重循环"><a href="#暴力三重循环" class="headerlink" title="暴力三重循环"></a>暴力三重循环</h4><ul><li>时间复杂度：$O(n^3)$</li><li>空间复杂度：$O(1)$</li></ul><h4 id="排序-双指针"><a href="#排序-双指针" class="headerlink" title="排序+双指针"></a>排序+双指针</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int threeSumClosest(int[] nums, int target) {    if (nums == null || nums.length < 3)        return 0;    Arrays.sort(nums);    int res = 0, diff = Integer.MAX_VALUE, first;    for (first = 0; first < nums.length - 2; first++) {        int right = nums.length - 1, left = first + 1, tmp = target - nums[first];        while (left < right) {            int curr = nums[left] + nums[right];            if (curr == tmp)                return target;// special case: diff = 0, just return.            if (Math.abs(curr - tmp) < diff) {                diff = Math.abs(curr - tmp);                res = curr + nums[first];            }            if (curr < tmp)                left++;            else                right--;        }    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> two pointers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15.3Sum</title>
      <link href="/2019/03/27/15-3Sum/"/>
      <url>/2019/03/27/15-3Sum/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an array <code>nums</code> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p><p><strong>Note:</strong></p><p>The solution set must not contain duplicate triplets.</p><a id="more"></a><p><strong>Example:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Given array nums = [-1, 0, 1, 2, -1, -4],A solution set is:[  [-1, 0, 1],  [-1, -1, 2]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>暴力循环+去重</p><ul><li>时间复杂度：$O(n^3)$</li><li>空间复杂度：$O(n^3)$</li></ul></li><li><p>排序+双指针</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public List<List<Integer>> threeSum(int[] nums) {    if (nums == null || nums.length < 3)          return new ArrayList<>();    Arrays.sort(nums);    int n = nums.length, i = 0;    List<List<Integer>> res = new ArrayList<>();    while (i < n - 2) {        List<List<Integer>> two = twoSum(nums, i + 1, n - 1, -nums[i]);        res.addAll(two);        do {                i++;        } while (i < n - 2 && nums[i] == nums[i - 1]);    }    return res;}private List<List<Integer>> twoSum(int[] nums, int from, int to, int target) {    List<List<Integer>> res = new ArrayList<>();    if ((nums[from] << 1) > target || (nums[to] << 1) < target)          return res;    while (from < to) {          if (nums[from] + nums[to] < target)              from++;        else {                if (nums[from] + nums[to] == target)                  res.add(Arrays.asList(-target, nums[from], nums[to]));              to--;        }    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(n^2)$</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> two pointers </tag>
            
            <tag> medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.Longest Common Prefix</title>
      <link href="/2019/03/27/14-Longest-Common-Prefix/"/>
      <url>/2019/03/27/14-Longest-Common-Prefix/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: ["flower","flow","flight"]Output: "fl"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: ["dog","racecar","car"]Output: ""Explanation: There is no common prefix among the input strings.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Note:</strong></p><p>All given inputs are in lowercase letters <code>a-z</code>.</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>Horizontal scanning，依次扫描两个单词间的最长前缀</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public String longestCommonPrefix(String[] strs) {      if (strs == null || strs.length == 0)          return "";      String res = strs[0];      for (int i = 1; i < strs.length; i++) {            int index = 0, n1 = res.length(), n2 = strs[i].length();          while (index < n1 && index < n2 && strs[i].charAt(index) == res.charAt(index))              index++;          res = res.substring(0, index);      }      return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(nm)$，n为字符串数量，m为字符串平均长度</li><li>空间复杂度：$O(m)​$</li></ul></li><li><p>Vertical scanning，按字符依次扫描，如果所有str的第i都是这一字符那么就加入前缀</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public String longestCommonPrefix(String[] strs) {      if (strs == null || strs.length == 0)          return "";      StringBuilder res = new StringBuilder();    for (int i = 0; i < strs[0].length(); i++) {            char curr = strs[0].charAt(i);          boolean contains = true;        for (int j = 1; j < strs.length; j++) {            if (i >= strs[j].length() || strs[j].charAt(i) != curr) {                contains = false;                  break;            }        }          if (!contains)              break;          res.append(curr);    }      return res.toString();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(nm)$，n为字符串数量，m为字符串平均长度</li><li>空间复杂度：$O(m)$</li></ul></li><li><p>Divide and conquer，两两比较后再比较。在这里没有体现出优势的原因是两两比较的成本比较低（$O(m)$），时间复杂度也不比常规做法好</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public String longestCommonPrefix(String[] strs) {      if (strs == null || strs.length == 0)          return "";      return helper(strs, 0, strs.length - 1);}public String helper(String[] strs, int from, int to) {      if (to == from)          return strs[from];      int mid = from + (to - from) / 2;      return commonPrefix(helper(strs, from, mid), helper(strs, mid + 1, to));}private String commonPrefix(String s1, String s2) {      int i = 0, n1 = s1.length(), n2 = s2.length();      for (; i < n1 && i < n2; i++)          if (s1.charAt(i) != s2.charAt(i))              break;      return s1.substring(0, i);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(nm)$，因为一共大约有$n/2 + n/4 + … + 1 = n = O(n)$次比较，每次比较的复杂度为$O(m)$</li><li>空间复杂度：$O(log(n))$，也就是递归栈的深度</li></ul></li><li><p>binary search，找到最短的字符串长度，并对可能的长度进行二分，遍历以确认这个长度是否是公共子序列。</p><ul><li>（二分的奇妙用法）</li></ul><pre class="line-numbers language-lang-java"><code class="language-lang-java">public String longestCommonPrefix(String[] strs) {    if (strs == null || strs.length == 0)        return "";    int minLen = Integer.MAX_VALUE;    for (String str : strs)        minLen = Math.min(minLen, str.length());    int lo = 0, hi = minLen;    while (lo < hi) {        int mi = (lo + hi) / 2;        if (isCommonPrefix(strs, mi))            lo = mi + 1;        else            hi = mi;    }    if (!isCommonPrefix(strs, lo))        lo--;    return strs[0].substring(0, lo);}private boolean isCommonPrefix(String[] strs, int len){    String str1 = strs[0].substring(0, len);    for (int i = 1; i < strs.length; i++)        if (!strs[i].startsWith(str1))            return false;    return true;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(nmlog(m))$，一共调用$O(log(m))$次<code>isCommonPrefix</code>函数，每次调用复杂度为$O(nm)$</li><li>空间复杂度：$O(1)$</li></ul></li></ol><hr><h3 id="Follow-up：如果需要计算某字符串s和strs共同的最长前缀需要多次调用，应该如何实现？假设strs不变"><a href="#Follow-up：如果需要计算某字符串s和strs共同的最长前缀需要多次调用，应该如何实现？假设strs不变" class="headerlink" title="Follow up：如果需要计算某字符串s和strs共同的最长前缀需要多次调用，应该如何实现？假设strs不变"></a>Follow up：如果需要计算某字符串s和strs共同的最长前缀需要多次调用，应该如何实现？假设strs不变</h3><ul><li>使用trie。<ul><li>时间复杂度：$O(nm)$在构建树过程，$O(m)$在查找过程</li><li>空间复杂度：$O(nm)$用于存储trie树</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easy </tag>
            
            <tag> string </tag>
            
            <tag> longest xxx </tag>
            
            <tag> divide and conquer </tag>
            
            <tag> binary search </tag>
            
            <tag> trie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.Roman to Integer</title>
      <link href="/2019/03/27/13-Roman-to-Integer/"/>
      <url>/2019/03/27/13-Roman-to-Integer/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Roman numerals are represented by seven different symbols: <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Symbol       ValueI             1V             5X             10L             50C             100D             500M             1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>For example, two is written as <code>II</code> in Roman numeral, just two one’s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p><ul><li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9. </li><li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90. </li><li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li></ul><p>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: "III"Output: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: "IV"Output: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 3:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: "IX"Output: 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 4:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: "LVIII"Output: 58Explanation: L = 50, V= 5, III = 3.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 5:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: "MCMXCIV"Output: 1994Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>使用hash map存所有数字对应字符，并将字符串的每一个字符转换成数字，接下来观察规律：</p><ul><li>如果从左到右没有出现逆序的字符（即，每个字符代表的数字都不大于左侧字符代表的数字）那么简单相加即可</li><li>如果出现逆序字符，那么该位的结果将会是用逆序字符的后一位减去逆序字符的数字</li></ul><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int romanToInt(String s) {    Map<Character, Integer> numMap = new HashMap<>();    numMap.put('I', 1);    numMap.put('V', 5);    numMap.put('X', 10);    numMap.put('L', 50);    numMap.put('C', 100);    numMap.put('D', 500);    numMap.put('M', 1000);    int[] nums = new int[s.length()];    int n = s.length(), res = 0;    for (int i = 0; i < n; i++)        nums[i] = numMap.get(s.charAt(i));    for (int i = 0; i < n - 1; i++) {        if (nums[i] < nums[i + 1])            res -= nums[i];        else            res += nums[i];    }    return res + nums[n - 1];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash map </tag>
            
            <tag> easy </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.Integer to Roman</title>
      <link href="/2019/03/27/12-Integer-to-Roman/"/>
      <url>/2019/03/27/12-Integer-to-Roman/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Roman numerals are represented by seven different symbols: <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Symbol       ValueI             1V             5X             10L             50C             100D             500M             1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>For example, two is written as <code>II</code> in Roman numeral, just two one’s added together. Twelve is written as, <code>XII</code>, which is simply <code>X</code> + <code>II</code>. The number twenty seven is written as <code>XXVII</code>, which is <code>XX</code> + <code>V</code> + <code>II</code>.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p><ul><li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9. </li><li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90. </li><li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li></ul><p>Given an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: 3Output: "III"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: 4Output: "IV"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 3:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: 9Output: "IX"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 4:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: 58Output: "LVIII"Explanation: L = 50, V = 5, III = 3.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 5:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: 1994Output: "MCMXCIV"Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>用hash map存所有数字对应的罗马字符；对每一位上的digit找到对应字符即可。</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">private String repeat(String a, int time) {    if (time <= 0)        return "";    StringBuilder res = new StringBuilder();    for (int i = 0; i < time; i++)        res.append(a);    return res.toString();}public String intToRoman(int num) {    StringBuilder res = new StringBuilder();    Map<Integer, String> charSet = new HashMap<>();    charSet.put(1, "I");    charSet.put(5, "V");    charSet.put(10, "X");    charSet.put(50, "L");    charSet.put(100, "C");    charSet.put(500, "D");    charSet.put(1000, "M");    res.append(repeat(charSet.get(1000), num / 1000));    // res.append(charSet.get(1000).repeat(num / 1000)); // since JDK 11    num %= 1000;    int base = 100;    while (base > 0) {        switch (num / base) {            case 9:                res.append(charSet.get(base));                res.append(charSet.get(base * 10));                break;            case 8:            case 7:            case 6:            case 5:                res.append(charSet.get(base * 5));                res.append(repeat(charSet.get(base), num / base - 5));                // res.append(charSet.get(base).repeat(num / base - 5)); // since JDK 11                break;            case 4:                res.append(charSet.get(base));                res.append(charSet.get(base * 5));                break;            default:                res.append(repeat(charSet.get(base), num / base));                // res.append(charSet.get(base).repeat(num / base)); // since JDK 11        }        num %= base;        base /= 10;    }    return res.toString();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(log(num))​$</li><li>空间复杂度：$O(log(num))$</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> string </tag>
            
            <tag> medium </tag>
            
            <tag> hash set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.Container With Most Water</title>
      <link href="/2019/03/27/11-Container-With-Most-Water/"/>
      <url>/2019/03/27/11-Container-With-Most-Water/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given <em>n</em> non-negative integers <em>a1</em>, <em>a2</em>, …, <em>an</em> , where each represents a point at coordinate (<em>i</em>, <em>ai</em>). <em>n</em> vertical lines are drawn such that the two endpoints of line <em>i</em> is at (<em>i</em>, <em>ai</em>) and (<em>i</em>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p><p><strong>Note:</strong> You may not slant the container and <em>n</em> is at least 2.</p> <a id="more"></a><p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg" alt="img"></p><p>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49. </p><p><strong>Example:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: [1,8,6,2,5,4,8,3,7]Output: 49<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>暴力求解，遍历每一组i，j。</p><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(1)$</li></ul></li><li><p>双指针。首尾向中间靠拢，贪心收缩（每次移动值较小的指针）</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int maxArea(int[] height) {    int left = 0, right = height.length - 1, res = 0, curr;    while (left < right) {        if (height[left] < height[right]) {            curr = (right - left) * height[left];            left++;        } else {            curr = (right - left) * height[right];            right--;        }        res = Math.max(res, curr)    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(1)$</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> two pointers </tag>
            
            <tag> medium </tag>
            
            <tag> greedy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.Regular Expression Matching</title>
      <link href="/2019/03/26/10-Regular-Expression-Matching/"/>
      <url>/2019/03/26/10-Regular-Expression-Matching/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an input string (<code>s</code>) and a pattern (<code>p</code>), implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code>.</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">'.' Matches any single character.'*' Matches zero or more of the preceding element.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The matching should cover the <strong>entire</strong> input string (not partial).</p><p><strong>Note:</strong></p><ul><li><code>s</code> could be empty and contains only lowercase letters <code>a-z</code>.</li><li><code>p</code> could be empty and contains only lowercase letters <code>a-z</code>, and characters like <code>.</code> or <code>*</code>.</li></ul><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input:s = "aa"p = "a"Output: falseExplanation: "a" does not match the entire string "aa".<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input:s = "aa"p = "a*"Output: trueExplanation: '*' means zero or more of the precedeng element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 3:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input:s = "ab"p = ".*"Output: trueExplanation: ".*" means "zero or more (*) of any character (.)".<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 4:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input:s = "aab"p = "c*a*b"Output: trueExplanation: c can be repeated 0 times, a can be repeated 1 time. Therefore it matches "aab".<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 5:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input:s = "mississippi"p = "mis*is*p*."Output: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>嵌套递归求解</p><ul><li>对（star和它之前一个字符）之前的符号进行简单字符匹配；</li><li>对（star和它之前一个字符），对s中所有可能的长度进行划分（从0开始）；</li><li>对上一步产生的划分，使用star之后部分和s划分的后半部分进行匹配。只要有一种匹配满足即可。</li></ul><pre class="line-numbers language-lang-java"><code class="language-lang-java">private boolean charMatch(char s, char p) {    return s == p || p == '.';}public boolean isMatch(String s, String p) {    int star = p.indexOf("*"), n1 = s.length(), n2 = p.length();    if (star == 0)        return false;    if (star < 0) {        // simple match.        if (n1 != n2)            return false;        for (int i = 0; i < n1; i++)            if (!charMatch(s.charAt(i), p.charAt(i)))                return false;        return true;    } else {        // simple match the chars before star - 1        if (n1 < star - 1 || !isMatch(s.substring(0, star - 1), p.substring(0, star - 1)))            return false;        // 从s中取0位到n位，和p的含*的两个位进行匹配，同时将后面部分和s的star+1起的字符串匹配        int i = star - 1;        String after = p.substring(star + 1);        char repeat = p.charAt(star - 1);        for (; i < n1 && charMatch(s.charAt(i), repeat); i++)            if (isMatch(s.substring(i), after))                return true;        // 上面的匹配还剩下最后一次，也就是在0～i-1部分都可以匹配p[star - 1]的时候，从i开始的匹配        return isMatch(s.substring(i), after);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：比较难分析，但是可达到$O((T+P)2^{T+\frac{P}{2}})​$</li><li>空间复杂度：同样比较难分析，可达到$O((T+P)2^{T+\frac{P}{2}})​$</li></ul></li><li><p>We define <code>dp[i][j]</code> to be <code>true</code> if <code>s[0..i)</code> matches <code>p[0..j)</code> and <code>false</code> otherwise.</p><ol><li><code>dp[i][j] = dp[i - 1][j - 1]</code>, if <code>p[j - 1] != &#39;*&#39; &amp;&amp; (s[i - 1] == p[j - 1] || p[j - 1] == &#39;.&#39;)</code>;</li><li><code>dp[i][j] = dp[i][j - 2]</code>, if <code>p[j - 1] == &#39;*&#39;</code> and the pattern repeats for 0 time;</li><li><code>dp[i][j] = dp[i - 1][j] &amp;&amp; (s[i - 1] == p[j - 2] || p[j - 2] == &#39;.&#39;)</code>, if <code>p[j - 1] == &#39;*&#39;</code> and the pattern repeats for at least 1 time.</li></ol><pre class="line-numbers language-lang-java"><code class="language-lang-java">public boolean isMatch(String text, String pattern) {      int nt = text.length(), np = pattern.length();    boolean[][] dp = new boolean[nt + 1][np + 1];    dp[nt][np] = true;    for (int i = nt; i >= 0; i--) {        for (int j = np - 1; j >= 0; j--) {            boolean first_match = (i < nt && (pattern.charAt(j) == text.charAt(i)                                              || pattern.charAt(j) == '.'));            if (j + 1 < pattern.length() && pattern.charAt(j+1) == '*')                dp[i][j] = dp[i][j + 2] || first_match && dp[i + 1][j];            else                dp[i][j] = first_match && dp[i + 1][j + 1];        }    }    return dp[0][0];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(TP)​$</li><li>空间复杂度：$O(TP)$</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hard </tag>
            
            <tag> dp </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.Palindrome Number</title>
      <link href="/2019/03/26/9-Palindrome-Number/"/>
      <url>/2019/03/26/9-Palindrome-Number/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: 121Output: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: -121Output: falseExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 3:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: 10Output: falseExplanation: Reads 01 from right to left. Therefore it is not a palindrome.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>获得翻转后的数。如果发生溢出，那么说明不可能是回文数；所以不必考虑溢出问题，翻转即可。</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public boolean isPalindrome(int x) {    if (x < 0)          return false;    int reverseX = 0, copyX = x;    while(x!=0) {        reverseX = reverseX * 10 + x % 10;        x /= 10;    }    return reverseX == copyX;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(log(x))$</li><li>空间复杂度：$O(1)$</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.Reverse Integer</title>
      <link href="/2019/03/26/7-Reverse-Integer/"/>
      <url>/2019/03/26/7-Reverse-Integer/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a 32-bit signed integer, reverse digits of an integer.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: 123Output: 321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: -123Output: -321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 3:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: 120Output: 21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Note:</strong><br>Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31,  2^31 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>trick：用long存储结果</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int reverse(int x) {    long res = 0;    while (x != 0) {        res = res * 10 + x % 10;        x /= 10;    }      int tmp = (int) res;    return tmp == res ? tmp : 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(logn)$</li><li>空间复杂度：$O(1)​$</li></ul></li><li><p>进行大小检测，但是检测过程比较复杂</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int reverse(int x) {    int res = 0;    while (x != 0) {        int pop = x % 10;        x /= 10;        if (res > Integer.MAX_VALUE/10 || (res == Integer.MAX_VALUE / 10 && pop > 7))              return 0;        if (res < Integer.MIN_VALUE/10 || (res == Integer.MIN_VALUE / 10 && pop < -8))              return 0;        res = res * 10 + pop;    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(log(x))$</li><li>空间复杂度：$O(1)$</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.Zig Zag Conversion</title>
      <link href="/2019/03/26/6-Zig-Zag-Conversion/"/>
      <url>/2019/03/26/6-Zig-Zag-Conversion/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p><pre class="line-numbers language-lang-cpp"><code class="language-lang-cpp">P   A   H   NA P L S I I GY   I   R<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p><p>Write the code that will take a string and make this conversion given a number of rows:</p><pre class="line-numbers language-lang-cpp"><code class="language-lang-cpp">string convert(string s, int numRows);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: s = "PAYPALISHIRING", numRows = 3Output: "PAHNAPLSIIGYIR"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">Input: s = "PAYPALISHIRING", numRows = 4Output: "PINALSIGYAHRPI"Explanation:P     I    NA   L S  I GY A   H RP     I<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>来回扫描</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public String convert(String s, int numRows) {    if (numRows == 1)        return s;    int n = s.length(), curr = 1, currRow = 1, currDir = 1;    char[] str = s.toCharArray();    StringBuilder[] rows = new StringBuilder[numRows];    for (int i = 0; i < numRows; i++)        rows[i] = new StringBuilder();      // 来回扫描，currDir记录前进方向    rows[0].append(str[0]);    while (curr < n) {        if (currRow == numRows - 1 || currRow == 0)            currDir *= -1;        rows[currRow].append(str[curr++]);        currRow += currDir;    }    for (int i = 1; i < numRows; i++)        rows[0].append(rows[i]);    return rows[0].toString();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(n)$</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> string </tag>
            
            <tag> medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.Longest Palindromic Substring</title>
      <link href="/2019/03/26/5-Longest-Palindromic-Substring/"/>
      <url>/2019/03/26/5-Longest-Palindromic-Substring/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a string <strong>s</strong>, find the longest palindromic substring in <strong>s</strong>. You may assume that the maximum length of <strong>s</strong> is 1000.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-lang-cpp"><code class="language-lang-cpp">Input: "babad"Output: "bab"Note: "aba" is also a valid answer.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-lang-cpp"><code class="language-lang-cpp">Input: "cbbd"Output: "bb"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li><p>暴力遍历，从头到尾依次判断</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">private boolean isValid(String s, int from, int to) {      for (int i = from, j = to; i < j; i++, j--)          if (s.charAt(i) != s.charAt(j))              return false;      return true;}public String longestPalindrome(String s) {      if (s == null || s.length() == 0)          return "";      int n = s.length(), start = 0, end = 0;    for (int i = 0; i < n; i++) {        for (int j = i + 1; j < n; j++) {            if (isValid(s, i, j) && j - i > end - start) {                    start = i;                  end = j;            }        }    }      return s.substring(start, end + 1);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^3)$</li><li>空间复杂度：$O(1)$</li></ul></li><li><p>以某个字符（奇数长度）或者两个字符（偶数长度）作为回文串的中心向外拓展。</p><pre class="line-numbers language-lang-java"><code class="language-lang-java">private int count(String s, int left, int right) {    int i = 0;    for (int n = s.length(); left - i >= 0 && right + i < n; i++)        if (s.charAt(left - i) != s.charAt(right + i))            break;    return --i;}public String longestPalindrome(String s) {    if (s == null || s.length() == 0)        return "";    int n = s.length(), start = 0, end = 1;      // odd length    for (int i = 1; i < n; i++) {        int tmp = count(s, i, i);        if ((tmp << 1) + 1 > end - start) {            start = i - tmp;            end = i + tmp + 1;        }    }      // even length    for (int i = 0; i < n - 1; i++) {        if (s.charAt(i) == s.charAt(i + 1)) {            int tmp = count(s, i, i + 1);            if ((tmp << 1) + 2 > end - start) {                start = i - tmp;                end = i + tmp + 2;            }        }    }    return s.substring(start, end);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(1)$</li></ul></li><li><p>dp：二维数组记录i到j是否为回文字符串；<code>dp[i][j] = dp[i + 1][j - 1] &amp;&amp; s.charAt(i) == s.charAt(j)</code></p><pre class="line-numbers language-lang-java"><code class="language-lang-java">public String longestPalindrome(String s) {      if (s == null || s.length() == 0)          return "";      int n = s.length(), start = 0, end = 1;      boolean[][] dp = new boolean[n][n];      // 这里的遍历顺序很重要：      // 因为更新当前i和j需要参考i+1到j-1的位置，所以需要i从大到小，j从小到大更新；      // 同时，j < i是没有意义的。      for (int i = n - 1; i >= 0; i--) {        for (int j = i; j < n; j++) {              // 除了从公式得出的过程，如果i和j相差<=2字符，那么当然是回文            dp[i][j] = s.charAt(i) == s.charAt(j) && (j - i < 3 || dp[i + 1][j - 1]);            if (dp[i][j] && j - i + 1 > end - start) {                start = i;                end = j + 1;            }        }    }    return s.substring(start, end);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(n^2)$</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> medium </tag>
            
            <tag> longest xxx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.Median of Two Sorted Arrays</title>
      <link href="/2019/03/25/4-Median-of-Two-Sorted-Arrays/"/>
      <url>/2019/03/25/4-Median-of-Two-Sorted-Arrays/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively.</p><p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p><p>You may assume <strong>nums1</strong> and <strong>nums2</strong> cannot be both empty.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-lang-cpp"><code class="language-lang-cpp">nums1 = [1, 3]nums2 = [2]The median is 2.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-lang-cpp"><code class="language-lang-cpp">nums1 = [1, 2]nums2 = [3, 4]The median is (2 + 3)/2 = 2.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="归并到一个数组，然后直接求解"><a href="#归并到一个数组，然后直接求解" class="headerlink" title="归并到一个数组，然后直接求解"></a>归并到一个数组，然后直接求解</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public double findMedianSortedArrays(int[] A, int[] B) {    int m = A.length, n = B.length, i1 = 0, i2 = 0, i = 0;    int[] c = new int[m + n];    while (i1 < m && i2 < n) {        if (A[i1] < B[i2])            c[i++] = A[i1++];        else            c[i++] = B[i2++];    }    while (i1 < m)        c[i++] = A[i1++];    while (i2 < n)        c[i++] = B[i2++];    int index = (m + n) / 2;    if ((m + n) % 2 == 1)        return (double) c[index];    return (c[index] + c[index - 1]) / 2.0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n1+n2)$，n1和n2分别是两个数组长度</li><li>空间复杂度：$O(n1 + n2)​$</li></ul><h4 id="递归二分查找"><a href="#递归二分查找" class="headerlink" title="递归二分查找"></a>递归二分查找</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">// 首先将问题转换为找到第k小的数，并对奇偶分开讨论public double findMedianSortedArrays(int[] nums1, int[] nums2) {    int m = nums1.length, n = nums2.length, left = (m + n + 1) / 2, right = (m + n + 2) / 2;    if (left == right)        return (double) findKth(nums1, 0, nums2, 0, left);    return (findKth(nums1, 0, nums2, 0, left) + findKth(nums1, 0, nums2, 0, right)) / 2.0;}// 找到两个数组中，从i开始的部分和从j开始的部分，第k位的数// 每次搜索都会减少k/2的数，所以调用层数是O(logk) = O(log(n1 + n2))private int findKth(int[] nums1, int i, int[] nums2, int j, int k) {    if (i >= nums1.length)        return nums2[j + k - 1];    if (j >= nums2.length)        return nums1[i + k - 1];      // 这里拿出来特判，是因为k==1对下面的过程不适用    if (k == 1)        return Math.min(nums1[i], nums2[j]);      // 首先假设两边各自贡献k/2个数；      // 找到两个数组中，k/2位置的数，那么小的那一侧将会贡献更多的数，所以就从小的一侧开始切割掉k/2个数    int midVal1 = (i + k / 2 - 1 < nums1.length) ? nums1[i + k / 2 - 1] : Integer.MAX_VALUE;    int midVal2 = (j + k / 2 - 1 < nums2.length) ? nums2[j + k / 2 - 1] : Integer.MAX_VALUE;    if (midVal1 < midVal2)        return findKth(nums1, i + k / 2, nums2, j, k - k / 2);    return findKth(nums1, i, nums2, j + k / 2, k - k / 2);}// 其实也可以改写成迭代版本，但是对于这个函数来说出口过多，也不是很简洁<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(log(n1 + n2))​$</li><li>空间复杂度：$O(log(n1 + n2))​$（这里指递归栈的空间）</li></ul><h4 id="迭代二分查找，详细解释"><a href="#迭代二分查找，详细解释" class="headerlink" title="迭代二分查找，详细解释"></a>迭代二分查找，<a href="https://leetcode.com/problems/median-of-two-sorted-arrays/discuss/2471/very-concise-ologminmn-iterative-solution-with-detailed-explanation" target="_blank" rel="noopener">详细解释</a></h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public double findMedianSortedArrays(int[] nums1, int[] nums2) {    int m = nums1.length, n = nums2.length;    if (m < n)          return findMedianSortedArrays(nums2, nums1);    if (n == 0)          return (nums1[(m - 1) / 2] + nums1[m / 2]) / 2.0;    int left = 0, right = 2 * n;    while (left <= right) {        int mid2 = (left + right) / 2;        int mid1 = m + n - mid2;        double L1 = mid1 == 0 ? Double.MIN_VALUE : nums1[(mid1 - 1) / 2];        double L2 = mid2 == 0 ? Double.MIN_VALUE : nums2[(mid2 - 1) / 2];        double R1 = mid1 == m * 2 ? Double.MAX_VALUE : nums1[mid1 / 2];        double R2 = mid2 == n * 2 ? Double.MAX_VALUE : nums2[mid2 / 2];        if (L1 > R2)              left = mid2 + 1;        else if (L2 > R1)              right = mid2 - 1;        else              return (Math.max(L1, L2) + Math.min(R1, R2)) / 2;    }    return -1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(log(min(n1, n2)))$</li><li>空间复杂度：$O(1)$</li></ul><hr><p>这题还有很多其他的奇技淫巧，但可能没有上面的做法容易理解。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> hard </tag>
            
            <tag> binary search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.Longest Substring Without Repeating Characters</title>
      <link href="/2019/03/25/3-Longest-Substring-Without-Repeating-Characters/"/>
      <url>/2019/03/25/3-Longest-Substring-Without-Repeating-Characters/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given a string, find the length of the <strong>longest substring</strong> without repeating characters.</p><a id="more"></a><p><strong>Example 1:</strong></p><pre class="line-numbers language-lang-cpp"><code class="language-lang-cpp">Input: "abcabcbb"Output: 3 Explanation: The answer is "abc", with the length of 3.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-lang-cpp"><code class="language-lang-cpp">Input: "bbbbb"Output: 1Explanation: The answer is "b", with the length of 1.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Example 3:</strong></p><pre class="line-numbers language-lang-cpp"><code class="language-lang-cpp">Input: "pwwkew"Output: 3Explanation: The answer is "wke", with the length of 3.              Note that the answer must be a substring, "pwke" is a subsequence and not a substring.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="暴力，检查不同的头和尾。"><a href="#暴力，检查不同的头和尾。" class="headerlink" title="暴力，检查不同的头和尾。"></a>暴力，检查不同的头和尾。</h4><ul><li>时间复杂度：$O(n^3)​$</li><li>空间复杂度：$O(min(n, m))$，n为字符串长度，而m为字符串中出现的字符种类数量</li></ul><h4 id="滑动窗口1。用HashSet存当前出现字符。"><a href="#滑动窗口1。用HashSet存当前出现字符。" class="headerlink" title="滑动窗口1。用HashSet存当前出现字符。"></a>滑动窗口1。用HashSet存当前出现字符。</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int lengthOfLongestSubstring(String s) {    int n = s.length();    Set<Character> set = new HashSet<>();    int res = 0, i = 0, j = 0;    while (i < n && j < n) {        // try to extend the range [i, j]        if (!set.contains(s.charAt(j))) {            set.add(s.charAt(j++));            res = Math.max(res, j - i);        } else            set.remove(s.charAt(i++));    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(min(n, m))​$</li></ul><h4 id="滑动窗口2。用HashMap存当前出现的字符以及出现位置。"><a href="#滑动窗口2。用HashMap存当前出现的字符以及出现位置。" class="headerlink" title="滑动窗口2。用HashMap存当前出现的字符以及出现位置。"></a>滑动窗口2。用HashMap存当前出现的字符以及出现位置。</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int lengthOfLongestSubstring(String s) {    int res = 0, n = s.length(), start = 0;    HashMap<Character, Integer> pos = new HashMap<>();    for (int i = 0; i < n; i++) {        char c = s.charAt(i);        if (pos.containsKey(c))            start = Math.max(pos.get(c) + 1, start);// key point                  // 这里必须用max，因为有可能pos.get(c) + 1比start要小（较早出现，但未更新的字符）        pos.put(c, i);        res = Math.max(res, i - start + 1);    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)​$</li><li>空间复杂度：$O(min(n, m))$</li></ul><h4 id="同3，但是可以将HashMap转换成HashTable，使用int-128-存放所有出现的字符位置。"><a href="#同3，但是可以将HashMap转换成HashTable，使用int-128-存放所有出现的字符位置。" class="headerlink" title="同3，但是可以将HashMap转换成HashTable，使用int[128]存放所有出现的字符位置。"></a>同3，但是可以将HashMap转换成HashTable，使用int[128]存放所有出现的字符位置。</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int lengthOfLongestSubstring(String s) {    int n = s.length(), res = 0;    int[] index = new int[128]; // current index of character      // 使用128存，而不是26存的好处不止在于可以放其他的字符，而且不需要进行类似“i-‘A’”的操作    // try to extend the range [i, j]    for (int j = 0, i = 0; j < n; j++) {        i = Math.max(index[s.charAt(j)], i);        res = Math.max(res, j - i + 1);        index[s.charAt(j)] = j + 1;    }    return res;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)$</li><li>空间复杂度：$O(m)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash map </tag>
            
            <tag> string </tag>
            
            <tag> medium </tag>
            
            <tag> hash set </tag>
            
            <tag> sliding window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Add Two Numbers</title>
      <link href="/2019/03/25/2-Add-Two-Numbers/"/>
      <url>/2019/03/25/2-Add-Two-Numbers/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong> and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><a id="more"></a><p><strong>Example:</strong></p><pre class="line-numbers language-lang-cpp"><code class="language-lang-cpp">Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)Output: 7 -> 0 -> 8Explanation: 342 + 465 = 807.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="遍历，记得dummy-head的常用做法。"><a href="#遍历，记得dummy-head的常用做法。" class="headerlink" title="遍历，记得dummy head的常用做法。"></a>遍历，记得dummy head的常用做法。</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public ListNode addTwoNumbers(ListNode l1, ListNode l2) {    int carry = 0;    ListNode dummy = new ListNode(0), curr = dummy; // dummy head    while (carry > 0 || l1 != null || l2 != null) {        if (l1 != null) {            carry += l1.val;            l1 = l1.next;        }        if (l2 != null) {            carry += l2.val;            l2 = l2.next;        }        curr.next = new ListNode(carry % 10);        curr = curr.next;        carry /= 10;    }    return dummy.next;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n1 + n2)$，n1和n2分别是两个链表长度</li><li>空间复杂度：$O(max(n1, n2))$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> medium </tag>
            
            <tag> linked list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Two Sum</title>
      <link href="/2019/03/25/1-Two-Sum/"/>
      <url>/2019/03/25/1-Two-Sum/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p><p>You may assume that each input would have <strong>exactly</strong> one solution, and you may not use the <em>same</em> element twice.</p><a id="more"></a><p><strong>Example:</strong></p><pre class="line-numbers language-lang-cpp"><code class="language-lang-cpp">Given nums = [2, 7, 11, 15], target = 9,Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1].<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="使用排序-双指针"><a href="#使用排序-双指针" class="headerlink" title="使用排序+双指针"></a>使用排序+双指针</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int[] twoSum(int[] nums, int target) {      Arrays.sort(nums);      int left = 0, right = nums.length - 1;      while (left < right) {            if (nums[left] + nums[right] < target)              left++;          else if (nums[left] + nums[right] > target)              right--;          else              break;      }      return new int[]{left, right};}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(nlogn)$</li><li>空间复杂度：$O(1)$</li></ul><h4 id="使用HashMap存下数字和对应下标，一边存一边遍历"><a href="#使用HashMap存下数字和对应下标，一边存一边遍历" class="headerlink" title="使用HashMap存下数字和对应下标，一边存一边遍历"></a>使用HashMap存下数字和对应下标，一边存一边遍历</h4><pre class="line-numbers language-lang-java"><code class="language-lang-java">public int[] twoSum(int[] nums, int target) {    HashMap<Integer, Integer> numbers = new HashMap<>();    for (int i = 0; i < nums.length; i++) {        int n = nums[i];        if (numbers.containsKey(target - n))            return new int[]{numbers.get(target - n), i};        numbers.put(n, i);    }    return new int[]{};}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(n)​$</li><li>空间复杂度：$O(n)$</li></ul><h4 id="对每个元素暴力遍历找另一半，代码略。"><a href="#对每个元素暴力遍历找另一半，代码略。" class="headerlink" title="对每个元素暴力遍历找另一半，代码略。"></a>对每个元素暴力遍历找另一半，代码略。</h4><ul><li>时间复杂度：$O(n^2)$</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash map </tag>
            
            <tag> array </tag>
            
            <tag> two pointers </tag>
            
            <tag> easy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello, World</title>
      <link href="/2019/03/24/Hello-World/"/>
      <url>/2019/03/24/Hello-World/</url>
      
        <content type="html"><![CDATA[<p>这里是ZJU软工菜🐔一枚。</p><p>记录刷题、面试，项目经历，以及其他……这是我来的路。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shape of Britain——英国访学游记</title>
      <link href="/2018/09/03/Shape-of-Britain/"/>
      <url>/2018/09/03/Shape-of-Britain/</url>
      
        <content type="html"><![CDATA[<p>这是我去年暑假去英国的访学游记。</p><p>文中照片全部来自本人手机拍摄……</p><hr><h4 id="8月21日-伦敦时间23-24于飞机"><a href="#8月21日-伦敦时间23-24于飞机" class="headerlink" title="8月21日    伦敦时间23:24于飞机"></a>8月21日    伦敦时间23:24于飞机</h4><h3 id="序"><a href="#序" class="headerlink" title="序"></a>序</h3><p>​    我睡不着。</p><p>​    刚刚结束为期十七天，新鲜而充实的异国之旅带来的疲倦，反而令我难以入睡。</p><p>​    机舱里隆隆的引擎声和从脚底传来的震动，以及冷气略强的空调，似乎都可以成为失眠的理由。但，好像并不是。</p><p>​    是因为即将回国带来的激动？离开这片梦幻的土地产生的不舍？又或者是即将与这群朝夕相处的同伴分别，回归平淡日常带来的落差？</p><p>​    我很难归咎于其中一个理由。也许对几小时后欣赏舷窗外的日出的期待才是罪魁祸首。</p><p>​    窗外，铺开在飞机下方的云海像初春渐渐化开的薄薄雪层，里面偶尔可见闪烁的点点灯火，是城市的眼睛。近处的雾霭模糊了视线，不仔细看仿佛云层未曾移动。</p><p>​    在太阳升起之前，我打算整理一下这些天的经历和思绪。遗憾的是我没有记录日记的好习惯，这么多天的记忆片段混合只带给我一个英国朦胧的印象。</p><p>​    那么，我将努力描绘这一轮廓的一些边边角角，而非以日志的形式，记录下我的所见与所想。</p><h3 id="街道"><a href="#街道" class="headerlink" title="街道"></a>街道</h3><p><img src="/2018/09/03/Shape-of-Britain/street.jpg" alt></p><p>​    伦敦的街道上，四处有着经历数百年风雨洗礼的古迹，也有一些年代较近但是同样典雅华美的房屋，二者融为一体，用浓厚的历史韵味浸润着穿行其中的人们。市区没有高楼大厦带来的压迫感，像一个健谈而好客的朋友，向旅行者娓娓道来这座城市的故事，却又狡黠地隐藏起无数细节，等待着有心人细细发掘和品味。</p><p>​    稍一抬头，就能看见伦敦的蓝天——如今的伦敦早已摘下雾都的灰帽子，尽显她迷人的风姿。大本钟和伦敦眼这些地标脱颖而出，构成了无数游人记忆的背景物。</p><p>​    这里遍地都是女王的宠物——灰羽白尾的鸽子悠闲地停在人行道上、房檐上，它们和行人一道，从容信步于大街上，俨然是一副英国公民的仪态。听说私自捉鸽子还是不小的罪：）</p><p>​    不时可以看见作为伦敦又一标志物的红色双层巴士在街道上穿行，给中世纪风格的街道带来一道明亮灵动的色彩。从巴士的二层向外可以俯瞰街道，为游览伦敦带来一个新奇的视角。</p><p>​    这里美中不足的是街道的规划。出于保护建筑的考虑，没有进行大范围的扩建，过去留给马车和行人的街道对现在这座处处都是异乡观光客的城市来说略显窘迫。此外还有缺少自行车专线，以及和狭窄的小路不相称的密集红绿灯等等的小毛病。</p><p>​    让人好笑的是，一直以来印象里欧洲市民的高素质在这里也被证明过于理想化了——大部分时候，这里的人也都是凑够一拨就敢闯红灯的主儿。不过这里的司机倒是颇有风度，一般都会礼让行人，也很少用喇叭吓唬人。当然这一点杭州也做的越来越好了。</p><p><img src="/2018/09/03/Shape-of-Britain/street in cambridge.jpg" alt></p><h3 id="艺人"><a href="#艺人" class="headerlink" title="艺人"></a>艺人</h3><p><img src="/2018/09/03/Shape-of-Britain/band.jpg" alt></p><p>​    走在伦敦的街道上，常常能听到忧郁的吉他弹唱，又或是明快的苏格兰风笛乐。有时你会看到一个衣着朴素的青年，随意地站在地铁的入口处翻唱流行歌曲；有时你会看到一个装备简单的乐队，在广场上即兴地演奏。他们周围总是不乏热情喝彩的观众，他们前面的盒子和帽子里总是堆满了硬币和纸币。</p><p>​    不过，可不要把他们和一般卖唱为生的流浪者相提并论——他们之中很多都是一些地方上小有名气的歌手和乐团，通过这样没有门槛的演出圈粉。也有一些是纯粹的音乐爱好者，在主业以外靠街头表演来调剂消遣。</p><p>​    大部分的艺人都是一群热爱生活的人，街头的表演可能不仅仅是谋生的手段，也是快乐和满足的源泉。这些自由而快乐的艺人，是伦敦城的最好注解。</p><h3 id="地铁"><a href="#地铁" class="headerlink" title="地铁"></a>地铁</h3><p>​    在伦敦的街道上走累了，不妨尝试一下这里的地铁。</p><p>​    很早就听说伦敦的地铁里很少有人在玩手机、打电话，都是一些安静地看报和沉思的绅士淑女们，和国内的地铁里人人都在水手机的场景形成鲜明对比。今日有幸亲眼见识了伦敦地铁的男男女女，发现此言确实不虚，只不过没说清楚——伦敦的地铁没有信号也没有wifi，除了看报发呆，玩玩cross puzzle以外，还有什么能排遣通勤的无聊的呢？</p><p>​    另外一点不能忍受的就是地铁里没有空调——在夏天的伦敦地铁里，无论是站台上或者车厢里都十分闷热。而且站台上也没有隔离墙，地铁进站时就能感受到一股劲风迎面而来，真让人捏把汗。</p><p>​    不过，对这一个世上最高龄的地铁系统，似乎也不好抱怨什么。只能说我们的祖国完美地利用了后发者的优势，让我们享受到了现代交通的便利。</p><h3 id="食物"><a href="#食物" class="headerlink" title="食物"></a>食物</h3><p>​    “拴住一个人最好的方式是拴住他的胃。”那么恐怕英国是无法拴住一个中国人的。</p><p>​    英国有三道名菜——Fish and chips。炸鱼就是一大块无味的鱼，薯条就是普通的粗薯条，不管加什么酱料，我都是在看不出这有什么美味的。英国人对炸鱼薯条的热情让人难以想象，而且是真心觉得这玩意很美味。每次想到这一点，我都不禁同情他们，为他们可能一生都吃不到真正美味的东西而感到遗憾。</p><p>​    除此之外，意大利菜，美国快餐（主要是开封菜）之类的也让人难以适应。找东亚的餐馆成为了一天重要的事——日本的寿司，泰国的咖喱，中国的烤鱼，那真的是天赐的美味。</p><p>​    不过我在这里并不要控诉英国食物的难吃和单调，而是描述这些天经历的一段奇遇。</p><p>​    有一天傍晚，我和熟悉的同学去贝克街221b看福尔摩斯。我们走进了一家寿司店，那里的面和饭也说不上好吃，但是因为时间比较晚了，加之本土的菜已经让我们不再期待在这儿能遭遇什么美食，倒也没有什么怨言。</p><p>​    等我们吃完，店里已经没有其他顾客了。这时老板走来正要关门，突然转身对我们说：你们想要免费的寿司吗？（Do you want FREE sushi?）</p><p>​    我们面面相觑，这是什么操作？正惊疑不定间，老板指着冷藏架上的寿司说：这些寿司我卖不完，今天要扔掉了，你们不嫌弃的话可以拿走。</p><p>​    他接着用手比划了一下，意思是全部都可以拿走。</p><p>​    我们看着半柜子的大大小小的寿司盒子，惊呆了。里面有紫菜的、三文鱼的、叫不出名字的各种寿司，简直是一顿豪华的寿司宴。以一盒五磅算的话，这里应该有六七十磅了。</p><p>​    谢过老板之后我们带着两大袋寿司满载而归，一路上感慨万千。<s>“资本主义确实有可取之处”</s>，不过当然更多地是对老板的大方和对食材的高标准要求感到印象深刻。我们商量着怎么处置这些寿司，甚至打算当街叫卖——当然最终还是带到寝室分食了。</p><p>​    这次奇遇使我们得出一个结论：以后要是吃不起饭，就去寿司店蹲点！</p><h3 id="景点"><a href="#景点" class="headerlink" title="景点"></a>景点</h3><p><img src="/2018/09/03/Shape-of-Britain/london eye.jpg" alt></p><p>说句实话，伦敦的市区本身带来的美好已经足够让人惊艳，而她的几个主要景点倒是没有在我心里留下太多的印象；留下的只是一些画面。</p><p>伦敦眼上将泰晤士河两岸的建筑收尽眼底，在夕阳下熠熠闪光的河水与被染红的大本钟形成的剪影。</p><p>西敏斯特教堂里气象万千的彩色花窗，脚下无数有名无名者的墓碑，是人类群星闪耀的余烬。</p><p>塔桥上层的玻璃下方，车水马龙的桥面和汹涌的河水清晰可见，带给人魔幻而危险的刺激。</p><p>免费开放的大英博物馆、国家美术馆这些地方非但是外国游客的聚集地，也经常是本地人的休闲场所。经常看到有一家三口，大人带着小孩参观的场景。如果住在伦敦，时不时有空去欣赏世界名画的风采，也是充满情趣。</p><p>在伦敦的时候还去了一个地方，那就是杜莎夫人蜡像馆。那里不仅展出着本国的名人，包括莎士比亚，伊丽莎白这些，以及本土的明星，还有许多举世闻名的人物。一进场就能看到赫本在《蒂凡尼的早餐》里妆容精致，一袭黑色长裙，手持烟斗端坐在小桌边的经典场景，气质风采不亚于真人。此外还有同行的女孩子心心念念的卷福、抖森这些当今的大牌，和他们合影真是过足了瘾。</p><p>剑河两岸典雅幽静的学院建筑，横跨其上的叹息桥；国王学院依偎着高达数十米的巨大橡树，偶然飞过的鸽子永远留在了我的镜头里。种种的美好，不一而足。</p><p><img src="/2018/09/03/Shape-of-Britain/king college1.jpg" alt></p><p><img src="/2018/09/03/Shape-of-Britain/trinity college.jpg" alt></p><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p><img src="/2018/09/03/Shape-of-Britain/teacher.JPG" alt></p><p>​    说了这么多旅行和娱乐的事情，是时候总结一下学习的情况了。</p><p>​    总体而言，这一次的体验收获丰富。虽然部分讲座的深度略显不足，但是考虑到这一次游学带有一部分科普的性质，而同行的人们也不全有计算机的基础，这一部分只当开拓眼界即可。</p><p>​    帝国理工大学的Schuller教授给我们带来了机器学习和深度学习概念的导览，略去了一些不必要的技术细节，并介绍了当前研究主要的前沿部分如CNN、end-to-end的理论和实践。当然仅仅通过介绍就想了解这一领域显然是不足的；根据这些入门的概念，在后期深入学习是十分必要的。</p><p>​    此外，在汤森路透和技术总监的交流也使我们看到AI在新闻领域的应用，Benevelant公司则利用NLP技术提取论文中的关系构建知识网络，着实让人开拓了眼界。</p><p>​    对于工业4.0的部分，在剑桥接触的ARM芯片公司有着制定行业标准的野心，无人驾驶领域通过lidar技术实现精确的前景辨认，以及窄带网络的分布计算去云端的系统，都使人印象深刻。然而隔行如隔山，我对于这一工业领域的了解有限，无法完全领会他们讲座的精髓之处。</p><h3 id="其他-·-尾声"><a href="#其他-·-尾声" class="headerlink" title="其他 · 尾声"></a>其他 · 尾声</h3><p>​    英国人很懒。</p><p>​    这里的店铺，比如饭店、书店，大多五六点就关门了；到了九点之后，服装店、化妆品这些也很难在街上看到；超市是最晚关门的，大约十点。酒吧之类的应该是从下午开始营业，自是另当别论，但是在七八点钟的时候，走在英国的街道上和走在国内的街道上是两种完全不同的体验。你会感觉错过了一定的时间，做什么都不方便。</p><p>​    英国人是悠闲的，生活质量比谋生更重要。其实整个欧洲都差不多。大概这就是社会发展水平的差异吧，对物质财富重视也是发展中国家人民的一大特点，这一点彼此都无可厚非。逛街体验上当然不如国内。</p><p>​    英国人的社交活动不多。</p><p>​    他们唯一的爱好就是周四周五的晚上，站在小酒吧的门口端着一杯酒尬聊。这样的奇妙场景十分常见，在人数众多的场合甚至有警察维护秩序。有机会的话，真想加入他们看看都在聊些什么。不过在酒吧饮酒似乎需要满21周岁————这是题外话了。</p><p>​    英国，有缘再会。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> traveling </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
